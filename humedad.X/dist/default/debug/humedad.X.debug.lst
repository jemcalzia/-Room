

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Feb 24 13:02:55 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.05
    19                           ; Generated 20/12/2018 GMT
    20                           ; 
    21                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0005                     _PORTA	set	5
   287  0006                     _PORTB	set	6
   288  0028                     _RA0	set	40
   289  002A                     _RA2	set	42
   290  0029                     _RA1	set	41
   291  008F                     _OSCCONbits	set	143
   292  0428                     _TRISA0	set	1064
   293  042A                     _TRISA2	set	1066
   294  0429                     _TRISA1	set	1065
   295  0188                     _ANSEL	set	392
   296                           
   297                           	psect	strings
   298  0003                     __pstrings:	
   299  0003                     stringtab:	
   300  0003                     __stringtab:	
   301  0003                     stringcode:	
   302                           ;	String table - string pointers are 1 byte each
   303                           
   304  0003                     stringdir:	
   305  0003  3000               	movlw	high stringdir
   306  0004  008A               	movwf	10
   307  0005  0804               	movf	4,w
   308  0006  0A84               	incf	4,f
   309  0007  0782               	addwf	2,f
   310  0008                     __stringbase:	
   311  0008  3400               	retlw	0
   312  0009                     __end_of__stringtab:	
   313  0009                     STR_1:	
   314  0009  3446               	retlw	70	;'F'
   315  000A  3475               	retlw	117	;'u'
   316  000B  346E               	retlw	110	;'n'
   317  000C  3463               	retlw	99	;'c'
   318  000D  3469               	retlw	105	;'i'
   319  000E  346F               	retlw	111	;'o'
   320  000F  346E               	retlw	110	;'n'
   321  0010  3461               	retlw	97	;'a'
   322  0011  3400               	retlw	0
   323                           
   324                           ; #config settings
   325  0000                     
   326                           	psect	cinit
   327  07ED                     start_initialization:	
   328  07ED                     __initialization:	
   329                           
   330                           ; Clear objects allocated to COMMON
   331  07ED  3070               	movlw	low __pbssCOMMON
   332  07EE  0084               	movwf	4
   333  07EF  3078               	movlw	low (__pbssCOMMON+8)
   334  07F0  120A  118A  2724  120A  118A  	fcall	clear_ram0
   335                           
   336                           ; Clear objects allocated to BANK0
   337  07F5  1383               	bcf	3,7	;select IRP bank0
   338  07F6  3020               	movlw	low __pbssBANK0
   339  07F7  0084               	movwf	4
   340  07F8  302F               	movlw	low (__pbssBANK0+15)
   341  07F9  120A  118A  2724   	fcall	clear_ram0
   342  07FC                     end_of_initialization:	
   343                           ;End of C runtime variable initialization code
   344                           
   345  07FC                     __end_of__initialization:	
   346  07FC  0183               	clrf	3
   347  07FD  120A  118A  2F5E   	ljmp	_main	;jump to C main() function
   348                           
   349                           	psect	bssCOMMON
   350  0070                     __pbssCOMMON:	
   351  0070                     dht11_read@temp:	
   352  0070                     	ds	1
   353  0071                     dht11_read@i:	
   354  0071                     	ds	1
   355  0072                     _total:	
   356  0072                     	ds	1
   357  0073                     _check:	
   358  0073                     	ds	1
   359  0074                     _hum_dec:	
   360  0074                     	ds	1
   361  0075                     _hum_int:	
   362  0075                     	ds	1
   363  0076                     _temp_dec:	
   364  0076                     	ds	1
   365  0077                     _temp_int:	
   366  0077                     	ds	1
   367                           
   368                           	psect	bssBANK0
   369  0020                     __pbssBANK0:	
   370  0020                     _show:	
   371  0020                     	ds	15
   372                           
   373                           	psect	clrtext
   374  0724                     clear_ram0:	
   375                           ;	Called with FSR containing the base address, and
   376                           ;	W with the last address+1
   377                           
   378  0724  0064               	clrwdt	;clear the watchdog before getting into this loop
   379  0725                     clrloop0:	
   380  0725  0180               	clrf	0	;clear RAM location pointed to by FSR
   381  0726  0A84               	incf	4,f	;increment pointer
   382  0727  0604               	xorwf	4,w	;XOR with final address
   383  0728  1903               	btfsc	3,2	;have we reached the end yet?
   384  0729  3400               	retlw	0	;all done for this memory range, return
   385  072A  0604               	xorwf	4,w	;XOR again to restore value
   386  072B  2F25               	goto	clrloop0	;do the next byte
   387                           
   388                           	psect	cstackCOMMON
   389  0078                     __pcstackCOMMON:	
   390  0078                     ?_LCD8_write:	
   391  0078                     ??_LCD8_write:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0078                     ?_LCD8_cmd:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0078                     ??_LCD8_cmd:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0078                     ?_LCD8_begin:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0078                     ?_LCD8_strWrite:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0078                     ?_oscilator_begin:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0078                     ??_oscilator_begin:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0078                     ?_main:	
   413                           ; 1 bytes @ 0x0
   414                           
   415                           
   416                           ; 1 bytes @ 0x0
   417  0078                     	ds	1
   418  0079                     LCD8_write@data:	
   419  0079                     oscilator_begin@freq:	
   420                           ; 1 bytes @ 0x1
   421                           
   422                           
   423                           ; 1 bytes @ 0x1
   424  0079                     	ds	1
   425  007A                     ??_LCD8_strWrite:	
   426  007A                     LCD8_cmd@data:	
   427                           ; 1 bytes @ 0x2
   428                           
   429                           
   430                           ; 1 bytes @ 0x2
   431  007A                     	ds	1
   432  007B                     ??_LCD8_begin:	
   433  007B                     LCD8_strWrite@data:	
   434                           ; 1 bytes @ 0x3
   435                           
   436                           
   437                           ; 1 bytes @ 0x3
   438  007B                     	ds	1
   439  007C                     LCD8_strWrite@i:	
   440                           
   441                           ; 1 bytes @ 0x4
   442  007C                     	ds	1
   443  007D                     ??_main:	
   444                           
   445                           	psect	maintext
   446  075E                     __pmaintext:	
   447                           ; 1 bytes @ 0x5
   448 ;;
   449 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   450 ;;
   451 ;; *************** function _main *****************
   452 ;; Defined at:
   453 ;;		line 41 in file "humedad_main.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;		None
   456 ;; Auto vars:     Size  Location     Type
   457 ;;		None
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : B00/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   467 ;;      Params:         0       0       0       0       0
   468 ;;      Locals:         0       0       0       0       0
   469 ;;      Temps:          0       0       0       0       0
   470 ;;      Totals:         0       0       0       0       0
   471 ;;Total ram usage:        0 bytes
   472 ;; Hardware stack levels required when called:    2
   473 ;; This function calls:
   474 ;;		_LCD8_begin
   475 ;;		_LCD8_strWrite
   476 ;;		_oscilator_begin
   477 ;; This function is called by:
   478 ;;		Startup code after reset
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           
   483                           ;psect for function _main
   484  075E                     _main:	
   485                           
   486                           ;humedad_main.c: 43:     ANSEL = 0;
   487                           
   488                           ;incstack = 0
   489                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   490  075E  1683               	bsf	3,5	;RP0=1, select bank3
   491  075F  1703               	bsf	3,6	;RP1=1, select bank3
   492  0760  0188               	clrf	8	;volatile
   493                           
   494                           ;humedad_main.c: 44:     TRISA1 = 0;
   495  0761  1683               	bsf	3,5	;RP0=1, select bank1
   496  0762  1303               	bcf	3,6	;RP1=0, select bank1
   497  0763  1085               	bcf	5,1	;volatile
   498                           
   499                           ;humedad_main.c: 45:     TRISA2 = 0;
   500  0764  1105               	bcf	5,2	;volatile
   501                           
   502                           ;humedad_main.c: 46:     PORTA = 0;
   503  0765  1283               	bcf	3,5	;RP0=0, select bank0
   504  0766  1303               	bcf	3,6	;RP1=0, select bank0
   505  0767  0185               	clrf	5	;volatile
   506                           
   507                           ;humedad_main.c: 47:     oscilator_begin(7);
   508  0768  3007               	movlw	7
   509  0769  120A  118A  272C  120A  118A  	fcall	_oscilator_begin
   510                           
   511                           ;humedad_main.c: 48:     LCD8_begin();
   512  076E  120A  118A  2799  120A  118A  	fcall	_LCD8_begin
   513                           
   514                           ;humedad_main.c: 50:     LCD8_strWrite("Funciona");
   515  0773  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   516  0774  120A  118A  277A   	fcall	_LCD8_strWrite
   517  0777  120A  118A  2800   	ljmp	start
   518  077A                     __end_of_main:	
   519                           
   520                           	psect	text1
   521  072C                     __ptext1:	
   522 ;; *************** function _oscilator_begin *****************
   523 ;; Defined at:
   524 ;;		line 9 in file "./Oscilator.h"
   525 ;; Parameters:    Size  Location     Type
   526 ;;  freq            1    wreg     unsigned char 
   527 ;; Auto vars:     Size  Location     Type
   528 ;;  freq            1    1[COMMON] unsigned char 
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      void 
   531 ;; Registers used:
   532 ;;		wreg, status,2, status,0
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   538 ;;      Params:         0       0       0       0       0
   539 ;;      Locals:         1       0       0       0       0
   540 ;;      Temps:          1       0       0       0       0
   541 ;;      Totals:         2       0       0       0       0
   542 ;;Total ram usage:        2 bytes
   543 ;; Hardware stack levels used:    1
   544 ;; This function calls:
   545 ;;		Nothing
   546 ;; This function is called by:
   547 ;;		_main
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           
   552                           ;psect for function _oscilator_begin
   553  072C                     _oscilator_begin:	
   554                           
   555                           ;incstack = 0
   556                           ; Regs used in _oscilator_begin: [wreg+status,2+status,0]
   557                           ;oscilator_begin@freq stored from wreg
   558  072C  00F9               	movwf	oscilator_begin@freq
   559                           
   560                           ;./Oscilator.h: 10:     OSCCONbits.IRCF = freq;
   561  072D  0879               	movf	oscilator_begin@freq,w
   562  072E  00F8               	movwf	??_oscilator_begin
   563  072F  0EF8               	swapf	??_oscilator_begin,f
   564  0730  1683               	bsf	3,5	;RP0=1, select bank1
   565  0731  1303               	bcf	3,6	;RP1=0, select bank1
   566  0732  080F               	movf	15,w	;volatile
   567  0733  0678               	xorwf	??_oscilator_begin,w
   568  0734  398F               	andlw	-113
   569  0735  0678               	xorwf	??_oscilator_begin,w
   570  0736  008F               	movwf	15	;volatile
   571                           
   572                           ;./Oscilator.h: 11:     OSCCONbits.SCS = 1;
   573  0737  140F               	bsf	15,0	;volatile
   574                           
   575                           ;./Oscilator.h: 12:     OSCCONbits.OSTS = 0;
   576  0738  118F               	bcf	15,3	;volatile
   577  0739  0008               	return
   578  073A                     __end_of_oscilator_begin:	
   579                           
   580                           	psect	text2
   581  077A                     __ptext2:	
   582 ;; *************** function _LCD8_strWrite *****************
   583 ;; Defined at:
   584 ;;		line 55 in file "./LCD8bit.h"
   585 ;; Parameters:    Size  Location     Type
   586 ;;  data            1    wreg     PTR unsigned char 
   587 ;;		 -> STR_1(9), 
   588 ;; Auto vars:     Size  Location     Type
   589 ;;  data            1    3[COMMON] PTR unsigned char 
   590 ;;		 -> STR_1(9), 
   591 ;;  i               1    4[COMMON] unsigned char 
   592 ;; Return value:  Size  Location     Type
   593 ;;                  1    wreg      void 
   594 ;; Registers used:
   595 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   596 ;; Tracked objects:
   597 ;;		On entry : 0/0
   598 ;;		On exit  : 0/0
   599 ;;		Unchanged: 0/0
   600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   601 ;;      Params:         0       0       0       0       0
   602 ;;      Locals:         2       0       0       0       0
   603 ;;      Temps:          1       0       0       0       0
   604 ;;      Totals:         3       0       0       0       0
   605 ;;Total ram usage:        3 bytes
   606 ;; Hardware stack levels used:    1
   607 ;; Hardware stack levels required when called:    1
   608 ;; This function calls:
   609 ;;		_LCD8_write
   610 ;; This function is called by:
   611 ;;		_main
   612 ;; This function uses a non-reentrant model
   613 ;;
   614                           
   615                           
   616                           ;psect for function _LCD8_strWrite
   617  077A                     _LCD8_strWrite:	
   618                           
   619                           ;incstack = 0
   620                           ; Regs used in _LCD8_strWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   621                           ;LCD8_strWrite@data stored from wreg
   622  077A  00FB               	movwf	LCD8_strWrite@data
   623                           
   624                           ;./LCD8bit.h: 56:     char i;;./LCD8bit.h: 57:         for(i=0; data[i] !='\0';i++ )
   625  077B  01FC               	clrf	LCD8_strWrite@i
   626  077C                     l817:	
   627  077C  087C               	movf	LCD8_strWrite@i,w
   628  077D  077B               	addwf	LCD8_strWrite@data,w
   629  077E  0084               	movwf	4
   630  077F  120A  118A  2003  120A  118A  	fcall	stringdir
   631  0784  3A00               	xorlw	0
   632  0785  1903               	btfsc	3,2
   633  0786  0008               	return
   634                           
   635                           ;./LCD8bit.h: 58:             LCD8_write(data[i]);
   636  0787  087C               	movf	LCD8_strWrite@i,w
   637  0788  077B               	addwf	LCD8_strWrite@data,w
   638  0789  0084               	movwf	4
   639  078A  120A  118A  2003  120A  118A  	fcall	stringdir
   640  078F  120A  118A  273A  120A  118A  	fcall	_LCD8_write
   641  0794  3001               	movlw	1
   642  0795  00FA               	movwf	??_LCD8_strWrite
   643  0796  087A               	movf	??_LCD8_strWrite,w
   644  0797  07FC               	addwf	LCD8_strWrite@i,f
   645  0798  2F7C               	goto	l817
   646  0799                     __end_of_LCD8_strWrite:	
   647                           
   648                           	psect	text3
   649  073A                     __ptext3:	
   650 ;; *************** function _LCD8_write *****************
   651 ;; Defined at:
   652 ;;		line 4 in file "./LCD8bit.h"
   653 ;; Parameters:    Size  Location     Type
   654 ;;  data            1    wreg     unsigned char 
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  data            1    1[COMMON] unsigned char 
   657 ;; Return value:  Size  Location     Type
   658 ;;                  1    wreg      void 
   659 ;; Registers used:
   660 ;;		wreg
   661 ;; Tracked objects:
   662 ;;		On entry : 0/0
   663 ;;		On exit  : 0/0
   664 ;;		Unchanged: 0/0
   665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   666 ;;      Params:         0       0       0       0       0
   667 ;;      Locals:         1       0       0       0       0
   668 ;;      Temps:          1       0       0       0       0
   669 ;;      Totals:         2       0       0       0       0
   670 ;;Total ram usage:        2 bytes
   671 ;; Hardware stack levels used:    1
   672 ;; This function calls:
   673 ;;		Nothing
   674 ;; This function is called by:
   675 ;;		_LCD8_strWrite
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           
   680                           ;psect for function _LCD8_write
   681  073A                     _LCD8_write:	
   682                           
   683                           ;incstack = 0
   684                           ; Regs used in _LCD8_write: [wreg]
   685                           ;LCD8_write@data stored from wreg
   686  073A  00F9               	movwf	LCD8_write@data
   687                           
   688                           ;./LCD8bit.h: 5:     RA1 = 1;
   689  073B  1283               	bcf	3,5	;RP0=0, select bank0
   690  073C  1303               	bcf	3,6	;RP1=0, select bank0
   691  073D  1485               	bsf	5,1	;volatile
   692                           
   693                           ;./LCD8bit.h: 6:     PORTB = data;
   694  073E  0879               	movf	LCD8_write@data,w
   695  073F  0086               	movwf	6	;volatile
   696                           
   697                           ;./LCD8bit.h: 7:     RA2 = 1;
   698  0740  1505               	bsf	5,2	;volatile
   699                           
   700                           ;./LCD8bit.h: 8:     _delay((unsigned long)((40)*(8000000/4000000.0)));
   701  0741  301A               	movlw	26
   702  0742  00F8               	movwf	??_LCD8_write
   703  0743                     u127:	
   704  0743  0BF8               	decfsz	??_LCD8_write,f
   705  0744  2F43               	goto	u127
   706  0745  0000               	nop
   707                           
   708                           ;./LCD8bit.h: 9:     RA2 = 0;
   709  0746  1283               	bcf	3,5	;RP0=0, select bank0
   710  0747  1303               	bcf	3,6	;RP1=0, select bank0
   711  0748  1105               	bcf	5,2	;volatile
   712  0749  0008               	return
   713  074A                     __end_of_LCD8_write:	
   714                           
   715                           	psect	text4
   716  0799                     __ptext4:	
   717 ;; *************** function _LCD8_begin *****************
   718 ;; Defined at:
   719 ;;		line 37 in file "./LCD8bit.h"
   720 ;; Parameters:    Size  Location     Type
   721 ;;		None
   722 ;; Auto vars:     Size  Location     Type
   723 ;;		None
   724 ;; Return value:  Size  Location     Type
   725 ;;                  1    wreg      void 
   726 ;; Registers used:
   727 ;;		wreg, status,2, status,0, pclath, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   733 ;;      Params:         0       0       0       0       0
   734 ;;      Locals:         0       0       0       0       0
   735 ;;      Temps:          2       0       0       0       0
   736 ;;      Totals:         2       0       0       0       0
   737 ;;Total ram usage:        2 bytes
   738 ;; Hardware stack levels used:    1
   739 ;; Hardware stack levels required when called:    1
   740 ;; This function calls:
   741 ;;		_LCD8_cmd
   742 ;; This function is called by:
   743 ;;		_main
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           
   748                           ;psect for function _LCD8_begin
   749  0799                     _LCD8_begin:	
   750                           
   751                           ;./LCD8bit.h: 38:     PORTB = 0;
   752                           
   753                           ;incstack = 0
   754                           ; Regs used in _LCD8_begin: [wreg+status,2+status,0+pclath+cstack]
   755  0799  1283               	bcf	3,5	;RP0=0, select bank0
   756  079A  1303               	bcf	3,6	;RP1=0, select bank0
   757  079B  0186               	clrf	6	;volatile
   758                           
   759                           ;./LCD8bit.h: 39:     _delay((unsigned long)((20)*(8000000/4000.0)));
   760  079C  3034               	movlw	52
   761  079D  00FC               	movwf	??_LCD8_begin+1
   762  079E  30F1               	movlw	241
   763  079F  00FB               	movwf	??_LCD8_begin
   764  07A0                     u137:	
   765  07A0  0BFB               	decfsz	??_LCD8_begin,f
   766  07A1  2FA0               	goto	u137
   767  07A2  0BFC               	decfsz	??_LCD8_begin+1,f
   768  07A3  2FA0               	goto	u137
   769  07A4  2FA5               	nop2
   770                           
   771                           ;./LCD8bit.h: 40:     LCD8_cmd(48);
   772  07A5  3030               	movlw	48
   773  07A6  120A  118A  274A  120A  118A  	fcall	_LCD8_cmd
   774                           
   775                           ;./LCD8bit.h: 41:     _delay((unsigned long)((5)*(8000000/4000.0)));
   776  07AB  300D               	movlw	13
   777  07AC  00FC               	movwf	??_LCD8_begin+1
   778  07AD  30FB               	movlw	251
   779  07AE  00FB               	movwf	??_LCD8_begin
   780  07AF                     u147:	
   781  07AF  0BFB               	decfsz	??_LCD8_begin,f
   782  07B0  2FAF               	goto	u147
   783  07B1  0BFC               	decfsz	??_LCD8_begin+1,f
   784  07B2  2FAF               	goto	u147
   785  07B3  2FB4               	nop2
   786                           
   787                           ;./LCD8bit.h: 42:     LCD8_cmd(48);
   788  07B4  3030               	movlw	48
   789  07B5  120A  118A  274A  120A  118A  	fcall	_LCD8_cmd
   790                           
   791                           ;./LCD8bit.h: 43:     _delay((unsigned long)((165)*(8000000/4000000.0)));
   792  07BA  306D               	movlw	109
   793  07BB  00FB               	movwf	??_LCD8_begin
   794  07BC                     u157:	
   795  07BC  0BFB               	decfsz	??_LCD8_begin,f
   796  07BD  2FBC               	goto	u157
   797  07BE  2FBF               	nop2
   798                           
   799                           ;./LCD8bit.h: 44:     LCD8_cmd(48);
   800  07BF  3030               	movlw	48
   801  07C0  120A  118A  274A  120A  118A  	fcall	_LCD8_cmd
   802                           
   803                           ;./LCD8bit.h: 45:     _delay((unsigned long)((165)*(8000000/4000000.0)));
   804  07C5  306D               	movlw	109
   805  07C6  00FB               	movwf	??_LCD8_begin
   806  07C7                     u167:	
   807  07C7  0BFB               	decfsz	??_LCD8_begin,f
   808  07C8  2FC7               	goto	u167
   809  07C9  2FCA               	nop2
   810                           
   811                           ;./LCD8bit.h: 47:     LCD8_cmd(0b111000);
   812  07CA  3038               	movlw	56
   813  07CB  120A  118A  274A  120A  118A  	fcall	_LCD8_cmd
   814                           
   815                           ;./LCD8bit.h: 48:     LCD8_cmd(0b10100);
   816  07D0  3014               	movlw	20
   817  07D1  120A  118A  274A  120A  118A  	fcall	_LCD8_cmd
   818                           
   819                           ;./LCD8bit.h: 49:     LCD8_cmd(1);
   820  07D6  3001               	movlw	1
   821  07D7  120A  118A  274A  120A  118A  	fcall	_LCD8_cmd
   822                           
   823                           ;./LCD8bit.h: 50:     LCD8_cmd(0b110);
   824  07DC  3006               	movlw	6
   825  07DD  120A  118A  274A  120A  118A  	fcall	_LCD8_cmd
   826                           
   827                           ;./LCD8bit.h: 51:     LCD8_cmd(0b1100);
   828  07E2  300C               	movlw	12
   829  07E3  120A  118A  274A  120A  118A  	fcall	_LCD8_cmd
   830                           
   831                           ;./LCD8bit.h: 52:     LCD8_cmd(0b10);
   832  07E8  3002               	movlw	2
   833  07E9  120A  118A  274A   	fcall	_LCD8_cmd
   834  07EC  0008               	return
   835  07ED                     __end_of_LCD8_begin:	
   836                           
   837                           	psect	text5
   838  074A                     __ptext5:	
   839 ;; *************** function _LCD8_cmd *****************
   840 ;; Defined at:
   841 ;;		line 12 in file "./LCD8bit.h"
   842 ;; Parameters:    Size  Location     Type
   843 ;;  data            1    wreg     unsigned char 
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  data            1    2[COMMON] unsigned char 
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   855 ;;      Params:         0       0       0       0       0
   856 ;;      Locals:         1       0       0       0       0
   857 ;;      Temps:          2       0       0       0       0
   858 ;;      Totals:         3       0       0       0       0
   859 ;;Total ram usage:        3 bytes
   860 ;; Hardware stack levels used:    1
   861 ;; This function calls:
   862 ;;		Nothing
   863 ;; This function is called by:
   864 ;;		_LCD8_begin
   865 ;;		_LCD8_set_cursor
   866 ;;		_LCD8_clear
   867 ;;		_LCD8_shiftR
   868 ;;		_LCD8_shiftL
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           
   873                           ;psect for function _LCD8_cmd
   874  074A                     _LCD8_cmd:	
   875                           
   876                           ;incstack = 0
   877                           ; Regs used in _LCD8_cmd: [wreg]
   878                           ;LCD8_cmd@data stored from wreg
   879  074A  00FA               	movwf	LCD8_cmd@data
   880                           
   881                           ;./LCD8bit.h: 13:     RA1 = 0;
   882  074B  1283               	bcf	3,5	;RP0=0, select bank0
   883  074C  1303               	bcf	3,6	;RP1=0, select bank0
   884  074D  1085               	bcf	5,1	;volatile
   885                           
   886                           ;./LCD8bit.h: 14:     PORTB = data;
   887  074E  087A               	movf	LCD8_cmd@data,w
   888  074F  0086               	movwf	6	;volatile
   889                           
   890                           ;./LCD8bit.h: 16:     RA2 = 1;
   891  0750  1505               	bsf	5,2	;volatile
   892                           
   893                           ;./LCD8bit.h: 17:     _delay((unsigned long)((4)*(8000000/4000.0)));
   894  0751  300B               	movlw	11
   895  0752  00F9               	movwf	??_LCD8_cmd+1
   896  0753  3062               	movlw	98
   897  0754  00F8               	movwf	??_LCD8_cmd
   898  0755                     u177:	
   899  0755  0BF8               	decfsz	??_LCD8_cmd,f
   900  0756  2F55               	goto	u177
   901  0757  0BF9               	decfsz	??_LCD8_cmd+1,f
   902  0758  2F55               	goto	u177
   903  0759  0000               	nop
   904                           
   905                           ;./LCD8bit.h: 18:     RA2 = 0;
   906  075A  1283               	bcf	3,5	;RP0=0, select bank0
   907  075B  1303               	bcf	3,6	;RP1=0, select bank0
   908  075C  1105               	bcf	5,2	;volatile
   909  075D  0008               	return
   910  075E                     __end_of_LCD8_cmd:	
   911  007E                     btemp	set	126	;btemp
   912  007E                     wtemp0	set	126


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      13
    BANK0            80      0      15
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD8_strWrite@data	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _main->_LCD8_begin
    _main->_LCD8_strWrite
    _LCD8_strWrite->_LCD8_write
    _LCD8_begin->_LCD8_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     168
                         _LCD8_begin
                      _LCD8_strWrite
                    _oscilator_begin
 ---------------------------------------------------------------------------------
 (1) _oscilator_begin                                      2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD8_strWrite                                        3     3      0     138
                                              2 COMMON     3     3      0
                         _LCD8_write
 ---------------------------------------------------------------------------------
 (2) _LCD8_write                                           2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD8_begin                                           2     2      0      15
                                              3 COMMON     2     2      0
                           _LCD8_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD8_cmd                                             3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD8_begin
     _LCD8_cmd
   _LCD8_strWrite
     _LCD8_write
   _oscilator_begin

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       F       5       18.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1C      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Feb 24 13:02:55 2019

                       pc 0002               __CFG_CP$OFF 0000                        fsr 0004  
                     l817 077C                       _RA0 0028                       _RA1 0029  
                     _RA2 002A                       u127 0743                       u137 07A0  
                     u147 07AF                       u157 07BC                       u167 07C7  
                     u177 0755              __CFG_CPD$OFF 0000                       fsr0 0004  
                     indf 0000              __CFG_LVP$OFF 0000                      STR_1 0009  
            __CFG_WRT$OFF 0000                      _main 075E                      _show 0020  
                    btemp 007E             __CFG_BOREN$ON 0000                      start 0000  
           __CFG_IESO$OFF 0000   __end_of_oscilator_begin 073A          __end_of_LCD8_cmd 075E  
     __size_of_LCD8_begin 0054                     ?_main 0078       __size_of_LCD8_write 0010  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188                     _PORTA 0005  
                   _PORTB 0006            __CFG_FCMEN$OFF 0000                     _check 0073  
                   _total 0072                     pclath 000A                     status 0003  
                   wtemp0 007E            __CFG_MCLRE$OFF 0000           __initialization 07ED  
            __end_of_main 077A                    ??_main 007D                    _TRISA0 0428  
                  _TRISA1 0429                    _TRISA2 042A            __CFG_PWRTE$OFF 0000  
        ?_oscilator_begin 0078            dht11_read@temp 0070              ??_LCD8_begin 007B  
               ?_LCD8_cmd 0078              ??_LCD8_write 0078   __end_of__initialization 07FC  
          __pcstackCOMMON 0078        __end_of_LCD8_begin 07ED        __end_of_LCD8_write 074A  
              ??_LCD8_cmd 0078                __pbssBANK0 0020     __end_of_LCD8_strWrite 0799  
              __pmaintext 075E                __stringtab 0003                   __ptext1 072C  
                 __ptext2 077A                   __ptext3 073A                   __ptext4 0799  
                 __ptext5 074A                   _hum_dec 0074         LCD8_strWrite@data 007B  
                 _hum_int 0075                   clrloop0 0725      end_of_initialization 07FC  
       __size_of_LCD8_cmd 0014  __size_of_oscilator_begin 000E       start_initialization 07ED  
__CFG_FOSC$INTRC_NOCLKOUT 0000               __pbssCOMMON 0070                 ___latbits 0002  
             dht11_read@i 0071            LCD8_strWrite@i 007C                 __pstrings 0003  
  __size_of_LCD8_strWrite 001F            LCD8_write@data 0079         ??_oscilator_begin 0078  
                _LCD8_cmd 074A                 clear_ram0 0724               __stringbase 0008  
           _LCD8_strWrite 077A       oscilator_begin@freq 0079        __end_of__stringtab 0009  
       __CFG_BOR4V$BOR40V 0000                _LCD8_begin 0799            ?_LCD8_strWrite 0078  
              _LCD8_write 073A             __size_of_main 001C              LCD8_cmd@data 007A  
                _temp_dec 0076                  _temp_int 0077                 stringcode 0003  
              _OSCCONbits 008F           _oscilator_begin 072C                  stringdir 0003  
                stringtab 0003           ??_LCD8_strWrite 007A               ?_LCD8_begin 0078  
             ?_LCD8_write 0078  
