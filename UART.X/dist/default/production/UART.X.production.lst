

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Mar 03 14:55:27 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.05
    15                           ; Generated 20/12/2018 GMT
    16                           ; 
    17                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  008F                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  0105                     	;# 
   190  0107                     	;# 
   191  0108                     	;# 
   192  0109                     	;# 
   193  010C                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  0185                     	;# 
   199  0187                     	;# 
   200  0188                     	;# 
   201  0189                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0019                     _TXREG	set	25
   205  001A                     _RCREG	set	26
   206  0065                     _RCIF	set	101
   207  00C4                     _CREN	set	196
   208  00C7                     _SPEN	set	199
   209  008F                     _OSCCONbits	set	143
   210  0099                     _SPBRG	set	153
   211  04C1                     _TRMT	set	1217
   212  04C5                     _TXEN	set	1221
   213  043E                     _TRISC6	set	1086
   214  043F                     _TRISC7	set	1087
   215  04C4                     _SYNC	set	1220
   216  04C2                     _BRGH	set	1218
   217                           
   218                           ; #config settings
   219  0000                     
   220                           	psect	cinit
   221  07FC                     start_initialization:	
   222  07FC                     __initialization:	
   223  07FC                     end_of_initialization:	
   224                           ;End of C runtime variable initialization code
   225                           
   226  07FC                     __end_of__initialization:	
   227  07FC  0183               	clrf	3
   228  07FD  120A  118A  2E6E   	ljmp	_main	;jump to C main() function
   229                           
   230                           	psect	cstackCOMMON
   231  0070                     __pcstackCOMMON:	
   232  0070                     ?_uart_write:	
   233  0070                     ??_uart_write:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ?_oscilator_begin:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ??_oscilator_begin:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ?_main:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?___aldiv:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     uart_write@data:	
   249                           ; 4 bytes @ 0x0
   250                           
   251  0070                     ___aldiv@divisor:	
   252                           ; 1 bytes @ 0x0
   253                           
   254                           
   255                           ; 4 bytes @ 0x0
   256  0070                     	ds	1
   257  0071                     oscilator_begin@freq:	
   258                           
   259                           ; 1 bytes @ 0x1
   260  0071                     	ds	3
   261  0074                     ___aldiv@dividend:	
   262                           
   263                           ; 4 bytes @ 0x4
   264  0074                     	ds	4
   265  0078                     ??___aldiv:	
   266                           
   267                           ; 1 bytes @ 0x8
   268  0078                     	ds	1
   269  0079                     uart_begin@x:	
   270                           
   271                           ; 2 bytes @ 0x9
   272  0079                     	ds	2
   273  007B                     ??_main:	
   274                           
   275                           ; 1 bytes @ 0xB
   276  007B                     	ds	3
   277                           
   278                           	psect	cstackBANK0
   279  0020                     __pcstackBANK0:	
   280  0020                     ___aldiv@counter:	
   281                           
   282                           ; 1 bytes @ 0x0
   283  0020                     	ds	1
   284  0021                     ___aldiv@sign:	
   285                           
   286                           ; 1 bytes @ 0x1
   287  0021                     	ds	1
   288  0022                     ___aldiv@quotient:	
   289                           
   290                           ; 4 bytes @ 0x2
   291  0022                     	ds	4
   292  0026                     ?_uart_begin:	
   293  0026                     uart_begin@baudrate:	
   294                           ; 1 bytes @ 0x6
   295                           
   296                           
   297                           ; 4 bytes @ 0x6
   298  0026                     	ds	4
   299  002A                     ??_uart_begin:	
   300                           
   301                           ; 1 bytes @ 0xA
   302  002A                     	ds	12
   303                           
   304                           	psect	maintext
   305  066E                     __pmaintext:	
   306 ;;
   307 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   308 ;;
   309 ;; *************** function _main *****************
   310 ;; Defined at:
   311 ;;		line 33 in file "uart_main.c"
   312 ;; Parameters:    Size  Location     Type
   313 ;;		None
   314 ;; Auto vars:     Size  Location     Type
   315 ;;		None
   316 ;; Return value:  Size  Location     Type
   317 ;;                  1    wreg      void 
   318 ;; Registers used:
   319 ;;		wreg, status,2, status,0, pclath, cstack
   320 ;; Tracked objects:
   321 ;;		On entry : B00/0
   322 ;;		On exit  : 0/0
   323 ;;		Unchanged: 0/0
   324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   325 ;;      Params:         0       0       0       0       0
   326 ;;      Locals:         0       0       0       0       0
   327 ;;      Temps:          3       0       0       0       0
   328 ;;      Totals:         3       0       0       0       0
   329 ;;Total ram usage:        3 bytes
   330 ;; Hardware stack levels required when called:    2
   331 ;; This function calls:
   332 ;;		_oscilator_begin
   333 ;;		_uart_begin
   334 ;;		_uart_write
   335 ;; This function is called by:
   336 ;;		Startup code after reset
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340                           
   341                           ;psect for function _main
   342  066E                     _main:	
   343                           
   344                           ;uart_main.c: 35:     oscilator_begin(7);
   345                           
   346                           ;incstack = 0
   347                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   348  066E  3007               	movlw	7
   349  066F  120A  118A  2660  120A  118A  	fcall	_oscilator_begin
   350                           
   351                           ;uart_main.c: 37:     uart_begin(9600);
   352  0674  3000               	movlw	0
   353  0675  1283               	bcf	3,5	;RP0=0, select bank0
   354  0676  1303               	bcf	3,6	;RP1=0, select bank0
   355  0677  00A9               	movwf	uart_begin@baudrate+3
   356  0678  3000               	movlw	0
   357  0679  00A8               	movwf	uart_begin@baudrate+2
   358  067A  3025               	movlw	37
   359  067B  00A7               	movwf	uart_begin@baudrate+1
   360  067C  3080               	movlw	128
   361  067D  00A6               	movwf	uart_begin@baudrate
   362  067E  120A  118A  2726  120A  118A  	fcall	_uart_begin
   363  0683                     l71:	
   364                           ;uart_main.c: 39:     while(1)
   365                           
   366                           
   367                           ;uart_main.c: 40:     {;uart_main.c: 41:         uart_write(5);
   368  0683  3005               	movlw	5
   369  0684  120A  118A  2656  120A  118A  	fcall	_uart_write
   370                           
   371                           ;uart_main.c: 42:         _delay((unsigned long)((500)*(8000000/4000.0)));
   372  0689  3006               	movlw	6
   373  068A  00FD               	movwf	??_main+2
   374  068B  3013               	movlw	19
   375  068C  00FC               	movwf	??_main+1
   376  068D  30AD               	movlw	173
   377  068E  00FB               	movwf	??_main
   378  068F                     u417:	
   379  068F  0BFB               	decfsz	??_main,f
   380  0690  2E8F               	goto	u417
   381  0691  0BFC               	decfsz	??_main+1,f
   382  0692  2E8F               	goto	u417
   383  0693  0BFD               	decfsz	??_main+2,f
   384  0694  2E8F               	goto	u417
   385  0695  2E96               	nop2
   386  0696  2E83               	goto	l71
   387  0697                     __end_of_main:	
   388                           
   389                           	psect	text1
   390  0656                     __ptext1:	
   391 ;; *************** function _uart_write *****************
   392 ;; Defined at:
   393 ;;		line 81 in file "./uart.h"
   394 ;; Parameters:    Size  Location     Type
   395 ;;  data            1    wreg     unsigned char 
   396 ;; Auto vars:     Size  Location     Type
   397 ;;  data            1    0[COMMON] unsigned char 
   398 ;; Return value:  Size  Location     Type
   399 ;;                  1    wreg      void 
   400 ;; Registers used:
   401 ;;		wreg
   402 ;; Tracked objects:
   403 ;;		On entry : 0/0
   404 ;;		On exit  : 0/0
   405 ;;		Unchanged: 0/0
   406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   407 ;;      Params:         0       0       0       0       0
   408 ;;      Locals:         1       0       0       0       0
   409 ;;      Temps:          0       0       0       0       0
   410 ;;      Totals:         1       0       0       0       0
   411 ;;Total ram usage:        1 bytes
   412 ;; Hardware stack levels used:    1
   413 ;; This function calls:
   414 ;;		Nothing
   415 ;; This function is called by:
   416 ;;		_main
   417 ;;		_uart_write_str
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           
   422                           ;psect for function _uart_write
   423  0656                     _uart_write:	
   424                           
   425                           ;incstack = 0
   426                           ; Regs used in _uart_write: [wreg]
   427                           ;uart_write@data stored from wreg
   428  0656  00F0               	movwf	uart_write@data
   429  0657                     l54:	
   430                           ;./uart.h: 81: void uart_write(char data);./uart.h: 82: {;./uart.h: 83:   while(!TRMT);
   431                           
   432  0657  1683               	bsf	3,5	;RP0=1, select bank1
   433  0658  1303               	bcf	3,6	;RP1=0, select bank1
   434  0659  1C98               	btfss	24,1	;volatile
   435  065A  2E57               	goto	l54
   436                           
   437                           ;./uart.h: 84:   TXREG = data;
   438  065B  0870               	movf	uart_write@data,w
   439  065C  1283               	bcf	3,5	;RP0=0, select bank0
   440  065D  1303               	bcf	3,6	;RP1=0, select bank0
   441  065E  0099               	movwf	25	;volatile
   442  065F  0008               	return
   443  0660                     __end_of_uart_write:	
   444                           
   445                           	psect	text2
   446  0726                     __ptext2:	
   447 ;; *************** function _uart_begin *****************
   448 ;; Defined at:
   449 ;;		line 35 in file "./uart.h"
   450 ;; Parameters:    Size  Location     Type
   451 ;;  baudrate        4    6[BANK0 ] const long 
   452 ;; Auto vars:     Size  Location     Type
   453 ;;  x               2    9[COMMON] unsigned int 
   454 ;; Return value:  Size  Location     Type
   455 ;;                  1    wreg      unsigned char 
   456 ;; Registers used:
   457 ;;		wreg, status,2, status,0, pclath, cstack
   458 ;; Tracked objects:
   459 ;;		On entry : 0/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   463 ;;      Params:         0       4       0       0       0
   464 ;;      Locals:         2       0       0       0       0
   465 ;;      Temps:          0      12       0       0       0
   466 ;;      Totals:         2      16       0       0       0
   467 ;;Total ram usage:       18 bytes
   468 ;; Hardware stack levels used:    1
   469 ;; Hardware stack levels required when called:    1
   470 ;; This function calls:
   471 ;;		___aldiv
   472 ;; This function is called by:
   473 ;;		_main
   474 ;; This function uses a non-reentrant model
   475 ;;
   476                           
   477                           
   478                           ;psect for function _uart_begin
   479  0726                     _uart_begin:	
   480                           
   481                           ;./uart.h: 35: char uart_begin(const long int baudrate);./uart.h: 36: {;./uart.h: 37:  u
      +                          nsigned int x;;./uart.h: 38:  x = (8000000 - baudrate*64)/(baudrate*64);
   482                           
   483                           ;incstack = 0
   484                           ; Regs used in _uart_begin: [wreg+status,2+status,0+pclath+cstack]
   485  0726  1283               	bcf	3,5	;RP0=0, select bank0
   486  0727  1303               	bcf	3,6	;RP1=0, select bank0
   487  0728  0826               	movf	uart_begin@baudrate,w
   488  0729  00AA               	movwf	??_uart_begin
   489  072A  0827               	movf	uart_begin@baudrate+1,w
   490  072B  00AB               	movwf	??_uart_begin+1
   491  072C  0828               	movf	uart_begin@baudrate+2,w
   492  072D  00AC               	movwf	??_uart_begin+2
   493  072E  0829               	movf	uart_begin@baudrate+3,w
   494  072F  00AD               	movwf	??_uart_begin+3
   495  0730  3006               	movlw	6
   496  0731                     u335:	
   497  0731  1003               	clrc
   498  0732  0DAA               	rlf	??_uart_begin,f
   499  0733  0DAB               	rlf	??_uart_begin+1,f
   500  0734  0DAC               	rlf	??_uart_begin+2,f
   501  0735  0DAD               	rlf	??_uart_begin+3,f
   502  0736  3EFF               	addlw	-1
   503  0737  1D03               	skipz
   504  0738  2F31               	goto	u335
   505  0739  082D               	movf	??_uart_begin+3,w
   506  073A  00F3               	movwf	___aldiv@divisor+3
   507  073B  082C               	movf	??_uart_begin+2,w
   508  073C  00F2               	movwf	___aldiv@divisor+2
   509  073D  082B               	movf	??_uart_begin+1,w
   510  073E  00F1               	movwf	___aldiv@divisor+1
   511  073F  082A               	movf	??_uart_begin,w
   512  0740  00F0               	movwf	___aldiv@divisor
   513  0741  0826               	movf	uart_begin@baudrate,w
   514  0742  00AE               	movwf	??_uart_begin+4
   515  0743  0827               	movf	uart_begin@baudrate+1,w
   516  0744  00AF               	movwf	??_uart_begin+5
   517  0745  0828               	movf	uart_begin@baudrate+2,w
   518  0746  00B0               	movwf	??_uart_begin+6
   519  0747  0829               	movf	uart_begin@baudrate+3,w
   520  0748  00B1               	movwf	??_uart_begin+7
   521  0749  3006               	movlw	6
   522  074A                     u345:	
   523  074A  1003               	clrc
   524  074B  0DAE               	rlf	??_uart_begin+4,f
   525  074C  0DAF               	rlf	??_uart_begin+5,f
   526  074D  0DB0               	rlf	??_uart_begin+6,f
   527  074E  0DB1               	rlf	??_uart_begin+7,f
   528  074F  3EFF               	addlw	-1
   529  0750  1D03               	skipz
   530  0751  2F4A               	goto	u345
   531  0752  3000               	movlw	0
   532  0753  00B2               	movwf	??_uart_begin+8
   533  0754  3012               	movlw	18
   534  0755  00B3               	movwf	??_uart_begin+9
   535  0756  307A               	movlw	122
   536  0757  00B4               	movwf	??_uart_begin+10
   537  0758  3000               	movlw	0
   538  0759  00B5               	movwf	??_uart_begin+11
   539  075A  082E               	movf	??_uart_begin+4,w
   540  075B  02B2               	subwf	??_uart_begin+8,f
   541  075C  082F               	movf	??_uart_begin+5,w
   542  075D  1C03               	skipc
   543  075E  0F2F               	incfsz	??_uart_begin+5,w
   544  075F  2F61               	goto	u351
   545  0760  2F62               	goto	u352
   546  0761                     u351:	
   547  0761  02B3               	subwf	??_uart_begin+9,f
   548  0762                     u352:	
   549  0762  0830               	movf	??_uart_begin+6,w
   550  0763  1C03               	skipc
   551  0764  0F30               	incfsz	??_uart_begin+6,w
   552  0765  2F67               	goto	u353
   553  0766  2F68               	goto	u354
   554  0767                     u353:	
   555  0767  02B4               	subwf	??_uart_begin+10,f
   556  0768                     u354:	
   557  0768  0831               	movf	??_uart_begin+7,w
   558  0769  1C03               	skipc
   559  076A  0F31               	incfsz	??_uart_begin+7,w
   560  076B  2F6D               	goto	u355
   561  076C  2F6E               	goto	u356
   562  076D                     u355:	
   563  076D  02B5               	subwf	??_uart_begin+11,f
   564  076E                     u356:	
   565  076E  0835               	movf	??_uart_begin+11,w
   566  076F  00F7               	movwf	___aldiv@dividend+3
   567  0770  0834               	movf	??_uart_begin+10,w
   568  0771  00F6               	movwf	___aldiv@dividend+2
   569  0772  0833               	movf	??_uart_begin+9,w
   570  0773  00F5               	movwf	___aldiv@dividend+1
   571  0774  0832               	movf	??_uart_begin+8,w
   572  0775  00F4               	movwf	___aldiv@dividend
   573  0776  120A  118A  2697  120A  118A  	fcall	___aldiv
   574  077B  0871               	movf	?___aldiv+1,w
   575  077C  00FA               	movwf	uart_begin@x+1
   576  077D  0870               	movf	?___aldiv,w
   577  077E  00F9               	movwf	uart_begin@x
   578                           
   579                           ;./uart.h: 39:  if(x>255)
   580  077F  3001               	movlw	1
   581  0780  027A               	subwf	uart_begin@x+1,w
   582  0781  3000               	movlw	0
   583  0782  1903               	skipnz
   584  0783  0279               	subwf	uart_begin@x,w
   585  0784  1C03               	skipc
   586  0785  2FE2               	goto	l820
   587                           
   588                           ;./uart.h: 40:  {;./uart.h: 41:   x = (8000000 - baudrate*16)/(baudrate*16);
   589  0786  1283               	bcf	3,5	;RP0=0, select bank0
   590  0787  1303               	bcf	3,6	;RP1=0, select bank0
   591  0788  0826               	movf	uart_begin@baudrate,w
   592  0789  00AA               	movwf	??_uart_begin
   593  078A  0827               	movf	uart_begin@baudrate+1,w
   594  078B  00AB               	movwf	??_uart_begin+1
   595  078C  0828               	movf	uart_begin@baudrate+2,w
   596  078D  00AC               	movwf	??_uart_begin+2
   597  078E  0829               	movf	uart_begin@baudrate+3,w
   598  078F  00AD               	movwf	??_uart_begin+3
   599  0790  3004               	movlw	4
   600  0791                     u375:	
   601  0791  1003               	clrc
   602  0792  0DAA               	rlf	??_uart_begin,f
   603  0793  0DAB               	rlf	??_uart_begin+1,f
   604  0794  0DAC               	rlf	??_uart_begin+2,f
   605  0795  0DAD               	rlf	??_uart_begin+3,f
   606  0796  3EFF               	addlw	-1
   607  0797  1D03               	skipz
   608  0798  2F91               	goto	u375
   609  0799  082D               	movf	??_uart_begin+3,w
   610  079A  00F3               	movwf	___aldiv@divisor+3
   611  079B  082C               	movf	??_uart_begin+2,w
   612  079C  00F2               	movwf	___aldiv@divisor+2
   613  079D  082B               	movf	??_uart_begin+1,w
   614  079E  00F1               	movwf	___aldiv@divisor+1
   615  079F  082A               	movf	??_uart_begin,w
   616  07A0  00F0               	movwf	___aldiv@divisor
   617  07A1  0826               	movf	uart_begin@baudrate,w
   618  07A2  00AE               	movwf	??_uart_begin+4
   619  07A3  0827               	movf	uart_begin@baudrate+1,w
   620  07A4  00AF               	movwf	??_uart_begin+5
   621  07A5  0828               	movf	uart_begin@baudrate+2,w
   622  07A6  00B0               	movwf	??_uart_begin+6
   623  07A7  0829               	movf	uart_begin@baudrate+3,w
   624  07A8  00B1               	movwf	??_uart_begin+7
   625  07A9  3004               	movlw	4
   626  07AA                     u385:	
   627  07AA  1003               	clrc
   628  07AB  0DAE               	rlf	??_uart_begin+4,f
   629  07AC  0DAF               	rlf	??_uart_begin+5,f
   630  07AD  0DB0               	rlf	??_uart_begin+6,f
   631  07AE  0DB1               	rlf	??_uart_begin+7,f
   632  07AF  3EFF               	addlw	-1
   633  07B0  1D03               	skipz
   634  07B1  2FAA               	goto	u385
   635  07B2  3000               	movlw	0
   636  07B3  00B2               	movwf	??_uart_begin+8
   637  07B4  3012               	movlw	18
   638  07B5  00B3               	movwf	??_uart_begin+9
   639  07B6  307A               	movlw	122
   640  07B7  00B4               	movwf	??_uart_begin+10
   641  07B8  3000               	movlw	0
   642  07B9  00B5               	movwf	??_uart_begin+11
   643  07BA  082E               	movf	??_uart_begin+4,w
   644  07BB  02B2               	subwf	??_uart_begin+8,f
   645  07BC  082F               	movf	??_uart_begin+5,w
   646  07BD  1C03               	skipc
   647  07BE  0F2F               	incfsz	??_uart_begin+5,w
   648  07BF  2FC1               	goto	u391
   649  07C0  2FC2               	goto	u392
   650  07C1                     u391:	
   651  07C1  02B3               	subwf	??_uart_begin+9,f
   652  07C2                     u392:	
   653  07C2  0830               	movf	??_uart_begin+6,w
   654  07C3  1C03               	skipc
   655  07C4  0F30               	incfsz	??_uart_begin+6,w
   656  07C5  2FC7               	goto	u393
   657  07C6  2FC8               	goto	u394
   658  07C7                     u393:	
   659  07C7  02B4               	subwf	??_uart_begin+10,f
   660  07C8                     u394:	
   661  07C8  0831               	movf	??_uart_begin+7,w
   662  07C9  1C03               	skipc
   663  07CA  0F31               	incfsz	??_uart_begin+7,w
   664  07CB  2FCD               	goto	u395
   665  07CC  2FCE               	goto	u396
   666  07CD                     u395:	
   667  07CD  02B5               	subwf	??_uart_begin+11,f
   668  07CE                     u396:	
   669  07CE  0835               	movf	??_uart_begin+11,w
   670  07CF  00F7               	movwf	___aldiv@dividend+3
   671  07D0  0834               	movf	??_uart_begin+10,w
   672  07D1  00F6               	movwf	___aldiv@dividend+2
   673  07D2  0833               	movf	??_uart_begin+9,w
   674  07D3  00F5               	movwf	___aldiv@dividend+1
   675  07D4  0832               	movf	??_uart_begin+8,w
   676  07D5  00F4               	movwf	___aldiv@dividend
   677  07D6  120A  118A  2697  120A  118A  	fcall	___aldiv
   678  07DB  0871               	movf	?___aldiv+1,w
   679  07DC  00FA               	movwf	uart_begin@x+1
   680  07DD  0870               	movf	?___aldiv,w
   681  07DE  00F9               	movwf	uart_begin@x
   682                           
   683                           ;./uart.h: 42:   BRGH = 1;
   684  07DF  1683               	bsf	3,5	;RP0=1, select bank1
   685  07E0  1303               	bcf	3,6	;RP1=0, select bank1
   686  07E1  1518               	bsf	24,2	;volatile
   687  07E2                     l820:	
   688                           
   689                           ;./uart.h: 44:  if(x<256)
   690  07E2  3001               	movlw	1
   691  07E3  027A               	subwf	uart_begin@x+1,w
   692  07E4  3000               	movlw	0
   693  07E5  1903               	skipnz
   694  07E6  0279               	subwf	uart_begin@x,w
   695  07E7  1803               	skipnc
   696  07E8  0008               	return
   697                           
   698                           ;./uart.h: 45:  {;./uart.h: 46:    SPBRG = x;
   699  07E9  0879               	movf	uart_begin@x,w
   700  07EA  1683               	bsf	3,5	;RP0=1, select bank1
   701  07EB  1303               	bcf	3,6	;RP1=0, select bank1
   702  07EC  0099               	movwf	25	;volatile
   703                           
   704                           ;./uart.h: 47:    SYNC = 0;
   705  07ED  1218               	bcf	24,4	;volatile
   706                           
   707                           ;./uart.h: 48:    SPEN = 1;
   708  07EE  1283               	bcf	3,5	;RP0=0, select bank0
   709  07EF  1303               	bcf	3,6	;RP1=0, select bank0
   710  07F0  1798               	bsf	24,7	;volatile
   711                           
   712                           ;./uart.h: 49:           TRISC7 = 1;
   713  07F1  1683               	bsf	3,5	;RP0=1, select bank1
   714  07F2  1303               	bcf	3,6	;RP1=0, select bank1
   715  07F3  1787               	bsf	7,7	;volatile
   716                           
   717                           ;./uart.h: 50:           TRISC6 = 1;
   718  07F4  1707               	bsf	7,6	;volatile
   719                           
   720                           ;./uart.h: 51:           CREN = 1;
   721  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   722  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   723  07F7  1618               	bsf	24,4	;volatile
   724                           
   725                           ;./uart.h: 52:           TXEN = 1;
   726  07F8  1683               	bsf	3,5	;RP0=1, select bank1
   727  07F9  1303               	bcf	3,6	;RP1=0, select bank1
   728  07FA  1698               	bsf	24,5	;volatile
   729  07FB  0008               	return
   730  07FC                     __end_of_uart_begin:	
   731                           
   732                           	psect	text3
   733  0697                     __ptext3:	
   734 ;; *************** function ___aldiv *****************
   735 ;; Defined at:
   736 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;  divisor         4    0[COMMON] long 
   739 ;;  dividend        4    4[COMMON] long 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  quotient        4    2[BANK0 ] long 
   742 ;;  sign            1    1[BANK0 ] unsigned char 
   743 ;;  counter         1    0[BANK0 ] unsigned char 
   744 ;; Return value:  Size  Location     Type
   745 ;;                  4    0[COMMON] long 
   746 ;; Registers used:
   747 ;;		wreg, status,2, status,0
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   753 ;;      Params:         8       0       0       0       0
   754 ;;      Locals:         0       6       0       0       0
   755 ;;      Temps:          1       0       0       0       0
   756 ;;      Totals:         9       6       0       0       0
   757 ;;Total ram usage:       15 bytes
   758 ;; Hardware stack levels used:    1
   759 ;; This function calls:
   760 ;;		Nothing
   761 ;; This function is called by:
   762 ;;		_uart_begin
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           
   767                           ;psect for function ___aldiv
   768  0697                     ___aldiv:	
   769                           
   770                           ;incstack = 0
   771                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
   772  0697  1283               	bcf	3,5	;RP0=0, select bank0
   773  0698  1303               	bcf	3,6	;RP1=0, select bank0
   774  0699  01A1               	clrf	___aldiv@sign
   775  069A  1FF3               	btfss	___aldiv@divisor+3,7
   776  069B  2EA9               	goto	l225
   777  069C  09F0               	comf	___aldiv@divisor,f
   778  069D  09F1               	comf	___aldiv@divisor+1,f
   779  069E  09F2               	comf	___aldiv@divisor+2,f
   780  069F  09F3               	comf	___aldiv@divisor+3,f
   781  06A0  0AF0               	incf	___aldiv@divisor,f
   782  06A1  1903               	skipnz
   783  06A2  0AF1               	incf	___aldiv@divisor+1,f
   784  06A3  1903               	skipnz
   785  06A4  0AF2               	incf	___aldiv@divisor+2,f
   786  06A5  1903               	skipnz
   787  06A6  0AF3               	incf	___aldiv@divisor+3,f
   788  06A7  01A1               	clrf	___aldiv@sign
   789  06A8  0AA1               	incf	___aldiv@sign,f
   790  06A9                     l225:	
   791  06A9  1FF7               	btfss	___aldiv@dividend+3,7
   792  06AA  2EBA               	goto	l782
   793  06AB  09F4               	comf	___aldiv@dividend,f
   794  06AC  09F5               	comf	___aldiv@dividend+1,f
   795  06AD  09F6               	comf	___aldiv@dividend+2,f
   796  06AE  09F7               	comf	___aldiv@dividend+3,f
   797  06AF  0AF4               	incf	___aldiv@dividend,f
   798  06B0  1903               	skipnz
   799  06B1  0AF5               	incf	___aldiv@dividend+1,f
   800  06B2  1903               	skipnz
   801  06B3  0AF6               	incf	___aldiv@dividend+2,f
   802  06B4  1903               	skipnz
   803  06B5  0AF7               	incf	___aldiv@dividend+3,f
   804  06B6  3001               	movlw	1
   805  06B7  00F8               	movwf	??___aldiv
   806  06B8  0878               	movf	??___aldiv,w
   807  06B9  06A1               	xorwf	___aldiv@sign,f
   808  06BA                     l782:	
   809  06BA  3000               	movlw	0
   810  06BB  00A5               	movwf	___aldiv@quotient+3
   811  06BC  3000               	movlw	0
   812  06BD  00A4               	movwf	___aldiv@quotient+2
   813  06BE  3000               	movlw	0
   814  06BF  00A3               	movwf	___aldiv@quotient+1
   815  06C0  3000               	movlw	0
   816  06C1  00A2               	movwf	___aldiv@quotient
   817  06C2  0873               	movf	___aldiv@divisor+3,w
   818  06C3  0472               	iorwf	___aldiv@divisor+2,w
   819  06C4  0471               	iorwf	___aldiv@divisor+1,w
   820  06C5  0470               	iorwf	___aldiv@divisor,w
   821  06C6  1903               	skipnz
   822  06C7  2F0F               	goto	l804
   823  06C8  01A0               	clrf	___aldiv@counter
   824  06C9  0AA0               	incf	___aldiv@counter,f
   825  06CA                     l790:	
   826  06CA  1BF3               	btfsc	___aldiv@divisor+3,7
   827  06CB  2EDA               	goto	l792
   828  06CC  3001               	movlw	1
   829  06CD  00F8               	movwf	??___aldiv
   830  06CE                     u265:	
   831  06CE  1003               	clrc
   832  06CF  0DF0               	rlf	___aldiv@divisor,f
   833  06D0  0DF1               	rlf	___aldiv@divisor+1,f
   834  06D1  0DF2               	rlf	___aldiv@divisor+2,f
   835  06D2  0DF3               	rlf	___aldiv@divisor+3,f
   836  06D3  0BF8               	decfsz	??___aldiv,f
   837  06D4  2ECE               	goto	u265
   838  06D5  3001               	movlw	1
   839  06D6  00F8               	movwf	??___aldiv
   840  06D7  0878               	movf	??___aldiv,w
   841  06D8  07A0               	addwf	___aldiv@counter,f
   842  06D9  2ECA               	goto	l790
   843  06DA                     l792:	
   844  06DA  3001               	movlw	1
   845  06DB  00F8               	movwf	??___aldiv
   846  06DC                     u285:	
   847  06DC  1003               	clrc
   848  06DD  0DA2               	rlf	___aldiv@quotient,f
   849  06DE  0DA3               	rlf	___aldiv@quotient+1,f
   850  06DF  0DA4               	rlf	___aldiv@quotient+2,f
   851  06E0  0DA5               	rlf	___aldiv@quotient+3,f
   852  06E1  0BF8               	decfsz	??___aldiv,f
   853  06E2  2EDC               	goto	u285
   854  06E3  0873               	movf	___aldiv@divisor+3,w
   855  06E4  0277               	subwf	___aldiv@dividend+3,w
   856  06E5  1D03               	skipz
   857  06E6  2EF1               	goto	u295
   858  06E7  0872               	movf	___aldiv@divisor+2,w
   859  06E8  0276               	subwf	___aldiv@dividend+2,w
   860  06E9  1D03               	skipz
   861  06EA  2EF1               	goto	u295
   862  06EB  0871               	movf	___aldiv@divisor+1,w
   863  06EC  0275               	subwf	___aldiv@dividend+1,w
   864  06ED  1D03               	skipz
   865  06EE  2EF1               	goto	u295
   866  06EF  0870               	movf	___aldiv@divisor,w
   867  06F0  0274               	subwf	___aldiv@dividend,w
   868  06F1                     u295:	
   869  06F1  1C03               	skipc
   870  06F2  2F02               	goto	l800
   871  06F3  0870               	movf	___aldiv@divisor,w
   872  06F4  02F4               	subwf	___aldiv@dividend,f
   873  06F5  0871               	movf	___aldiv@divisor+1,w
   874  06F6  1C03               	skipc
   875  06F7  0F71               	incfsz	___aldiv@divisor+1,w
   876  06F8  02F5               	subwf	___aldiv@dividend+1,f
   877  06F9  0872               	movf	___aldiv@divisor+2,w
   878  06FA  1C03               	skipc
   879  06FB  0F72               	incfsz	___aldiv@divisor+2,w
   880  06FC  02F6               	subwf	___aldiv@dividend+2,f
   881  06FD  0873               	movf	___aldiv@divisor+3,w
   882  06FE  1C03               	skipc
   883  06FF  0F73               	incfsz	___aldiv@divisor+3,w
   884  0700  02F7               	subwf	___aldiv@dividend+3,f
   885  0701  1422               	bsf	___aldiv@quotient,0
   886  0702                     l800:	
   887  0702  3001               	movlw	1
   888  0703                     u305:	
   889  0703  1003               	clrc
   890  0704  0CF3               	rrf	___aldiv@divisor+3,f
   891  0705  0CF2               	rrf	___aldiv@divisor+2,f
   892  0706  0CF1               	rrf	___aldiv@divisor+1,f
   893  0707  0CF0               	rrf	___aldiv@divisor,f
   894  0708  3EFF               	addlw	-1
   895  0709  1D03               	skipz
   896  070A  2F03               	goto	u305
   897  070B  3001               	movlw	1
   898  070C  02A0               	subwf	___aldiv@counter,f
   899  070D  1D03               	btfss	3,2
   900  070E  2EDA               	goto	l792
   901  070F                     l804:	
   902  070F  0821               	movf	___aldiv@sign,w
   903  0710  1903               	btfsc	3,2
   904  0711  2F1D               	goto	l808
   905  0712  09A2               	comf	___aldiv@quotient,f
   906  0713  09A3               	comf	___aldiv@quotient+1,f
   907  0714  09A4               	comf	___aldiv@quotient+2,f
   908  0715  09A5               	comf	___aldiv@quotient+3,f
   909  0716  0AA2               	incf	___aldiv@quotient,f
   910  0717  1903               	skipnz
   911  0718  0AA3               	incf	___aldiv@quotient+1,f
   912  0719  1903               	skipnz
   913  071A  0AA4               	incf	___aldiv@quotient+2,f
   914  071B  1903               	skipnz
   915  071C  0AA5               	incf	___aldiv@quotient+3,f
   916  071D                     l808:	
   917  071D  0825               	movf	___aldiv@quotient+3,w
   918  071E  00F3               	movwf	?___aldiv+3
   919  071F  0824               	movf	___aldiv@quotient+2,w
   920  0720  00F2               	movwf	?___aldiv+2
   921  0721  0823               	movf	___aldiv@quotient+1,w
   922  0722  00F1               	movwf	?___aldiv+1
   923  0723  0822               	movf	___aldiv@quotient,w
   924  0724  00F0               	movwf	?___aldiv
   925  0725  0008               	return
   926  0726                     __end_of___aldiv:	
   927                           
   928                           	psect	text4
   929  0660                     __ptext4:	
   930 ;; *************** function _oscilator_begin *****************
   931 ;; Defined at:
   932 ;;		line 9 in file "./Oscilator.h"
   933 ;; Parameters:    Size  Location     Type
   934 ;;  freq            1    wreg     unsigned char 
   935 ;; Auto vars:     Size  Location     Type
   936 ;;  freq            1    1[COMMON] unsigned char 
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      void 
   939 ;; Registers used:
   940 ;;		wreg, status,2, status,0
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   946 ;;      Params:         0       0       0       0       0
   947 ;;      Locals:         1       0       0       0       0
   948 ;;      Temps:          1       0       0       0       0
   949 ;;      Totals:         2       0       0       0       0
   950 ;;Total ram usage:        2 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; This function calls:
   953 ;;		Nothing
   954 ;; This function is called by:
   955 ;;		_main
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959                           
   960                           ;psect for function _oscilator_begin
   961  0660                     _oscilator_begin:	
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _oscilator_begin: [wreg+status,2+status,0]
   965                           ;oscilator_begin@freq stored from wreg
   966  0660  00F1               	movwf	oscilator_begin@freq
   967                           
   968                           ;./Oscilator.h: 10:     OSCCONbits.IRCF = freq;
   969  0661  0871               	movf	oscilator_begin@freq,w
   970  0662  00F0               	movwf	??_oscilator_begin
   971  0663  0EF0               	swapf	??_oscilator_begin,f
   972  0664  1683               	bsf	3,5	;RP0=1, select bank1
   973  0665  1303               	bcf	3,6	;RP1=0, select bank1
   974  0666  080F               	movf	15,w	;volatile
   975  0667  0670               	xorwf	??_oscilator_begin,w
   976  0668  398F               	andlw	-113
   977  0669  0670               	xorwf	??_oscilator_begin,w
   978  066A  008F               	movwf	15	;volatile
   979                           
   980                           ;./Oscilator.h: 11:     OSCCONbits.SCS = 1;
   981  066B  140F               	bsf	15,0	;volatile
   982                           
   983                           ;./Oscilator.h: 12:     OSCCONbits.OSTS = 0;
   984  066C  118F               	bcf	15,3	;volatile
   985  066D  0008               	return
   986  066E                     __end_of_oscilator_begin:	
   987  007E                     btemp	set	126	;btemp
   988  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     22      22
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_uart_begin
    _uart_begin->___aldiv

Critical Paths under _main in BANK0

    _main->_uart_begin
    _uart_begin->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     866
                                             11 COMMON     3     3      0
                    _oscilator_begin
                         _uart_begin
                         _uart_write
 ---------------------------------------------------------------------------------
 (1) _uart_write                                           1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_begin                                          18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _oscilator_begin                                      2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _oscilator_begin
   _uart_begin
     ___aldiv
   _uart_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      16       5       27.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Mar 03 14:55:27 2019

             __CFG_CP$OFF 0000            uart_write@data 0070                        l54 0657  
                      l71 0683                       l225 06A9                       l800 0702  
                     l804 070F                       l820 07E2                       l808 071D  
                     l790 06CA                       l782 06BA                       l792 06DA  
                     u305 0703                       u351 0761                       u335 0731  
                     u352 0762                       u265 06CE                       u353 0767  
                     u345 074A                       u417 068F                       u354 0768  
            __CFG_CPD$OFF 0000                       u355 076D                       u356 076E  
                     u285 06DC                       u295 06F1                       u391 07C1  
                     u375 0791                       u392 07C2                       u393 07C7  
                     u385 07AA                       u394 07C8                       u395 07CD  
                     u396 07CE              __CFG_LVP$OFF 0000                      _BRGH 04C2  
                    _CREN 00C4                      _RCIF 0065                      _SPEN 00C7  
                    _TRMT 04C1                      _TXEN 04C5                      _SYNC 04C4  
            __CFG_WRT$OFF 0000                      _main 066E                      btemp 007E  
                    start 0000             __CFG_IESO$OFF 0000   __end_of_oscilator_begin 066E  
         __end_of___aldiv 0726                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   _RCREG 001A                     _SPBRG 0099                     _TXREG 0019  
          __CFG_FCMEN$OFF 0000            __CFG_BOREN$OFF 0000                     status 0003  
                   wtemp0 007E            __CFG_MCLRE$OFF 0000           __initialization 07FC  
            __end_of_main 0697                    ??_main 007B                    _TRISC6 043E  
                  _TRISC7 043F            __CFG_PWRTE$OFF 0000                 ??___aldiv 0078  
        ?_oscilator_begin 0070   __end_of__initialization 07FC        uart_begin@baudrate 0026  
          __pcstackCOMMON 0070                __pmaintext 066E                   ___aldiv 0697  
                 __ptext1 0656                   __ptext2 0726                   __ptext3 0697  
                 __ptext4 0660          ___aldiv@dividend 0074      end_of_initialization 07FC  
        ___aldiv@quotient 0022               uart_begin@x 0079                _uart_begin 0726  
              _uart_write 0656  __size_of_oscilator_begin 000E       start_initialization 07FC  
             ?_uart_begin 0026               ?_uart_write 0070                 ___latbits 0002  
           __pcstackBANK0 0020                  ?___aldiv 0070    __CFG_FOSC$EXTRC_CLKOUT 0000  
       ??_oscilator_begin 0070       __size_of_uart_begin 00D6           ___aldiv@divisor 0070  
         ___aldiv@counter 0020       __size_of_uart_write 000A       oscilator_begin@freq 0071  
        __size_of___aldiv 008F         __CFG_BOR4V$BOR40V 0000             __size_of_main 0029  
            ??_uart_begin 002A              ??_uart_write 0070        __end_of_uart_begin 07FC  
      __end_of_uart_write 0660                _OSCCONbits 008F           _oscilator_begin 0660  
            ___aldiv@sign 0021  
