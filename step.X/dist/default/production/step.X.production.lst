

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Feb 25 17:11:16 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 2.05
    31                           ; Generated 20/12/2018 GMT
    32                           ; 
    33                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F887 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  008F                     	;# 
   109  0090                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0093                     	;# 
   114  0093                     	;# 
   115  0094                     	;# 
   116  0095                     	;# 
   117  0096                     	;# 
   118  0097                     	;# 
   119  0098                     	;# 
   120  0099                     	;# 
   121  009A                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  0105                     	;# 
   128  0107                     	;# 
   129  0108                     	;# 
   130  0109                     	;# 
   131  010C                     	;# 
   132  010C                     	;# 
   133  010D                     	;# 
   134  010E                     	;# 
   135  010F                     	;# 
   136  0185                     	;# 
   137  0187                     	;# 
   138  0188                     	;# 
   139  0189                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  0000                     	;# 
   143  0001                     	;# 
   144  0002                     	;# 
   145  0003                     	;# 
   146  0004                     	;# 
   147  0005                     	;# 
   148  0006                     	;# 
   149  0007                     	;# 
   150  0008                     	;# 
   151  0009                     	;# 
   152  000A                     	;# 
   153  000B                     	;# 
   154  000C                     	;# 
   155  000D                     	;# 
   156  000E                     	;# 
   157  000E                     	;# 
   158  000F                     	;# 
   159  0010                     	;# 
   160  0011                     	;# 
   161  0012                     	;# 
   162  0013                     	;# 
   163  0014                     	;# 
   164  0015                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001D                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  0081                     	;# 
   178  0085                     	;# 
   179  0086                     	;# 
   180  0087                     	;# 
   181  0088                     	;# 
   182  0089                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  008F                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  0105                     	;# 
   206  0107                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0187                     	;# 
   216  0188                     	;# 
   217  0189                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  008F                     	;# 
   265  0090                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0094                     	;# 
   272  0095                     	;# 
   273  0096                     	;# 
   274  0097                     	;# 
   275  0098                     	;# 
   276  0099                     	;# 
   277  009A                     	;# 
   278  009B                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009E                     	;# 
   282  009F                     	;# 
   283  0105                     	;# 
   284  0107                     	;# 
   285  0108                     	;# 
   286  0109                     	;# 
   287  010C                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  010F                     	;# 
   292  0185                     	;# 
   293  0187                     	;# 
   294  0188                     	;# 
   295  0189                     	;# 
   296  018C                     	;# 
   297  018D                     	;# 
   298                           
   299                           	psect	strings
   300  0003                     __pstrings:	
   301  0003                     stringtab:	
   302  0003                     __stringtab:	
   303                           
   304                           ;	String table - string pointers are 1 byte each
   305  0003  1BFF               	btfsc	btemp+1,7
   306  0004  280D               	ljmp	stringcode
   307  0005  1383               	bcf	3,7
   308  0006  187F               	btfsc	btemp+1,0
   309  0007  1783               	bsf	3,7
   310  0008  0800               	movf	0,w
   311  0009  0A84               	incf	4,f
   312  000A  1903               	skipnz
   313  000B  0AFF               	incf	btemp+1,f
   314  000C  0008               	return
   315  000D                     stringcode:	
   316  000D                     stringdir:	
   317  000D  3000               	movlw	high stringdir
   318  000E  008A               	movwf	10
   319  000F  0804               	movf	4,w
   320  0010  0A84               	incf	4,f
   321  0011  0782               	addwf	2,f
   322  0012                     __stringbase:	
   323  0012  3400               	retlw	0
   324  0013                     __end_of__stringtab:	
   325  0013                     _dpowers:	
   326  0013  3401               	retlw	1
   327  0014  3400               	retlw	0
   328  0015  340A               	retlw	10
   329  0016  3400               	retlw	0
   330  0017  3464               	retlw	100
   331  0018  3400               	retlw	0
   332  0019  34E8               	retlw	232
   333  001A  3403               	retlw	3
   334  001B  3410               	retlw	16
   335  001C  3427               	retlw	39
   336  001D                     __end_of_dpowers:	
   337  0008                     _PORTD	set	8
   338  0005                     _PORTA	set	5
   339  0006                     _PORTB	set	6
   340  001E                     _ADRESH	set	30
   341  000C                     _PIR1bits	set	12
   342  000B                     _INTCONbits	set	11
   343  001F                     _ADCON0bits	set	31
   344  004A                     _RE2	set	74
   345  004B                     _RE3	set	75
   346  0029                     _RA1	set	41
   347  002A                     _RA2	set	42
   348  0088                     _TRISD	set	136
   349  0089                     _TRISE	set	137
   350  0086                     _TRISB	set	134
   351  008F                     _OSCCONbits	set	143
   352  008C                     _PIE1bits	set	140
   353  009F                     _ADCON1bits	set	159
   354  0086                     _TRISBbits	set	134
   355  0089                     _TRISEbits	set	137
   356  0085                     _TRISAbits	set	133
   357  042A                     _TRISA2	set	1066
   358  0429                     _TRISA1	set	1065
   359  0189                     _ANSELHbits	set	393
   360  0188                     _ANSELbits	set	392
   361  001D                     STR_3:	
   362  001D  344D               	retlw	77	;'M'
   363  001E  346F               	retlw	111	;'o'
   364  001F  3476               	retlw	118	;'v'
   365  0020  3469               	retlw	105	;'i'
   366  0021  3465               	retlw	101	;'e'
   367  0022  346E               	retlw	110	;'n'
   368  0023  3464               	retlw	100	;'d'
   369  0024  346F               	retlw	111	;'o'
   370  0025  343A               	retlw	58	;':'
   371  0026  3420               	retlw	32	;' '
   372  0027  3425               	retlw	37	;'%'
   373  0028  3464               	retlw	100	;'d'
   374  0029  3400               	retlw	0
   375  002A                     STR_2:	
   376  002A  3454               	retlw	84	;'T'
   377  002B  3468               	retlw	104	;'h'
   378  002C  3465               	retlw	101	;'e'
   379  002D  3474               	retlw	116	;'t'
   380  002E  3461               	retlw	97	;'a'
   381  002F  3420               	retlw	32	;' '
   382  0030  343D               	retlw	61	;'='
   383  0031  3420               	retlw	32	;' '
   384  0032  3425               	retlw	37	;'%'
   385  0033  3464               	retlw	100	;'d'
   386  0034  3400               	retlw	0
   387  0035                     STR_1:	
   388  0035  3468               	retlw	104	;'h'
   389  0036  346F               	retlw	111	;'o'
   390  0037  346C               	retlw	108	;'l'
   391  0038  3461               	retlw	97	;'a'
   392  0039  3461               	retlw	97	;'a'
   393  003A  3461               	retlw	97	;'a'
   394  003B  3400               	retlw	0
   395                           
   396                           ; #config settings
   397  0000                     
   398                           	psect	cinit
   399  07F5                     start_initialization:	
   400  07F5                     __initialization:	
   401                           
   402                           ; Clear objects allocated to BANK0
   403  07F5  1383               	bcf	3,7	;select IRP bank0
   404  07F6  3020               	movlw	low __pbssBANK0
   405  07F7  0084               	movwf	4
   406  07F8  3058               	movlw	low (__pbssBANK0+56)
   407  07F9  120A  118A  235D   	fcall	clear_ram0
   408  07FC                     end_of_initialization:	
   409                           ;End of C runtime variable initialization code
   410                           
   411  07FC                     __end_of__initialization:	
   412  07FC  0183               	clrf	3
   413  07FD  120A  118A  2F0E   	ljmp	_main	;jump to C main() function
   414                           
   415                           	psect	bssBANK0
   416  0020                     __pbssBANK0:	
   417  0020                     wave_rev@a:	
   418  0020                     	ds	2
   419  0022                     wave_rev@i:	
   420  0022                     	ds	2
   421  0024                     wave_step@a:	
   422  0024                     	ds	2
   423  0026                     wave_step@i:	
   424  0026                     	ds	2
   425  0028                     full_step@i:	
   426  0028                     	ds	2
   427  002A                     _delta:	
   428  002A                     	ds	2
   429  002C                     _step_last:	
   430  002C                     	ds	2
   431  002E                     _theta:	
   432  002E                     	ds	2
   433  0030                     _step:	
   434  0030                     	ds	2
   435  0032                     full_rev@i:	
   436  0032                     	ds	1
   437  0033                     _i:	
   438  0033                     	ds	1
   439  0034                     _adc_read:	
   440  0034                     	ds	1
   441  0035                     _test:	
   442  0035                     	ds	20
   443  0049                     _show:	
   444  0049                     	ds	15
   445                           
   446                           	psect	clrtext
   447  035D                     clear_ram0:	
   448                           ;	Called with FSR containing the base address, and
   449                           ;	W with the last address+1
   450                           
   451  035D  0064               	clrwdt	;clear the watchdog before getting into this loop
   452  035E                     clrloop0:	
   453  035E  0180               	clrf	0	;clear RAM location pointed to by FSR
   454  035F  0A84               	incf	4,f	;increment pointer
   455  0360  0604               	xorwf	4,w	;XOR with final address
   456  0361  1903               	btfsc	3,2	;have we reached the end yet?
   457  0362  3400               	retlw	0	;all done for this memory range, return
   458  0363  0604               	xorwf	4,w	;XOR again to restore value
   459  0364  2B5E               	goto	clrloop0	;do the next byte
   460                           
   461                           	psect	cstackCOMMON
   462  0070                     __pcstackCOMMON:	
   463  0070                     ?_wave_rev:	
   464  0070                     ?_wave_step:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0070                     ?_ADC_option:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ??_ADC_option:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ?_ADC_freq:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ??_ADC_freq:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_ADC_channel:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ??_ADC_channel:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_ADC_conversion:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ??_ADC_conversion:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_LCD8_write:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ??_LCD8_write:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_LCD8_cmd:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ??_LCD8_cmd:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ?_LCD8_clear:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0070                     ?_LCD8_begin:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0070                     ?_oscilator_begin:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0070                     ??_oscilator_begin:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0070                     ?_main:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0070                     ?___lwdiv:	
   519                           ; 1 bytes @ 0x0
   520                           
   521  0070                     wave_step@steps:	
   522                           ; 2 bytes @ 0x0
   523                           
   524  0070                     wave_rev@steps:	
   525                           ; 2 bytes @ 0x0
   526                           
   527  0070                     ___lwdiv@divisor:	
   528                           ; 2 bytes @ 0x0
   529                           
   530                           
   531                           ; 2 bytes @ 0x0
   532  0070                     	ds	1
   533  0071                     ADC_freq@freq:	
   534  0071                     ADC_channel@channel:	
   535                           ; 1 bytes @ 0x1
   536                           
   537  0071                     LCD8_write@data:	
   538                           ; 1 bytes @ 0x1
   539                           
   540  0071                     oscilator_begin@freq:	
   541                           ; 1 bytes @ 0x1
   542                           
   543                           
   544                           ; 1 bytes @ 0x1
   545  0071                     	ds	1
   546  0072                     ??_wave_rev:	
   547  0072                     ??_wave_step:	
   548                           ; 1 bytes @ 0x2
   549                           
   550  0072                     ?_LCD8_strWrite:	
   551                           ; 1 bytes @ 0x2
   552                           
   553  0072                     ADC_option@option:	
   554                           ; 1 bytes @ 0x2
   555                           
   556  0072                     LCD8_cmd@data:	
   557                           ; 1 bytes @ 0x2
   558                           
   559  0072                     LCD8_strWrite@data:	
   560                           ; 1 bytes @ 0x2
   561                           
   562  0072                     ___lwdiv@dividend:	
   563                           ; 2 bytes @ 0x2
   564                           
   565                           
   566                           ; 2 bytes @ 0x2
   567  0072                     	ds	1
   568  0073                     ?_ADC_begin:	
   569  0073                     ?_LCD8_set_cursor:	
   570                           ; 1 bytes @ 0x3
   571                           
   572  0073                     ??_LCD8_clear:	
   573                           ; 1 bytes @ 0x3
   574                           
   575  0073                     ??_LCD8_begin:	
   576                           ; 1 bytes @ 0x3
   577                           
   578  0073                     ADC_begin@freq:	
   579                           ; 1 bytes @ 0x3
   580                           
   581  0073                     LCD8_set_cursor@column:	
   582                           ; 1 bytes @ 0x3
   583                           
   584                           
   585                           ; 1 bytes @ 0x3
   586  0073                     	ds	1
   587  0074                     ??_ADC_begin:	
   588  0074                     ??_LCD8_set_cursor:	
   589                           ; 1 bytes @ 0x4
   590                           
   591  0074                     ??_LCD8_strWrite:	
   592                           ; 1 bytes @ 0x4
   593                           
   594  0074                     ??___lwdiv:	
   595                           ; 1 bytes @ 0x4
   596                           
   597  0074                     ADC_begin@option:	
   598                           ; 1 bytes @ 0x4
   599                           
   600                           
   601                           ; 1 bytes @ 0x4
   602  0074                     	ds	1
   603  0075                     LCD8_set_cursor@cursor:	
   604  0075                     LCD8_strWrite@i:	
   605                           ; 1 bytes @ 0x5
   606                           
   607  0075                     ___lwdiv@quotient:	
   608                           ; 1 bytes @ 0x5
   609                           
   610                           
   611                           ; 2 bytes @ 0x5
   612  0075                     	ds	1
   613  0076                     LCD8_set_cursor@row:	
   614                           
   615                           ; 1 bytes @ 0x6
   616  0076                     	ds	1
   617  0077                     ___lwdiv@counter:	
   618                           
   619                           ; 1 bytes @ 0x7
   620  0077                     	ds	1
   621  0078                     ?___lwmod:	
   622  0078                     ___lwmod@divisor:	
   623                           ; 2 bytes @ 0x8
   624                           
   625                           
   626                           ; 2 bytes @ 0x8
   627  0078                     	ds	2
   628  007A                     ___lwmod@dividend:	
   629                           
   630                           ; 2 bytes @ 0xA
   631  007A                     	ds	2
   632  007C                     ??___lwmod:	
   633                           
   634                           ; 1 bytes @ 0xC
   635  007C                     	ds	1
   636  007D                     ___lwmod@counter:	
   637                           
   638                           ; 1 bytes @ 0xD
   639  007D                     	ds	1
   640                           
   641                           	psect	cstackBANK0
   642  0058                     __pcstackBANK0:	
   643  0058                     ?_sprintf:	
   644  0058                     sprintf@f:	
   645                           ; 2 bytes @ 0x0
   646                           
   647                           
   648                           ; 1 bytes @ 0x0
   649  0058                     	ds	3
   650  005B                     ??_sprintf:	
   651                           
   652                           ; 1 bytes @ 0x3
   653  005B                     	ds	3
   654  005E                     sprintf@ap:	
   655                           
   656                           ; 1 bytes @ 0x6
   657  005E                     	ds	1
   658  005F                     sprintf@flag:	
   659                           
   660                           ; 1 bytes @ 0x7
   661  005F                     	ds	1
   662  0060                     sprintf@prec:	
   663                           
   664                           ; 1 bytes @ 0x8
   665  0060                     	ds	1
   666  0061                     sprintf@val:	
   667                           
   668                           ; 2 bytes @ 0x9
   669  0061                     	ds	2
   670  0063                     sprintf@sp:	
   671                           
   672                           ; 1 bytes @ 0xB
   673  0063                     	ds	1
   674  0064                     sprintf@c:	
   675                           
   676                           ; 1 bytes @ 0xC
   677  0064                     	ds	1
   678  0065                     ??_main:	
   679                           
   680                           ; 1 bytes @ 0xD
   681  0065                     	ds	3
   682                           
   683                           	psect	maintext
   684  070E                     __pmaintext:	
   685 ;;
   686 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   687 ;;
   688 ;; *************** function _main *****************
   689 ;; Defined at:
   690 ;;		line 40 in file "main_stepper.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;		None
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : B00/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   704 ;;      Params:         0       0       0       0       0
   705 ;;      Locals:         0       0       0       0       0
   706 ;;      Temps:          0       3       0       0       0
   707 ;;      Totals:         0       3       0       0       0
   708 ;;Total ram usage:        3 bytes
   709 ;; Hardware stack levels required when called:    2
   710 ;; This function calls:
   711 ;;		_ADC_begin
   712 ;;		_ADC_conversion
   713 ;;		_LCD8_begin
   714 ;;		_LCD8_clear
   715 ;;		_LCD8_set_cursor
   716 ;;		_LCD8_strWrite
   717 ;;		___lwdiv
   718 ;;		_oscilator_begin
   719 ;;		_sprintf
   720 ;;		_wave_rev
   721 ;;		_wave_step
   722 ;; This function is called by:
   723 ;;		Startup code after reset
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           
   728                           ;psect for function _main
   729  070E                     _main:	
   730                           
   731                           ;main_stepper.c: 42:     oscilator_begin(7);
   732                           
   733                           ;incstack = 0
   734                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   735  070E  3007               	movlw	7
   736  070F  120A  118A  238B  120A  118A  	fcall	_oscilator_begin
   737                           
   738                           ;main_stepper.c: 43:     ADC_begin(0, 2);
   739  0714  3002               	movlw	2
   740  0715  1283               	bcf	3,5	;RP0=0, select bank0
   741  0716  1303               	bcf	3,6	;RP1=0, select bank0
   742  0717  00E5               	movwf	??_main
   743  0718  0865               	movf	??_main,w
   744  0719  00F3               	movwf	ADC_begin@freq
   745  071A  3000               	movlw	0
   746  071B  120A  118A  23D4  120A  118A  	fcall	_ADC_begin
   747                           
   748                           ;main_stepper.c: 44:     TRISB = 0;
   749  0720  1683               	bsf	3,5	;RP0=1, select bank1
   750  0721  1303               	bcf	3,6	;RP1=0, select bank1
   751  0722  0186               	clrf	6	;volatile
   752                           
   753                           ;main_stepper.c: 45:     TRISE = 1;
   754  0723  3001               	movlw	1
   755  0724  0089               	movwf	9	;volatile
   756                           
   757                           ;main_stepper.c: 46:     ANSELbits.ANS1 = 0;
   758  0725  1683               	bsf	3,5	;RP0=1, select bank3
   759  0726  1703               	bsf	3,6	;RP1=1, select bank3
   760  0727  1088               	bcf	8,1	;volatile
   761                           
   762                           ;main_stepper.c: 47:     ANSELbits.ANS2 = 0;
   763  0728  1108               	bcf	8,2	;volatile
   764                           
   765                           ;main_stepper.c: 48:     TRISA1 = 0;
   766  0729  1683               	bsf	3,5	;RP0=1, select bank1
   767  072A  1303               	bcf	3,6	;RP1=0, select bank1
   768  072B  1085               	bcf	5,1	;volatile
   769                           
   770                           ;main_stepper.c: 49:     TRISA2 = 0;
   771  072C  1105               	bcf	5,2	;volatile
   772                           
   773                           ;main_stepper.c: 50:     PORTA = 0;
   774  072D  1283               	bcf	3,5	;RP0=0, select bank0
   775  072E  1303               	bcf	3,6	;RP1=0, select bank0
   776  072F  0185               	clrf	5	;volatile
   777                           
   778                           ;main_stepper.c: 51:     PORTB = 0;
   779  0730  0186               	clrf	6	;volatile
   780                           
   781                           ;main_stepper.c: 52:     TRISD = 0;
   782  0731  1683               	bsf	3,5	;RP0=1, select bank1
   783  0732  1303               	bcf	3,6	;RP1=0, select bank1
   784  0733  0188               	clrf	8	;volatile
   785                           
   786                           ;main_stepper.c: 53:     PORTD = 0;
   787  0734  1283               	bcf	3,5	;RP0=0, select bank0
   788  0735  1303               	bcf	3,6	;RP1=0, select bank0
   789  0736  0188               	clrf	8	;volatile
   790                           
   791                           ;main_stepper.c: 54:     LCD8_begin();
   792  0737  120A  118A  2484  120A  118A  	fcall	_LCD8_begin
   793                           
   794                           ;main_stepper.c: 55:     LCD8_clear();
   795  073C  120A  118A  2365  120A  118A  	fcall	_LCD8_clear
   796                           
   797                           ;main_stepper.c: 56:     LCD8_set_cursor(1, 1);
   798  0741  01F3               	clrf	LCD8_set_cursor@column
   799  0742  0AF3               	incf	LCD8_set_cursor@column,f
   800  0743  3001               	movlw	1
   801  0744  120A  118A  23BD  120A  118A  	fcall	_LCD8_set_cursor
   802                           
   803                           ;main_stepper.c: 57:     LCD8_strWrite("holaaa");
   804  0749  3023               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   805  074A  00F2               	movwf	LCD8_strWrite@data
   806  074B  3080               	movlw	128
   807  074C  00F3               	movwf	LCD8_strWrite@data+1
   808  074D  120A  118A  23EE  120A  118A  	fcall	_LCD8_strWrite
   809                           
   810                           ;main_stepper.c: 58:     _delay((unsigned long)((5000)*(8000000/4000.0)));
   811  0752  3033               	movlw	51
   812  0753  1283               	bcf	3,5	;RP0=0, select bank0
   813  0754  1303               	bcf	3,6	;RP1=0, select bank0
   814  0755  00E7               	movwf	??_main+2
   815  0756  30BB               	movlw	187
   816  0757  00E6               	movwf	??_main+1
   817  0758  30DF               	movlw	223
   818  0759  00E5               	movwf	??_main
   819  075A                     u977:	
   820  075A  0BE5               	decfsz	??_main,f
   821  075B  2F5A               	goto	u977
   822  075C  0BE6               	decfsz	??_main+1,f
   823  075D  2F5A               	goto	u977
   824  075E  0BE7               	decfsz	??_main+2,f
   825  075F  2F5A               	goto	u977
   826  0760                     l1579:	
   827                           
   828                           ;main_stepper.c: 60:         LCD8_clear();
   829  0760  120A  118A  2365  120A  118A  	fcall	_LCD8_clear
   830                           
   831                           ;main_stepper.c: 61:         adc_read = ADC_conversion();
   832  0765  120A  118A  2356  120A  118A  	fcall	_ADC_conversion
   833  076A  1283               	bcf	3,5	;RP0=0, select bank0
   834  076B  1303               	bcf	3,6	;RP1=0, select bank0
   835  076C  00E5               	movwf	??_main
   836  076D  0865               	movf	??_main,w
   837  076E  00B4               	movwf	_adc_read
   838                           
   839                           ;main_stepper.c: 62:         step = adc_read * 8U;
   840  076F  0834               	movf	_adc_read,w
   841  0770  00E5               	movwf	??_main
   842  0771  01E6               	clrf	??_main+1
   843  0772  1003               	clrc
   844  0773  0DE5               	rlf	??_main,f
   845  0774  0DE6               	rlf	??_main+1,f
   846  0775  1003               	clrc
   847  0776  0DE5               	rlf	??_main,f
   848  0777  0DE6               	rlf	??_main+1,f
   849  0778  1003               	clrc
   850  0779  0DE5               	rlf	??_main,f
   851  077A  0DE6               	rlf	??_main+1,f
   852  077B  0865               	movf	??_main,w
   853  077C  00B0               	movwf	_step
   854  077D  0866               	movf	??_main+1,w
   855  077E  00B1               	movwf	_step+1
   856                           
   857                           ;main_stepper.c: 63:         theta = step / 6;
   858  077F  3006               	movlw	6
   859  0780  00F0               	movwf	___lwdiv@divisor
   860  0781  3000               	movlw	0
   861  0782  00F1               	movwf	___lwdiv@divisor+1
   862  0783  0831               	movf	_step+1,w
   863  0784  00F3               	movwf	___lwdiv@dividend+1
   864  0785  0830               	movf	_step,w
   865  0786  00F2               	movwf	___lwdiv@dividend
   866  0787  120A  118A  2448  120A  118A  	fcall	___lwdiv
   867  078C  0871               	movf	?___lwdiv+1,w
   868  078D  1283               	bcf	3,5	;RP0=0, select bank0
   869  078E  1303               	bcf	3,6	;RP1=0, select bank0
   870  078F  00AF               	movwf	_theta+1
   871  0790  0870               	movf	?___lwdiv,w
   872  0791  00AE               	movwf	_theta
   873                           
   874                           ;main_stepper.c: 64:         sprintf(show, "Theta = %d", theta);
   875  0792  3018               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   876  0793  00E5               	movwf	??_main
   877  0794  0865               	movf	??_main,w
   878  0795  00D8               	movwf	sprintf@f
   879  0796  082F               	movf	_theta+1,w
   880  0797  00DA               	movwf	?_sprintf+2
   881  0798  082E               	movf	_theta,w
   882  0799  00D9               	movwf	?_sprintf+1
   883  079A  3049               	movlw	(low (_show| 0))& (0+255)
   884  079B  120A  118A  2636  120A  118A  	fcall	_sprintf
   885                           
   886                           ;main_stepper.c: 65:         sprintf(test, "Moviendo: %d", step);
   887  07A0  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   888  07A1  1283               	bcf	3,5	;RP0=0, select bank0
   889  07A2  1303               	bcf	3,6	;RP1=0, select bank0
   890  07A3  00E5               	movwf	??_main
   891  07A4  0865               	movf	??_main,w
   892  07A5  00D8               	movwf	sprintf@f
   893  07A6  0831               	movf	_step+1,w
   894  07A7  00DA               	movwf	?_sprintf+2
   895  07A8  0830               	movf	_step,w
   896  07A9  00D9               	movwf	?_sprintf+1
   897  07AA  3035               	movlw	(low (_test| 0))& (0+255)
   898  07AB  120A  118A  2636  120A  118A  	fcall	_sprintf
   899                           
   900                           ;main_stepper.c: 66:         LCD8_set_cursor(1, 1);
   901  07B0  01F3               	clrf	LCD8_set_cursor@column
   902  07B1  0AF3               	incf	LCD8_set_cursor@column,f
   903  07B2  3001               	movlw	1
   904  07B3  120A  118A  23BD  120A  118A  	fcall	_LCD8_set_cursor
   905                           
   906                           ;main_stepper.c: 67:         LCD8_strWrite(show);
   907  07B8  3049               	movlw	(low (_show| 0))& (0+255)
   908  07B9  00F2               	movwf	LCD8_strWrite@data
   909  07BA  3000               	movlw	0
   910  07BB  00F3               	movwf	LCD8_strWrite@data+1
   911  07BC  120A  118A  23EE  120A  118A  	fcall	_LCD8_strWrite
   912                           
   913                           ;main_stepper.c: 69:         LCD8_set_cursor(2, 1);
   914  07C1  01F3               	clrf	LCD8_set_cursor@column
   915  07C2  0AF3               	incf	LCD8_set_cursor@column,f
   916  07C3  3002               	movlw	2
   917  07C4  120A  118A  23BD  120A  118A  	fcall	_LCD8_set_cursor
   918                           
   919                           ;main_stepper.c: 70:         LCD8_strWrite(test);
   920  07C9  3035               	movlw	(low (_test| 0))& (0+255)
   921  07CA  00F2               	movwf	LCD8_strWrite@data
   922  07CB  3000               	movlw	0
   923  07CC  00F3               	movwf	LCD8_strWrite@data+1
   924  07CD  120A  118A  23EE  120A  118A  	fcall	_LCD8_strWrite
   925                           
   926                           ;main_stepper.c: 72:         if(RE3){
   927  07D2  1283               	bcf	3,5	;RP0=0, select bank0
   928  07D3  1303               	bcf	3,6	;RP1=0, select bank0
   929  07D4  1D89               	btfss	9,3	;volatile
   930  07D5  2FE4               	goto	l1607
   931  07D6                     l152:	
   932  07D6  1989               	btfsc	9,3	;volatile
   933  07D7  2FD6               	goto	l152
   934                           
   935                           ;main_stepper.c: 74:             wave_rev(step);
   936  07D8  0831               	movf	_step+1,w
   937  07D9  00F1               	movwf	wave_rev@steps+1
   938  07DA  0830               	movf	_step,w
   939  07DB  00F0               	movwf	wave_rev@steps
   940  07DC  120A  118A  24D8  120A  118A  	fcall	_wave_rev
   941                           
   942                           ;main_stepper.c: 75:             PORTD = 0;
   943  07E1  1283               	bcf	3,5	;RP0=0, select bank0
   944  07E2  1303               	bcf	3,6	;RP1=0, select bank0
   945  07E3  0188               	clrf	8	;volatile
   946  07E4                     l1607:	
   947                           
   948                           ;main_stepper.c: 77:         if(RE2){
   949  07E4  1D09               	btfss	9,2	;volatile
   950  07E5  2F60               	goto	l1579
   951  07E6                     l156:	
   952  07E6  1909               	btfsc	9,2	;volatile
   953  07E7  2FE6               	goto	l156
   954                           
   955                           ;main_stepper.c: 79:             wave_step(step);
   956  07E8  0831               	movf	_step+1,w
   957  07E9  00F1               	movwf	wave_step@steps+1
   958  07EA  0830               	movf	_step,w
   959  07EB  00F0               	movwf	wave_step@steps
   960  07EC  120A  118A  2537  120A  118A  	fcall	_wave_step
   961                           
   962                           ;main_stepper.c: 80:             PORTD = 0;
   963  07F1  1283               	bcf	3,5	;RP0=0, select bank0
   964  07F2  1303               	bcf	3,6	;RP1=0, select bank0
   965  07F3  0188               	clrf	8	;volatile
   966  07F4  2F60               	goto	l1579
   967  07F5                     __end_of_main:	
   968                           
   969                           	psect	text1
   970  0537                     __ptext1:	
   971 ;; *************** function _wave_step *****************
   972 ;; Defined at:
   973 ;;		line 35 in file "stepper.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  steps           2    0[COMMON] unsigned int 
   976 ;; Auto vars:     Size  Location     Type
   977 ;;		None
   978 ;; Return value:  Size  Location     Type
   979 ;;                  1    wreg      void 
   980 ;; Registers used:
   981 ;;		wreg, status,2, status,0
   982 ;; Tracked objects:
   983 ;;		On entry : 0/0
   984 ;;		On exit  : 0/0
   985 ;;		Unchanged: 0/0
   986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   987 ;;      Params:         2       0       0       0       0
   988 ;;      Locals:         0       0       0       0       0
   989 ;;      Temps:          2       0       0       0       0
   990 ;;      Totals:         4       0       0       0       0
   991 ;;Total ram usage:        4 bytes
   992 ;; Hardware stack levels used:    1
   993 ;; This function calls:
   994 ;;		Nothing
   995 ;; This function is called by:
   996 ;;		_main
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           
  1001                           ;psect for function _wave_step
  1002  0537                     _wave_step:	
  1003                           
  1004                           ;stepper.c: 35: wave_step(uint16_t steps);stepper.c: 36:     {;stepper.c: 37:     static
      +                           uint16_t i, a;;stepper.c: 38:     i = 0;
  1005                           
  1006                           ;incstack = 0
  1007                           ; Regs used in _wave_step: [wreg+status,2+status,0]
  1008  0537  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0538  1303               	bcf	3,6	;RP1=0, select bank0
  1010  0539  01A6               	clrf	wave_step@i
  1011  053A  01A7               	clrf	wave_step@i+1
  1012  053B                     l184:	
  1013                           ;stepper.c: 59:         }
  1014                           
  1015                           ;stepper.c: 39:     while(i<steps)
  1016                           
  1017                           
  1018                           ;stepper.c: 39:     while(i<steps)
  1019  053B  0871               	movf	wave_step@steps+1,w
  1020  053C  0227               	subwf	wave_step@i+1,w
  1021  053D  1D03               	skipz
  1022  053E  2D41               	goto	u825
  1023  053F  0870               	movf	wave_step@steps,w
  1024  0540  0226               	subwf	wave_step@i,w
  1025  0541                     u825:	
  1026  0541  1803               	btfsc	3,0
  1027  0542  0008               	return
  1028                           
  1029                           ;stepper.c: 40:     {;stepper.c: 41:         a = i%4;
  1030  0543  3003               	movlw	3
  1031  0544  0526               	andwf	wave_step@i,w
  1032  0545  00A4               	movwf	wave_step@a
  1033  0546  3000               	movlw	0
  1034  0547  0527               	andwf	wave_step@i+1,w
  1035  0548  00A5               	movwf	wave_step@a+1
  1036                           
  1037                           ;stepper.c: 42:         if (a == 1){
  1038  0549  0324               	decf	wave_step@a,w
  1039  054A  0425               	iorwf	wave_step@a+1,w
  1040  054B  1D03               	btfss	3,2
  1041  054C  2D58               	goto	l1509
  1042                           
  1043                           ;stepper.c: 43:             PORTD = 1;
  1044  054D  3001               	movlw	1
  1045  054E  0088               	movwf	8	;volatile
  1046                           
  1047                           ;stepper.c: 44:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1048  054F  300D               	movlw	13
  1049  0550  00F3               	movwf	??_wave_step+1
  1050  0551  30FB               	movlw	251
  1051  0552  00F2               	movwf	??_wave_step
  1052  0553                     u987:	
  1053  0553  0BF2               	decfsz	??_wave_step,f
  1054  0554  2D53               	goto	u987
  1055  0555  0BF3               	decfsz	??_wave_step+1,f
  1056  0556  2D53               	goto	u987
  1057  0557  2D58               	nop2
  1058  0558                     l1509:	
  1059                           
  1060                           ;stepper.c: 46:         if (a == 2){
  1061  0558  3002               	movlw	2
  1062  0559  1283               	bcf	3,5	;RP0=0, select bank0
  1063  055A  1303               	bcf	3,6	;RP1=0, select bank0
  1064  055B  0624               	xorwf	wave_step@a,w
  1065  055C  0425               	iorwf	wave_step@a+1,w
  1066  055D  1D03               	btfss	3,2
  1067  055E  2D6A               	goto	l1513
  1068                           
  1069                           ;stepper.c: 47:             PORTD = 2;
  1070  055F  3002               	movlw	2
  1071  0560  0088               	movwf	8	;volatile
  1072                           
  1073                           ;stepper.c: 48:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1074  0561  300D               	movlw	13
  1075  0562  00F3               	movwf	??_wave_step+1
  1076  0563  30FB               	movlw	251
  1077  0564  00F2               	movwf	??_wave_step
  1078  0565                     u997:	
  1079  0565  0BF2               	decfsz	??_wave_step,f
  1080  0566  2D65               	goto	u997
  1081  0567  0BF3               	decfsz	??_wave_step+1,f
  1082  0568  2D65               	goto	u997
  1083  0569  2D6A               	nop2
  1084  056A                     l1513:	
  1085                           
  1086                           ;stepper.c: 50:         if (a == 3){
  1087  056A  3003               	movlw	3
  1088  056B  1283               	bcf	3,5	;RP0=0, select bank0
  1089  056C  1303               	bcf	3,6	;RP1=0, select bank0
  1090  056D  0624               	xorwf	wave_step@a,w
  1091  056E  0425               	iorwf	wave_step@a+1,w
  1092  056F  1D03               	btfss	3,2
  1093  0570  2D7C               	goto	l1517
  1094                           
  1095                           ;stepper.c: 51:             PORTD = 4;
  1096  0571  3004               	movlw	4
  1097  0572  0088               	movwf	8	;volatile
  1098                           
  1099                           ;stepper.c: 52:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1100  0573  300D               	movlw	13
  1101  0574  00F3               	movwf	??_wave_step+1
  1102  0575  30FB               	movlw	251
  1103  0576  00F2               	movwf	??_wave_step
  1104  0577                     u1007:	
  1105  0577  0BF2               	decfsz	??_wave_step,f
  1106  0578  2D77               	goto	u1007
  1107  0579  0BF3               	decfsz	??_wave_step+1,f
  1108  057A  2D77               	goto	u1007
  1109  057B  2D7C               	nop2
  1110  057C                     l1517:	
  1111                           
  1112                           ;stepper.c: 54:         if (a == 0){
  1113  057C  1283               	bcf	3,5	;RP0=0, select bank0
  1114  057D  1303               	bcf	3,6	;RP1=0, select bank0
  1115  057E  0824               	movf	wave_step@a,w
  1116  057F  0425               	iorwf	wave_step@a+1,w
  1117  0580  1D03               	btfss	3,2
  1118  0581  2D8D               	goto	l189
  1119                           
  1120                           ;stepper.c: 55:             PORTD = 8;
  1121  0582  3008               	movlw	8
  1122  0583  0088               	movwf	8	;volatile
  1123                           
  1124                           ;stepper.c: 56:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1125  0584  300D               	movlw	13
  1126  0585  00F3               	movwf	??_wave_step+1
  1127  0586  30FB               	movlw	251
  1128  0587  00F2               	movwf	??_wave_step
  1129  0588                     u1017:	
  1130  0588  0BF2               	decfsz	??_wave_step,f
  1131  0589  2D88               	goto	u1017
  1132  058A  0BF3               	decfsz	??_wave_step+1,f
  1133  058B  2D88               	goto	u1017
  1134  058C  2D8D               	nop2
  1135  058D                     l189:	
  1136                           ;stepper.c: 57:         }
  1137                           
  1138                           
  1139                           ;stepper.c: 58:         i++;
  1140  058D  3001               	movlw	1
  1141  058E  1283               	bcf	3,5	;RP0=0, select bank0
  1142  058F  1303               	bcf	3,6	;RP1=0, select bank0
  1143  0590  07A6               	addwf	wave_step@i,f
  1144  0591  1803               	skipnc
  1145  0592  0AA7               	incf	wave_step@i+1,f
  1146  0593  3000               	movlw	0
  1147  0594  07A7               	addwf	wave_step@i+1,f
  1148  0595  2D3B               	goto	l184
  1149  0596                     __end_of_wave_step:	
  1150                           
  1151                           	psect	text2
  1152  04D8                     __ptext2:	
  1153 ;; *************** function _wave_rev *****************
  1154 ;; Defined at:
  1155 ;;		line 90 in file "stepper.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  steps           2    0[COMMON] unsigned int 
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2, status,0
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1169 ;;      Params:         2       0       0       0       0
  1170 ;;      Locals:         0       0       0       0       0
  1171 ;;      Temps:          2       0       0       0       0
  1172 ;;      Totals:         4       0       0       0       0
  1173 ;;Total ram usage:        4 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           
  1183                           ;psect for function _wave_rev
  1184  04D8                     _wave_rev:	
  1185                           
  1186                           ;stepper.c: 90: wave_rev(uint16_t steps);stepper.c: 91:     {;stepper.c: 92:     static 
      +                          uint16_t i, a;;stepper.c: 93:     i = 0;
  1187                           
  1188                           ;incstack = 0
  1189                           ; Regs used in _wave_rev: [wreg+status,2+status,0]
  1190  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  1191  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  1192  04DA  01A2               	clrf	wave_rev@i
  1193  04DB  01A3               	clrf	wave_rev@i+1
  1194  04DC                     l210:	
  1195                           ;stepper.c: 114:         }
  1196                           
  1197                           ;stepper.c: 94:     while(i<steps)
  1198                           
  1199                           
  1200                           ;stepper.c: 94:     while(i<steps)
  1201  04DC  0871               	movf	wave_rev@steps+1,w
  1202  04DD  0223               	subwf	wave_rev@i+1,w
  1203  04DE  1D03               	skipz
  1204  04DF  2CE2               	goto	u775
  1205  04E0  0870               	movf	wave_rev@steps,w
  1206  04E1  0222               	subwf	wave_rev@i,w
  1207  04E2                     u775:	
  1208  04E2  1803               	btfsc	3,0
  1209  04E3  0008               	return
  1210                           
  1211                           ;stepper.c: 95:     {;stepper.c: 96:         a = i%4;
  1212  04E4  3003               	movlw	3
  1213  04E5  0522               	andwf	wave_rev@i,w
  1214  04E6  00A0               	movwf	wave_rev@a
  1215  04E7  3000               	movlw	0
  1216  04E8  0523               	andwf	wave_rev@i+1,w
  1217  04E9  00A1               	movwf	wave_rev@a+1
  1218                           
  1219                           ;stepper.c: 97:         if (a == 1){
  1220  04EA  0320               	decf	wave_rev@a,w
  1221  04EB  0421               	iorwf	wave_rev@a+1,w
  1222  04EC  1D03               	btfss	3,2
  1223  04ED  2CF9               	goto	l1489
  1224                           
  1225                           ;stepper.c: 98:             PORTD = 8;
  1226  04EE  3008               	movlw	8
  1227  04EF  0088               	movwf	8	;volatile
  1228                           
  1229                           ;stepper.c: 99:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1230  04F0  300D               	movlw	13
  1231  04F1  00F3               	movwf	??_wave_rev+1
  1232  04F2  30FB               	movlw	251
  1233  04F3  00F2               	movwf	??_wave_rev
  1234  04F4                     u1027:	
  1235  04F4  0BF2               	decfsz	??_wave_rev,f
  1236  04F5  2CF4               	goto	u1027
  1237  04F6  0BF3               	decfsz	??_wave_rev+1,f
  1238  04F7  2CF4               	goto	u1027
  1239  04F8  2CF9               	nop2
  1240  04F9                     l1489:	
  1241                           
  1242                           ;stepper.c: 101:         if (a == 2){
  1243  04F9  3002               	movlw	2
  1244  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  1245  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  1246  04FC  0620               	xorwf	wave_rev@a,w
  1247  04FD  0421               	iorwf	wave_rev@a+1,w
  1248  04FE  1D03               	btfss	3,2
  1249  04FF  2D0B               	goto	l1493
  1250                           
  1251                           ;stepper.c: 102:             PORTD = 4;
  1252  0500  3004               	movlw	4
  1253  0501  0088               	movwf	8	;volatile
  1254                           
  1255                           ;stepper.c: 103:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1256  0502  300D               	movlw	13
  1257  0503  00F3               	movwf	??_wave_rev+1
  1258  0504  30FB               	movlw	251
  1259  0505  00F2               	movwf	??_wave_rev
  1260  0506                     u1037:	
  1261  0506  0BF2               	decfsz	??_wave_rev,f
  1262  0507  2D06               	goto	u1037
  1263  0508  0BF3               	decfsz	??_wave_rev+1,f
  1264  0509  2D06               	goto	u1037
  1265  050A  2D0B               	nop2
  1266  050B                     l1493:	
  1267                           
  1268                           ;stepper.c: 105:         if (a == 3){
  1269  050B  3003               	movlw	3
  1270  050C  1283               	bcf	3,5	;RP0=0, select bank0
  1271  050D  1303               	bcf	3,6	;RP1=0, select bank0
  1272  050E  0620               	xorwf	wave_rev@a,w
  1273  050F  0421               	iorwf	wave_rev@a+1,w
  1274  0510  1D03               	btfss	3,2
  1275  0511  2D1D               	goto	l1497
  1276                           
  1277                           ;stepper.c: 106:             PORTD = 2;
  1278  0512  3002               	movlw	2
  1279  0513  0088               	movwf	8	;volatile
  1280                           
  1281                           ;stepper.c: 107:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1282  0514  300D               	movlw	13
  1283  0515  00F3               	movwf	??_wave_rev+1
  1284  0516  30FB               	movlw	251
  1285  0517  00F2               	movwf	??_wave_rev
  1286  0518                     u1047:	
  1287  0518  0BF2               	decfsz	??_wave_rev,f
  1288  0519  2D18               	goto	u1047
  1289  051A  0BF3               	decfsz	??_wave_rev+1,f
  1290  051B  2D18               	goto	u1047
  1291  051C  2D1D               	nop2
  1292  051D                     l1497:	
  1293                           
  1294                           ;stepper.c: 109:         if (a == 0){
  1295  051D  1283               	bcf	3,5	;RP0=0, select bank0
  1296  051E  1303               	bcf	3,6	;RP1=0, select bank0
  1297  051F  0820               	movf	wave_rev@a,w
  1298  0520  0421               	iorwf	wave_rev@a+1,w
  1299  0521  1D03               	btfss	3,2
  1300  0522  2D2E               	goto	l215
  1301                           
  1302                           ;stepper.c: 110:             PORTD = 1;
  1303  0523  3001               	movlw	1
  1304  0524  0088               	movwf	8	;volatile
  1305                           
  1306                           ;stepper.c: 111:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1307  0525  300D               	movlw	13
  1308  0526  00F3               	movwf	??_wave_rev+1
  1309  0527  30FB               	movlw	251
  1310  0528  00F2               	movwf	??_wave_rev
  1311  0529                     u1057:	
  1312  0529  0BF2               	decfsz	??_wave_rev,f
  1313  052A  2D29               	goto	u1057
  1314  052B  0BF3               	decfsz	??_wave_rev+1,f
  1315  052C  2D29               	goto	u1057
  1316  052D  2D2E               	nop2
  1317  052E                     l215:	
  1318                           ;stepper.c: 112:         }
  1319                           
  1320                           
  1321                           ;stepper.c: 113:         i++;
  1322  052E  3001               	movlw	1
  1323  052F  1283               	bcf	3,5	;RP0=0, select bank0
  1324  0530  1303               	bcf	3,6	;RP1=0, select bank0
  1325  0531  07A2               	addwf	wave_rev@i,f
  1326  0532  1803               	skipnc
  1327  0533  0AA3               	incf	wave_rev@i+1,f
  1328  0534  3000               	movlw	0
  1329  0535  07A3               	addwf	wave_rev@i+1,f
  1330  0536  2CDC               	goto	l210
  1331  0537                     __end_of_wave_rev:	
  1332                           
  1333                           	psect	text3
  1334  0636                     __ptext3:	
  1335 ;; *************** function _sprintf *****************
  1336 ;; Defined at:
  1337 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  sp              1    wreg     PTR unsigned char 
  1340 ;;		 -> test(20), show(15), 
  1341 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1342 ;;		 -> STR_3(13), STR_2(11), 
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1345 ;;		 -> test(20), show(15), 
  1346 ;;  tmpval          4    0        struct .
  1347 ;;  val             2    9[BANK0 ] unsigned int 
  1348 ;;  cp              2    0        PTR const unsigned char 
  1349 ;;  len             2    0        unsigned int 
  1350 ;;  c               1   12[BANK0 ] unsigned char 
  1351 ;;  prec            1    8[BANK0 ] char 
  1352 ;;  flag            1    7[BANK0 ] unsigned char 
  1353 ;;  ap              1    6[BANK0 ] PTR void [1]
  1354 ;;		 -> ?_sprintf(2), 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  2    0[BANK0 ] int 
  1357 ;; Registers used:
  1358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1364 ;;      Params:         0       3       0       0       0
  1365 ;;      Locals:         0       7       0       0       0
  1366 ;;      Temps:          0       3       0       0       0
  1367 ;;      Totals:         0      13       0       0       0
  1368 ;;Total ram usage:       13 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    1
  1371 ;; This function calls:
  1372 ;;		___lwdiv
  1373 ;;		___lwmod
  1374 ;; This function is called by:
  1375 ;;		_main
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           
  1380                           ;psect for function _sprintf
  1381  0636                     _sprintf:	
  1382                           
  1383                           ;incstack = 0
  1384                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1385                           ;sprintf@sp stored from wreg
  1386  0636  1283               	bcf	3,5	;RP0=0, select bank0
  1387  0637  1303               	bcf	3,6	;RP1=0, select bank0
  1388  0638  00E3               	movwf	sprintf@sp
  1389                           
  1390                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  1391  0639  3059               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1392  063A  00DB               	movwf	??_sprintf
  1393  063B  085B               	movf	??_sprintf,w
  1394  063C  00DE               	movwf	sprintf@ap
  1395  063D                     l1471:	
  1396                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  1397                           
  1398                           
  1399                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  1400  063D  3001               	movlw	1
  1401  063E  07D8               	addwf	sprintf@f,f
  1402  063F  30FF               	movlw	-1
  1403  0640  0758               	addwf	sprintf@f,w
  1404  0641  0084               	movwf	4
  1405  0642  120A  118A  200D  120A  118A  	fcall	stringdir
  1406  0647  00DB               	movwf	??_sprintf
  1407  0648  085B               	movf	??_sprintf,w
  1408  0649  00E4               	movwf	sprintf@c
  1409  064A  0864               	movf	sprintf@c,w
  1410  064B  1903               	btfsc	3,2
  1411  064C  2F09               	goto	l1473
  1412                           
  1413                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  1414  064D  3025               	movlw	37
  1415  064E  0664               	xorwf	sprintf@c,w
  1416  064F  1903               	btfsc	3,2
  1417  0650  2E5D               	goto	l1427
  1418                           
  1419                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  1420  0651  0864               	movf	sprintf@c,w
  1421  0652  00DB               	movwf	??_sprintf
  1422  0653  0863               	movf	sprintf@sp,w
  1423  0654  0084               	movwf	4
  1424  0655  085B               	movf	??_sprintf,w
  1425  0656  1383               	bcf	3,7	;select IRP bank0
  1426  0657  0080               	movwf	0
  1427  0658  3001               	movlw	1
  1428  0659  00DB               	movwf	??_sprintf
  1429  065A  085B               	movf	??_sprintf,w
  1430  065B  07E3               	addwf	sprintf@sp,f
  1431                           
  1432                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  1433  065C  2E3D               	goto	l1471
  1434  065D                     l1427:	
  1435                           
  1436                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  1437  065D  01DF               	clrf	sprintf@flag
  1438                           
  1439                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  1440  065E  3001               	movlw	1
  1441  065F  07D8               	addwf	sprintf@f,f
  1442  0660  30FF               	movlw	-1
  1443  0661  0758               	addwf	sprintf@f,w
  1444  0662  0084               	movwf	4
  1445  0663  120A  118A  200D  120A  118A  	fcall	stringdir
  1446  0668  00E4               	movwf	sprintf@c
  1447  0669  00DB               	movwf	??_sprintf
  1448  066A  01DC               	clrf	??_sprintf+1
  1449                           
  1450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1451                           ; Switch size 1, requested type "simple"
  1452                           ; Number of cases is 1, Range of values is 0 to 0
  1453                           ; switch strategies available:
  1454                           ; Name         Instructions Cycles
  1455                           ; simple_byte            4     3 (average)
  1456                           ; direct_byte           11     8 (fixed)
  1457                           ; jumptable            260     6 (fixed)
  1458                           ;	Chosen strategy is simple_byte
  1459  066B  085C               	movf	??_sprintf+1,w
  1460  066C  3A00               	xorlw	0	; case 0
  1461  066D  1903               	skipnz
  1462  066E  2E70               	goto	l1695
  1463  066F  2E3D               	goto	l1471
  1464  0670                     l1695:	
  1465                           
  1466                           ; Switch size 1, requested type "simple"
  1467                           ; Number of cases is 3, Range of values is 0 to 105
  1468                           ; switch strategies available:
  1469                           ; Name         Instructions Cycles
  1470                           ; simple_byte           10     6 (average)
  1471                           ; jumptable            260     6 (fixed)
  1472                           ;	Chosen strategy is simple_byte
  1473  0670  085B               	movf	??_sprintf,w
  1474  0671  3A00               	xorlw	0	; case 0
  1475  0672  1903               	skipnz
  1476  0673  2F09               	goto	l1473
  1477  0674  3A64               	xorlw	100	; case 100
  1478  0675  1903               	skipnz
  1479  0676  2E7B               	goto	l1433
  1480  0677  3A0D               	xorlw	13	; case 105
  1481  0678  1903               	skipnz
  1482  0679  2E7B               	goto	l1433
  1483  067A  2E3D               	goto	l1471
  1484  067B                     l1433:	
  1485                           
  1486                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1487  067B  085E               	movf	sprintf@ap,w
  1488  067C  0084               	movwf	4
  1489  067D  1383               	bcf	3,7	;select IRP bank0
  1490  067E  0800               	movf	0,w
  1491  067F  00E1               	movwf	sprintf@val
  1492  0680  0A84               	incf	4,f
  1493  0681  0800               	movf	0,w
  1494  0682  00E2               	movwf	sprintf@val+1
  1495  0683  3002               	movlw	2
  1496  0684  00DB               	movwf	??_sprintf
  1497  0685  085B               	movf	??_sprintf,w
  1498  0686  07DE               	addwf	sprintf@ap,f
  1499                           
  1500                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  1501  0687  1FE2               	btfss	sprintf@val+1,7
  1502  0688  2E92               	goto	l1443
  1503                           
  1504                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  1505  0689  3003               	movlw	3
  1506  068A  00DB               	movwf	??_sprintf
  1507  068B  085B               	movf	??_sprintf,w
  1508  068C  04DF               	iorwf	sprintf@flag,f
  1509                           
  1510                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  1511  068D  09E1               	comf	sprintf@val,f
  1512  068E  09E2               	comf	sprintf@val+1,f
  1513  068F  0AE1               	incf	sprintf@val,f
  1514  0690  1903               	skipnz
  1515  0691  0AE2               	incf	sprintf@val+1,f
  1516  0692                     l1443:	
  1517                           
  1518                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1519  0692  01E4               	clrf	sprintf@c
  1520  0693  0AE4               	incf	sprintf@c,f
  1521  0694                     l1449:	
  1522                           
  1523                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  1524  0694  0864               	movf	sprintf@c,w
  1525  0695  00DB               	movwf	??_sprintf
  1526  0696  075B               	addwf	??_sprintf,w
  1527  0697  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1528  0698  0084               	movwf	4
  1529  0699  120A  118A  200D  120A  118A  	fcall	stringdir
  1530  069E  00DC               	movwf	??_sprintf+1
  1531  069F  120A  118A  200D  120A  118A  	fcall	stringdir
  1532  06A4  00DD               	movwf	??_sprintf+2
  1533  06A5  085D               	movf	??_sprintf+2,w
  1534  06A6  0262               	subwf	sprintf@val+1,w
  1535  06A7  1D03               	skipz
  1536  06A8  2EAB               	goto	u685
  1537  06A9  085C               	movf	??_sprintf+1,w
  1538  06AA  0261               	subwf	sprintf@val,w
  1539  06AB                     u685:	
  1540  06AB  1C03               	btfss	3,0
  1541  06AC  2EB5               	goto	l1455
  1542  06AD  3001               	movlw	1
  1543  06AE  00DB               	movwf	??_sprintf
  1544  06AF  085B               	movf	??_sprintf,w
  1545  06B0  07E4               	addwf	sprintf@c,f
  1546  06B1  3005               	movlw	5
  1547  06B2  0664               	xorwf	sprintf@c,w
  1548  06B3  1D03               	btfss	3,2
  1549  06B4  2E94               	goto	l1449
  1550  06B5                     l1455:	
  1551                           
  1552                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  1553  06B5  085F               	movf	sprintf@flag,w
  1554  06B6  3903               	andlw	3
  1555  06B7  1903               	btfsc	3,2
  1556  06B8  2EC4               	goto	l1461
  1557                           
  1558                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  1559  06B9  302D               	movlw	45
  1560  06BA  00DB               	movwf	??_sprintf
  1561  06BB  0863               	movf	sprintf@sp,w
  1562  06BC  0084               	movwf	4
  1563  06BD  085B               	movf	??_sprintf,w
  1564  06BE  1383               	bcf	3,7	;select IRP bank0
  1565  06BF  0080               	movwf	0
  1566  06C0  3001               	movlw	1
  1567  06C1  00DB               	movwf	??_sprintf
  1568  06C2  085B               	movf	??_sprintf,w
  1569  06C3  07E3               	addwf	sprintf@sp,f
  1570  06C4                     l1461:	
  1571                           
  1572                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  1573  06C4  0864               	movf	sprintf@c,w
  1574  06C5  00DB               	movwf	??_sprintf
  1575  06C6  085B               	movf	??_sprintf,w
  1576  06C7  00E0               	movwf	sprintf@prec
  1577  06C8                     l1469:	
  1578                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  1579                           
  1580                           
  1581                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  1582  06C8  30FF               	movlw	255
  1583  06C9  00DB               	movwf	??_sprintf
  1584  06CA  085B               	movf	??_sprintf,w
  1585  06CB  07E0               	addwf	sprintf@prec,f
  1586  06CC  0A60               	incf	sprintf@prec,w
  1587  06CD  1903               	btfsc	3,2
  1588  06CE  2E3D               	goto	l1471
  1589                           
  1590                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  1591  06CF  300A               	movlw	10
  1592  06D0  00F8               	movwf	___lwmod@divisor
  1593  06D1  3000               	movlw	0
  1594  06D2  00F9               	movwf	___lwmod@divisor+1
  1595  06D3  0860               	movf	sprintf@prec,w
  1596  06D4  00DB               	movwf	??_sprintf
  1597  06D5  075B               	addwf	??_sprintf,w
  1598  06D6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1599  06D7  0084               	movwf	4
  1600  06D8  120A  118A  200D  120A  118A  	fcall	stringdir
  1601  06DD  00F0               	movwf	___lwdiv@divisor
  1602  06DE  120A  118A  200D  120A  118A  	fcall	stringdir
  1603  06E3  00F1               	movwf	___lwdiv@divisor+1
  1604  06E4  0862               	movf	sprintf@val+1,w
  1605  06E5  00F3               	movwf	___lwdiv@dividend+1
  1606  06E6  0861               	movf	sprintf@val,w
  1607  06E7  00F2               	movwf	___lwdiv@dividend
  1608  06E8  120A  118A  2448  120A  118A  	fcall	___lwdiv
  1609  06ED  0871               	movf	?___lwdiv+1,w
  1610  06EE  00FB               	movwf	___lwmod@dividend+1
  1611  06EF  0870               	movf	?___lwdiv,w
  1612  06F0  00FA               	movwf	___lwmod@dividend
  1613  06F1  120A  118A  2416  120A  118A  	fcall	___lwmod
  1614  06F6  0878               	movf	?___lwmod,w
  1615  06F7  3E30               	addlw	48
  1616  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  1617  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  1618  06FA  00DC               	movwf	??_sprintf+1
  1619  06FB  085C               	movf	??_sprintf+1,w
  1620  06FC  00E4               	movwf	sprintf@c
  1621                           
  1622                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  1623  06FD  0864               	movf	sprintf@c,w
  1624  06FE  00DB               	movwf	??_sprintf
  1625  06FF  0863               	movf	sprintf@sp,w
  1626  0700  0084               	movwf	4
  1627  0701  085B               	movf	??_sprintf,w
  1628  0702  1383               	bcf	3,7	;select IRP bank0
  1629  0703  0080               	movwf	0
  1630  0704  3001               	movlw	1
  1631  0705  00DB               	movwf	??_sprintf
  1632  0706  085B               	movf	??_sprintf,w
  1633  0707  07E3               	addwf	sprintf@sp,f
  1634  0708  2EC8               	goto	l1469
  1635  0709                     l1473:	
  1636                           
  1637                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  1638  0709  0863               	movf	sprintf@sp,w
  1639  070A  0084               	movwf	4
  1640  070B  1383               	bcf	3,7	;select IRP bank0
  1641  070C  0180               	clrf	0
  1642  070D  0008               	return
  1643  070E                     __end_of_sprintf:	
  1644                           
  1645                           	psect	text4
  1646  0416                     __ptext4:	
  1647 ;; *************** function ___lwmod *****************
  1648 ;; Defined at:
  1649 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  divisor         2    8[COMMON] unsigned int 
  1652 ;;  dividend        2   10[COMMON] unsigned int 
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  counter         1   13[COMMON] unsigned char 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  2    8[COMMON] unsigned int 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1664 ;;      Params:         4       0       0       0       0
  1665 ;;      Locals:         1       0       0       0       0
  1666 ;;      Temps:          1       0       0       0       0
  1667 ;;      Totals:         6       0       0       0       0
  1668 ;;Total ram usage:        6 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; This function calls:
  1671 ;;		Nothing
  1672 ;; This function is called by:
  1673 ;;		_sprintf
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           
  1678                           ;psect for function ___lwmod
  1679  0416                     ___lwmod:	
  1680                           
  1681                           ;incstack = 0
  1682                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1683  0416  0878               	movf	___lwmod@divisor,w
  1684  0417  0479               	iorwf	___lwmod@divisor+1,w
  1685  0418  1903               	btfsc	3,2
  1686  0419  2C43               	goto	l1343
  1687  041A  01FD               	clrf	___lwmod@counter
  1688  041B  0AFD               	incf	___lwmod@counter,f
  1689  041C                     l1333:	
  1690  041C  1BF9               	btfsc	___lwmod@divisor+1,7
  1691  041D  2C2A               	goto	l1335
  1692  041E  3001               	movlw	1
  1693  041F                     u575:	
  1694  041F  1003               	clrc
  1695  0420  0DF8               	rlf	___lwmod@divisor,f
  1696  0421  0DF9               	rlf	___lwmod@divisor+1,f
  1697  0422  3EFF               	addlw	-1
  1698  0423  1D03               	skipz
  1699  0424  2C1F               	goto	u575
  1700  0425  3001               	movlw	1
  1701  0426  00FC               	movwf	??___lwmod
  1702  0427  087C               	movf	??___lwmod,w
  1703  0428  07FD               	addwf	___lwmod@counter,f
  1704  0429  2C1C               	goto	l1333
  1705  042A                     l1335:	
  1706  042A  0879               	movf	___lwmod@divisor+1,w
  1707  042B  027B               	subwf	___lwmod@dividend+1,w
  1708  042C  1D03               	skipz
  1709  042D  2C30               	goto	u595
  1710  042E  0878               	movf	___lwmod@divisor,w
  1711  042F  027A               	subwf	___lwmod@dividend,w
  1712  0430                     u595:	
  1713  0430  1C03               	skipc
  1714  0431  2C38               	goto	l1339
  1715  0432  0878               	movf	___lwmod@divisor,w
  1716  0433  02FA               	subwf	___lwmod@dividend,f
  1717  0434  0879               	movf	___lwmod@divisor+1,w
  1718  0435  1C03               	skipc
  1719  0436  03FB               	decf	___lwmod@dividend+1,f
  1720  0437  02FB               	subwf	___lwmod@dividend+1,f
  1721  0438                     l1339:	
  1722  0438  3001               	movlw	1
  1723  0439                     u605:	
  1724  0439  1003               	clrc
  1725  043A  0CF9               	rrf	___lwmod@divisor+1,f
  1726  043B  0CF8               	rrf	___lwmod@divisor,f
  1727  043C  3EFF               	addlw	-1
  1728  043D  1D03               	skipz
  1729  043E  2C39               	goto	u605
  1730  043F  3001               	movlw	1
  1731  0440  02FD               	subwf	___lwmod@counter,f
  1732  0441  1D03               	btfss	3,2
  1733  0442  2C2A               	goto	l1335
  1734  0443                     l1343:	
  1735  0443  087B               	movf	___lwmod@dividend+1,w
  1736  0444  00F9               	movwf	?___lwmod+1
  1737  0445  087A               	movf	___lwmod@dividend,w
  1738  0446  00F8               	movwf	?___lwmod
  1739  0447  0008               	return
  1740  0448                     __end_of___lwmod:	
  1741                           
  1742                           	psect	text5
  1743  0448                     __ptext5:	
  1744 ;; *************** function ___lwdiv *****************
  1745 ;; Defined at:
  1746 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  divisor         2    0[COMMON] unsigned int 
  1749 ;;  dividend        2    2[COMMON] unsigned int 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  quotient        2    5[COMMON] unsigned int 
  1752 ;;  counter         1    7[COMMON] unsigned char 
  1753 ;; Return value:  Size  Location     Type
  1754 ;;                  2    0[COMMON] unsigned int 
  1755 ;; Registers used:
  1756 ;;		wreg, status,2, status,0
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1762 ;;      Params:         4       0       0       0       0
  1763 ;;      Locals:         3       0       0       0       0
  1764 ;;      Temps:          1       0       0       0       0
  1765 ;;      Totals:         8       0       0       0       0
  1766 ;;Total ram usage:        8 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;;		_sprintf
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           
  1777                           ;psect for function ___lwdiv
  1778  0448                     ___lwdiv:	
  1779                           
  1780                           ;incstack = 0
  1781                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1782  0448  01F5               	clrf	___lwdiv@quotient
  1783  0449  01F6               	clrf	___lwdiv@quotient+1
  1784  044A  0870               	movf	___lwdiv@divisor,w
  1785  044B  0471               	iorwf	___lwdiv@divisor+1,w
  1786  044C  1903               	btfsc	3,2
  1787  044D  2C7F               	goto	l1321
  1788  044E  01F7               	clrf	___lwdiv@counter
  1789  044F  0AF7               	incf	___lwdiv@counter,f
  1790  0450                     l1309:	
  1791  0450  1BF1               	btfsc	___lwdiv@divisor+1,7
  1792  0451  2C5E               	goto	l1311
  1793  0452  3001               	movlw	1
  1794  0453                     u505:	
  1795  0453  1003               	clrc
  1796  0454  0DF0               	rlf	___lwdiv@divisor,f
  1797  0455  0DF1               	rlf	___lwdiv@divisor+1,f
  1798  0456  3EFF               	addlw	-1
  1799  0457  1D03               	skipz
  1800  0458  2C53               	goto	u505
  1801  0459  3001               	movlw	1
  1802  045A  00F4               	movwf	??___lwdiv
  1803  045B  0874               	movf	??___lwdiv,w
  1804  045C  07F7               	addwf	___lwdiv@counter,f
  1805  045D  2C50               	goto	l1309
  1806  045E                     l1311:	
  1807  045E  3001               	movlw	1
  1808  045F                     u525:	
  1809  045F  1003               	clrc
  1810  0460  0DF5               	rlf	___lwdiv@quotient,f
  1811  0461  0DF6               	rlf	___lwdiv@quotient+1,f
  1812  0462  3EFF               	addlw	-1
  1813  0463  1D03               	skipz
  1814  0464  2C5F               	goto	u525
  1815  0465  0871               	movf	___lwdiv@divisor+1,w
  1816  0466  0273               	subwf	___lwdiv@dividend+1,w
  1817  0467  1D03               	skipz
  1818  0468  2C6B               	goto	u535
  1819  0469  0870               	movf	___lwdiv@divisor,w
  1820  046A  0272               	subwf	___lwdiv@dividend,w
  1821  046B                     u535:	
  1822  046B  1C03               	skipc
  1823  046C  2C74               	goto	l1317
  1824  046D  0870               	movf	___lwdiv@divisor,w
  1825  046E  02F2               	subwf	___lwdiv@dividend,f
  1826  046F  0871               	movf	___lwdiv@divisor+1,w
  1827  0470  1C03               	skipc
  1828  0471  03F3               	decf	___lwdiv@dividend+1,f
  1829  0472  02F3               	subwf	___lwdiv@dividend+1,f
  1830  0473  1475               	bsf	___lwdiv@quotient,0
  1831  0474                     l1317:	
  1832  0474  3001               	movlw	1
  1833  0475                     u545:	
  1834  0475  1003               	clrc
  1835  0476  0CF1               	rrf	___lwdiv@divisor+1,f
  1836  0477  0CF0               	rrf	___lwdiv@divisor,f
  1837  0478  3EFF               	addlw	-1
  1838  0479  1D03               	skipz
  1839  047A  2C75               	goto	u545
  1840  047B  3001               	movlw	1
  1841  047C  02F7               	subwf	___lwdiv@counter,f
  1842  047D  1D03               	btfss	3,2
  1843  047E  2C5E               	goto	l1311
  1844  047F                     l1321:	
  1845  047F  0876               	movf	___lwdiv@quotient+1,w
  1846  0480  00F1               	movwf	?___lwdiv+1
  1847  0481  0875               	movf	___lwdiv@quotient,w
  1848  0482  00F0               	movwf	?___lwdiv
  1849  0483  0008               	return
  1850  0484                     __end_of___lwdiv:	
  1851                           
  1852                           	psect	text6
  1853  038B                     __ptext6:	
  1854 ;; *************** function _oscilator_begin *****************
  1855 ;; Defined at:
  1856 ;;		line 9 in file "./Oscilator.h"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;  freq            1    wreg     unsigned char 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  freq            1    1[COMMON] unsigned char 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, status,2, status,0
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1870 ;;      Params:         0       0       0       0       0
  1871 ;;      Locals:         1       0       0       0       0
  1872 ;;      Temps:          1       0       0       0       0
  1873 ;;      Totals:         2       0       0       0       0
  1874 ;;Total ram usage:        2 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; This function calls:
  1877 ;;		Nothing
  1878 ;; This function is called by:
  1879 ;;		_main
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           
  1884                           ;psect for function _oscilator_begin
  1885  038B                     _oscilator_begin:	
  1886                           
  1887                           ;incstack = 0
  1888                           ; Regs used in _oscilator_begin: [wreg+status,2+status,0]
  1889                           ;oscilator_begin@freq stored from wreg
  1890  038B  00F1               	movwf	oscilator_begin@freq
  1891                           
  1892                           ;./Oscilator.h: 10:     OSCCONbits.IRCF = freq;
  1893  038C  0871               	movf	oscilator_begin@freq,w
  1894  038D  00F0               	movwf	??_oscilator_begin
  1895  038E  0EF0               	swapf	??_oscilator_begin,f
  1896  038F  1683               	bsf	3,5	;RP0=1, select bank1
  1897  0390  1303               	bcf	3,6	;RP1=0, select bank1
  1898  0391  080F               	movf	15,w	;volatile
  1899  0392  0670               	xorwf	??_oscilator_begin,w
  1900  0393  398F               	andlw	-113
  1901  0394  0670               	xorwf	??_oscilator_begin,w
  1902  0395  008F               	movwf	15	;volatile
  1903                           
  1904                           ;./Oscilator.h: 11:     OSCCONbits.SCS = 1;
  1905  0396  140F               	bsf	15,0	;volatile
  1906                           
  1907                           ;./Oscilator.h: 12:     OSCCONbits.OSTS = 0;
  1908  0397  118F               	bcf	15,3	;volatile
  1909  0398  0008               	return
  1910  0399                     __end_of_oscilator_begin:	
  1911                           
  1912                           	psect	text7
  1913  03EE                     __ptext7:	
  1914 ;; *************** function _LCD8_strWrite *****************
  1915 ;; Defined at:
  1916 ;;		line 55 in file "./LCD8bit.h"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  data            2    2[COMMON] PTR unsigned char 
  1919 ;;		 -> test(20), show(15), STR_1(7), 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  i               1    5[COMMON] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1931 ;;      Params:         2       0       0       0       0
  1932 ;;      Locals:         1       0       0       0       0
  1933 ;;      Temps:          1       0       0       0       0
  1934 ;;      Totals:         4       0       0       0       0
  1935 ;;Total ram usage:        4 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    1
  1938 ;; This function calls:
  1939 ;;		_LCD8_write
  1940 ;; This function is called by:
  1941 ;;		_main
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           
  1946                           ;psect for function _LCD8_strWrite
  1947  03EE                     _LCD8_strWrite:	
  1948                           
  1949                           ;./LCD8bit.h: 56:     char i;;./LCD8bit.h: 57:         for(i=0; data[i] !='\0';i++ )
  1950                           
  1951                           ;incstack = 0
  1952                           ; Regs used in _LCD8_strWrite: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1953  03EE  01F5               	clrf	LCD8_strWrite@i
  1954  03EF                     l1411:	
  1955  03EF  0875               	movf	LCD8_strWrite@i,w
  1956  03F0  0772               	addwf	LCD8_strWrite@data,w
  1957  03F1  0084               	movwf	4
  1958  03F2  0873               	movf	LCD8_strWrite@data+1,w
  1959  03F3  1803               	skipnc
  1960  03F4  0A73               	incf	LCD8_strWrite@data+1,w
  1961  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  1962  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  1963  03F7  00FF               	movwf	127
  1964  03F8  120A  118A  2003  120A  118A  	fcall	stringtab
  1965  03FD  3A00               	xorlw	0
  1966  03FE  1903               	btfsc	3,2
  1967  03FF  0008               	return
  1968                           
  1969                           ;./LCD8bit.h: 58:             LCD8_write(data[i]);
  1970  0400  0875               	movf	LCD8_strWrite@i,w
  1971  0401  0772               	addwf	LCD8_strWrite@data,w
  1972  0402  0084               	movwf	4
  1973  0403  0873               	movf	LCD8_strWrite@data+1,w
  1974  0404  1803               	skipnc
  1975  0405  0A73               	incf	LCD8_strWrite@data+1,w
  1976  0406  00FF               	movwf	127
  1977  0407  120A  118A  2003  120A  118A  	fcall	stringtab
  1978  040C  120A  118A  2399  120A  118A  	fcall	_LCD8_write
  1979  0411  3001               	movlw	1
  1980  0412  00F4               	movwf	??_LCD8_strWrite
  1981  0413  0874               	movf	??_LCD8_strWrite,w
  1982  0414  07F5               	addwf	LCD8_strWrite@i,f
  1983  0415  2BEF               	goto	l1411
  1984  0416                     __end_of_LCD8_strWrite:	
  1985                           
  1986                           	psect	text8
  1987  0399                     __ptext8:	
  1988 ;; *************** function _LCD8_write *****************
  1989 ;; Defined at:
  1990 ;;		line 4 in file "./LCD8bit.h"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;  data            1    wreg     unsigned char 
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;  data            1    1[COMMON] unsigned char 
  1995 ;; Return value:  Size  Location     Type
  1996 ;;                  1    wreg      void 
  1997 ;; Registers used:
  1998 ;;		wreg
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2004 ;;      Params:         0       0       0       0       0
  2005 ;;      Locals:         1       0       0       0       0
  2006 ;;      Temps:          1       0       0       0       0
  2007 ;;      Totals:         2       0       0       0       0
  2008 ;;Total ram usage:        2 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; This function calls:
  2011 ;;		Nothing
  2012 ;; This function is called by:
  2013 ;;		_LCD8_strWrite
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           
  2018                           ;psect for function _LCD8_write
  2019  0399                     _LCD8_write:	
  2020                           
  2021                           ;incstack = 0
  2022                           ; Regs used in _LCD8_write: [wreg]
  2023                           ;LCD8_write@data stored from wreg
  2024  0399  00F1               	movwf	LCD8_write@data
  2025                           
  2026                           ;./LCD8bit.h: 5:     RA2 = 1;
  2027  039A  1283               	bcf	3,5	;RP0=0, select bank0
  2028  039B  1303               	bcf	3,6	;RP1=0, select bank0
  2029  039C  1505               	bsf	5,2	;volatile
  2030                           
  2031                           ;./LCD8bit.h: 6:     PORTB = data;
  2032  039D  0871               	movf	LCD8_write@data,w
  2033  039E  0086               	movwf	6	;volatile
  2034                           
  2035                           ;./LCD8bit.h: 7:     RA1 = 1;
  2036  039F  1485               	bsf	5,1	;volatile
  2037                           
  2038                           ;./LCD8bit.h: 8:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2039  03A0  301A               	movlw	26
  2040  03A1  00F0               	movwf	??_LCD8_write
  2041  03A2                     u1067:	
  2042  03A2  0BF0               	decfsz	??_LCD8_write,f
  2043  03A3  2BA2               	goto	u1067
  2044  03A4  0000               	nop
  2045                           
  2046                           ;./LCD8bit.h: 9:     RA1 = 0;
  2047  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2048  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2049  03A7  1085               	bcf	5,1	;volatile
  2050  03A8  0008               	return
  2051  03A9                     __end_of_LCD8_write:	
  2052                           
  2053                           	psect	text9
  2054  03BD                     __ptext9:	
  2055 ;; *************** function _LCD8_set_cursor *****************
  2056 ;; Defined at:
  2057 ;;		line 21 in file "./LCD8bit.h"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;  row             1    wreg     unsigned char 
  2060 ;;  column          1    3[COMMON] unsigned char 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;  row             1    6[COMMON] unsigned char 
  2063 ;;  cursor          1    5[COMMON] unsigned char 
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg, status,2, status,0, pclath, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2073 ;;      Params:         1       0       0       0       0
  2074 ;;      Locals:         2       0       0       0       0
  2075 ;;      Temps:          1       0       0       0       0
  2076 ;;      Totals:         4       0       0       0       0
  2077 ;;Total ram usage:        4 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:    1
  2080 ;; This function calls:
  2081 ;;		_LCD8_cmd
  2082 ;; This function is called by:
  2083 ;;		_main
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           
  2088                           ;psect for function _LCD8_set_cursor
  2089  03BD                     _LCD8_set_cursor:	
  2090                           
  2091                           ;incstack = 0
  2092                           ; Regs used in _LCD8_set_cursor: [wreg+status,2+status,0+pclath+cstack]
  2093                           ;LCD8_set_cursor@row stored from wreg
  2094  03BD  00F6               	movwf	LCD8_set_cursor@row
  2095                           
  2096                           ;./LCD8bit.h: 22:     char cursor;;./LCD8bit.h: 24:         if(row==1)
  2097  03BE  0376               	decf	LCD8_set_cursor@row,w
  2098  03BF  1D03               	btfss	3,2
  2099  03C0  2BC6               	goto	l106
  2100                           
  2101                           ;./LCD8bit.h: 25:             cursor = 128 + column -1;
  2102  03C1  0873               	movf	LCD8_set_cursor@column,w
  2103  03C2  3E7F               	addlw	127
  2104  03C3  00F4               	movwf	??_LCD8_set_cursor
  2105  03C4  0874               	movf	??_LCD8_set_cursor,w
  2106  03C5  00F5               	movwf	LCD8_set_cursor@cursor
  2107  03C6                     l106:	
  2108                           
  2109                           ;./LCD8bit.h: 26:         if (row==2)
  2110  03C6  3002               	movlw	2
  2111  03C7  0676               	xorwf	LCD8_set_cursor@row,w
  2112  03C8  1D03               	btfss	3,2
  2113  03C9  2BCF               	goto	l1373
  2114                           
  2115                           ;./LCD8bit.h: 27:             cursor = 192 + column -1;
  2116  03CA  0873               	movf	LCD8_set_cursor@column,w
  2117  03CB  3EBF               	addlw	191
  2118  03CC  00F4               	movwf	??_LCD8_set_cursor
  2119  03CD  0874               	movf	??_LCD8_set_cursor,w
  2120  03CE  00F5               	movwf	LCD8_set_cursor@cursor
  2121  03CF                     l1373:	
  2122                           
  2123                           ;./LCD8bit.h: 29:         LCD8_cmd(cursor);
  2124  03CF  0875               	movf	LCD8_set_cursor@cursor,w
  2125  03D0  120A  118A  23A9   	fcall	_LCD8_cmd
  2126  03D3  0008               	return
  2127  03D4                     __end_of_LCD8_set_cursor:	
  2128                           
  2129                           	psect	text10
  2130  0365                     __ptext10:	
  2131 ;; *************** function _LCD8_clear *****************
  2132 ;; Defined at:
  2133 ;;		line 32 in file "./LCD8bit.h"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;		None
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;		None
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      void 
  2140 ;; Registers used:
  2141 ;;		wreg, status,2, status,0, pclath, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2147 ;;      Params:         0       0       0       0       0
  2148 ;;      Locals:         0       0       0       0       0
  2149 ;;      Temps:          0       0       0       0       0
  2150 ;;      Totals:         0       0       0       0       0
  2151 ;;Total ram usage:        0 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    1
  2154 ;; This function calls:
  2155 ;;		_LCD8_cmd
  2156 ;; This function is called by:
  2157 ;;		_main
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           
  2162                           ;psect for function _LCD8_clear
  2163  0365                     _LCD8_clear:	
  2164                           
  2165                           ;./LCD8bit.h: 33:     LCD8_cmd(0);
  2166                           
  2167                           ;incstack = 0
  2168                           ; Regs used in _LCD8_clear: [wreg+status,2+status,0+pclath+cstack]
  2169  0365  3000               	movlw	0
  2170  0366  120A  118A  23A9  120A  118A  	fcall	_LCD8_cmd
  2171                           
  2172                           ;./LCD8bit.h: 34:     LCD8_cmd(1);
  2173  036B  3001               	movlw	1
  2174  036C  120A  118A  23A9   	fcall	_LCD8_cmd
  2175  036F  0008               	return
  2176  0370                     __end_of_LCD8_clear:	
  2177                           
  2178                           	psect	text11
  2179  0484                     __ptext11:	
  2180 ;; *************** function _LCD8_begin *****************
  2181 ;; Defined at:
  2182 ;;		line 37 in file "./LCD8bit.h"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;		None
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;		None
  2187 ;; Return value:  Size  Location     Type
  2188 ;;                  1    wreg      void 
  2189 ;; Registers used:
  2190 ;;		wreg, status,2, status,0, pclath, cstack
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2196 ;;      Params:         0       0       0       0       0
  2197 ;;      Locals:         0       0       0       0       0
  2198 ;;      Temps:          2       0       0       0       0
  2199 ;;      Totals:         2       0       0       0       0
  2200 ;;Total ram usage:        2 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; Hardware stack levels required when called:    1
  2203 ;; This function calls:
  2204 ;;		_LCD8_cmd
  2205 ;; This function is called by:
  2206 ;;		_main
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           
  2211                           ;psect for function _LCD8_begin
  2212  0484                     _LCD8_begin:	
  2213                           
  2214                           ;./LCD8bit.h: 38:     PORTB = 0;
  2215                           
  2216                           ;incstack = 0
  2217                           ; Regs used in _LCD8_begin: [wreg+status,2+status,0+pclath+cstack]
  2218  0484  1283               	bcf	3,5	;RP0=0, select bank0
  2219  0485  1303               	bcf	3,6	;RP1=0, select bank0
  2220  0486  0186               	clrf	6	;volatile
  2221                           
  2222                           ;./LCD8bit.h: 39:     _delay((unsigned long)((20)*(8000000/4000.0)));
  2223  0487  3034               	movlw	52
  2224  0488  00F4               	movwf	??_LCD8_begin+1
  2225  0489  30F1               	movlw	241
  2226  048A  00F3               	movwf	??_LCD8_begin
  2227  048B                     u1077:	
  2228  048B  0BF3               	decfsz	??_LCD8_begin,f
  2229  048C  2C8B               	goto	u1077
  2230  048D  0BF4               	decfsz	??_LCD8_begin+1,f
  2231  048E  2C8B               	goto	u1077
  2232  048F  2C90               	nop2
  2233                           
  2234                           ;./LCD8bit.h: 40:     LCD8_cmd(48);
  2235  0490  3030               	movlw	48
  2236  0491  120A  118A  23A9  120A  118A  	fcall	_LCD8_cmd
  2237                           
  2238                           ;./LCD8bit.h: 41:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2239  0496  300D               	movlw	13
  2240  0497  00F4               	movwf	??_LCD8_begin+1
  2241  0498  30FB               	movlw	251
  2242  0499  00F3               	movwf	??_LCD8_begin
  2243  049A                     u1087:	
  2244  049A  0BF3               	decfsz	??_LCD8_begin,f
  2245  049B  2C9A               	goto	u1087
  2246  049C  0BF4               	decfsz	??_LCD8_begin+1,f
  2247  049D  2C9A               	goto	u1087
  2248  049E  2C9F               	nop2
  2249                           
  2250                           ;./LCD8bit.h: 42:     LCD8_cmd(48);
  2251  049F  3030               	movlw	48
  2252  04A0  120A  118A  23A9  120A  118A  	fcall	_LCD8_cmd
  2253                           
  2254                           ;./LCD8bit.h: 43:     _delay((unsigned long)((165)*(8000000/4000000.0)));
  2255  04A5  306D               	movlw	109
  2256  04A6  00F3               	movwf	??_LCD8_begin
  2257  04A7                     u1097:	
  2258  04A7  0BF3               	decfsz	??_LCD8_begin,f
  2259  04A8  2CA7               	goto	u1097
  2260  04A9  2CAA               	nop2
  2261                           
  2262                           ;./LCD8bit.h: 44:     LCD8_cmd(48);
  2263  04AA  3030               	movlw	48
  2264  04AB  120A  118A  23A9  120A  118A  	fcall	_LCD8_cmd
  2265                           
  2266                           ;./LCD8bit.h: 45:     _delay((unsigned long)((165)*(8000000/4000000.0)));
  2267  04B0  306D               	movlw	109
  2268  04B1  00F3               	movwf	??_LCD8_begin
  2269  04B2                     u1107:	
  2270  04B2  0BF3               	decfsz	??_LCD8_begin,f
  2271  04B3  2CB2               	goto	u1107
  2272  04B4  2CB5               	nop2
  2273                           
  2274                           ;./LCD8bit.h: 47:     LCD8_cmd(0b111000);
  2275  04B5  3038               	movlw	56
  2276  04B6  120A  118A  23A9  120A  118A  	fcall	_LCD8_cmd
  2277                           
  2278                           ;./LCD8bit.h: 48:     LCD8_cmd(0b10100);
  2279  04BB  3014               	movlw	20
  2280  04BC  120A  118A  23A9  120A  118A  	fcall	_LCD8_cmd
  2281                           
  2282                           ;./LCD8bit.h: 49:     LCD8_cmd(1);
  2283  04C1  3001               	movlw	1
  2284  04C2  120A  118A  23A9  120A  118A  	fcall	_LCD8_cmd
  2285                           
  2286                           ;./LCD8bit.h: 50:     LCD8_cmd(0b110);
  2287  04C7  3006               	movlw	6
  2288  04C8  120A  118A  23A9  120A  118A  	fcall	_LCD8_cmd
  2289                           
  2290                           ;./LCD8bit.h: 51:     LCD8_cmd(0b1100);
  2291  04CD  300C               	movlw	12
  2292  04CE  120A  118A  23A9  120A  118A  	fcall	_LCD8_cmd
  2293                           
  2294                           ;./LCD8bit.h: 52:     LCD8_cmd(0b10);
  2295  04D3  3002               	movlw	2
  2296  04D4  120A  118A  23A9   	fcall	_LCD8_cmd
  2297  04D7  0008               	return
  2298  04D8                     __end_of_LCD8_begin:	
  2299                           
  2300                           	psect	text12
  2301  03A9                     __ptext12:	
  2302 ;; *************** function _LCD8_cmd *****************
  2303 ;; Defined at:
  2304 ;;		line 12 in file "./LCD8bit.h"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;  data            1    wreg     unsigned char 
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;  data            1    2[COMMON] unsigned char 
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  1    wreg      void 
  2311 ;; Registers used:
  2312 ;;		wreg
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2318 ;;      Params:         0       0       0       0       0
  2319 ;;      Locals:         1       0       0       0       0
  2320 ;;      Temps:          2       0       0       0       0
  2321 ;;      Totals:         3       0       0       0       0
  2322 ;;Total ram usage:        3 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; This function calls:
  2325 ;;		Nothing
  2326 ;; This function is called by:
  2327 ;;		_LCD8_set_cursor
  2328 ;;		_LCD8_clear
  2329 ;;		_LCD8_begin
  2330 ;;		_LCD8_shiftR
  2331 ;;		_LCD8_shiftL
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           
  2336                           ;psect for function _LCD8_cmd
  2337  03A9                     _LCD8_cmd:	
  2338                           
  2339                           ;incstack = 0
  2340                           ; Regs used in _LCD8_cmd: [wreg]
  2341                           ;LCD8_cmd@data stored from wreg
  2342  03A9  00F2               	movwf	LCD8_cmd@data
  2343                           
  2344                           ;./LCD8bit.h: 13:     RA2 = 0;
  2345  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2346  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2347  03AC  1105               	bcf	5,2	;volatile
  2348                           
  2349                           ;./LCD8bit.h: 14:     PORTB = data;
  2350  03AD  0872               	movf	LCD8_cmd@data,w
  2351  03AE  0086               	movwf	6	;volatile
  2352                           
  2353                           ;./LCD8bit.h: 16:     RA1 = 1;
  2354  03AF  1485               	bsf	5,1	;volatile
  2355                           
  2356                           ;./LCD8bit.h: 17:     _delay((unsigned long)((4)*(8000000/4000.0)));
  2357  03B0  300B               	movlw	11
  2358  03B1  00F1               	movwf	??_LCD8_cmd+1
  2359  03B2  3062               	movlw	98
  2360  03B3  00F0               	movwf	??_LCD8_cmd
  2361  03B4                     u1117:	
  2362  03B4  0BF0               	decfsz	??_LCD8_cmd,f
  2363  03B5  2BB4               	goto	u1117
  2364  03B6  0BF1               	decfsz	??_LCD8_cmd+1,f
  2365  03B7  2BB4               	goto	u1117
  2366  03B8  0000               	nop
  2367                           
  2368                           ;./LCD8bit.h: 18:     RA1 = 0;
  2369  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  2370  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  2371  03BB  1085               	bcf	5,1	;volatile
  2372  03BC  0008               	return
  2373  03BD                     __end_of_LCD8_cmd:	
  2374                           
  2375                           	psect	text13
  2376  0356                     __ptext13:	
  2377 ;; *************** function _ADC_conversion *****************
  2378 ;; Defined at:
  2379 ;;		line 117 in file "./ADC.h"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;		None
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      unsigned char 
  2386 ;; Registers used:
  2387 ;;		wreg
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2393 ;;      Params:         0       0       0       0       0
  2394 ;;      Locals:         0       0       0       0       0
  2395 ;;      Temps:          0       0       0       0       0
  2396 ;;      Totals:         0       0       0       0       0
  2397 ;;Total ram usage:        0 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; This function calls:
  2400 ;;		Nothing
  2401 ;; This function is called by:
  2402 ;;		_main
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           
  2407                           ;psect for function _ADC_conversion
  2408  0356                     _ADC_conversion:	
  2409                           
  2410                           ;./ADC.h: 118:     ADCON0bits.GO_nDONE = 1;
  2411                           
  2412                           ;incstack = 0
  2413                           ; Regs used in _ADC_conversion: [wreg]
  2414  0356  1283               	bcf	3,5	;RP0=0, select bank0
  2415  0357  1303               	bcf	3,6	;RP1=0, select bank0
  2416  0358  149F               	bsf	31,1	;volatile
  2417  0359                     l91:	
  2418                           ;./ADC.h: 119:     while(ADCON0bits.GO_nDONE);
  2419                           
  2420  0359  189F               	btfsc	31,1	;volatile
  2421  035A  2B59               	goto	l91
  2422                           
  2423                           ;./ADC.h: 120:     return ADRESH;
  2424  035B  081E               	movf	30,w	;volatile
  2425  035C  0008               	return
  2426  035D                     __end_of_ADC_conversion:	
  2427                           
  2428                           	psect	text14
  2429  03D4                     __ptext14:	
  2430 ;; *************** function _ADC_begin *****************
  2431 ;; Defined at:
  2432 ;;		line 84 in file "./ADC.h"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;  option          1    wreg     unsigned char 
  2435 ;;  freq            1    3[COMMON] unsigned char 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  option          1    4[COMMON] unsigned char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2447 ;;      Params:         1       0       0       0       0
  2448 ;;      Locals:         1       0       0       0       0
  2449 ;;      Temps:          0       0       0       0       0
  2450 ;;      Totals:         2       0       0       0       0
  2451 ;;Total ram usage:        2 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    1
  2454 ;; This function calls:
  2455 ;;		_ADC_channel
  2456 ;;		_ADC_freq
  2457 ;;		_ADC_option
  2458 ;; This function is called by:
  2459 ;;		_main
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           
  2464                           ;psect for function _ADC_begin
  2465  03D4                     _ADC_begin:	
  2466                           
  2467                           ;incstack = 0
  2468                           ; Regs used in _ADC_begin: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2469                           ;ADC_begin@option stored from wreg
  2470  03D4  00F4               	movwf	ADC_begin@option
  2471                           
  2472                           ;./ADC.h: 88:     ADC_option(option);
  2473  03D5  0874               	movf	ADC_begin@option,w
  2474  03D6  120A  118A  2596  120A  118A  	fcall	_ADC_option
  2475                           
  2476                           ;./ADC.h: 89:     ADCON1bits.VCFG1 = 0;
  2477  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  2478  03DC  1303               	bcf	3,6	;RP1=0, select bank1
  2479  03DD  129F               	bcf	31,5	;volatile
  2480                           
  2481                           ;./ADC.h: 90:     ADCON1bits.VCFG0 = 0;
  2482  03DE  121F               	bcf	31,4	;volatile
  2483                           
  2484                           ;./ADC.h: 91:     ADCON1bits.ADFM = 0;
  2485  03DF  139F               	bcf	31,7	;volatile
  2486                           
  2487                           ;./ADC.h: 92:     ADCON0bits.ADON = 1;
  2488  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2489  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  2490  03E2  141F               	bsf	31,0	;volatile
  2491                           
  2492                           ;./ADC.h: 96:     ADC_freq(freq);
  2493  03E3  0873               	movf	ADC_begin@freq,w
  2494  03E4  120A  118A  237D  120A  118A  	fcall	_ADC_freq
  2495                           
  2496                           ;./ADC.h: 98:     ADC_channel(option);
  2497  03E9  0874               	movf	ADC_begin@option,w
  2498  03EA  120A  118A  2370   	fcall	_ADC_channel
  2499  03ED  0008               	return
  2500  03EE                     __end_of_ADC_begin:	
  2501                           
  2502                           	psect	text15
  2503  0596                     __ptext15:	
  2504 ;; *************** function _ADC_option *****************
  2505 ;; Defined at:
  2506 ;;		line 2 in file "./ADC.h"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;  option          1    wreg     unsigned char 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  option          1    2[COMMON] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2520 ;;      Params:         0       0       0       0       0
  2521 ;;      Locals:         1       0       0       0       0
  2522 ;;      Temps:          2       0       0       0       0
  2523 ;;      Totals:         3       0       0       0       0
  2524 ;;Total ram usage:        3 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; This function calls:
  2527 ;;		Nothing
  2528 ;; This function is called by:
  2529 ;;		_ADC_begin
  2530 ;;		_ADC_int_begin
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           
  2535                           ;psect for function _ADC_option
  2536  0596                     _ADC_option:	
  2537                           
  2538                           ;incstack = 0
  2539                           ; Regs used in _ADC_option: [wreg-fsr0h+status,2+status,0]
  2540                           ;ADC_option@option stored from wreg
  2541  0596  00F2               	movwf	ADC_option@option
  2542                           
  2543                           ;./ADC.h: 3:     switch (option) {
  2544  0597  2E01               	goto	l1273
  2545  0598                     l60:	
  2546                           ;./ADC.h: 4:         case 0:
  2547                           
  2548                           
  2549                           ;./ADC.h: 5:             ANSELbits.ANS0 = 1;
  2550  0598  1683               	bsf	3,5	;RP0=1, select bank3
  2551  0599  1703               	bsf	3,6	;RP1=1, select bank3
  2552  059A  1408               	bsf	8,0	;volatile
  2553                           
  2554                           ;./ADC.h: 6:             TRISAbits.TRISA0 = 1;
  2555  059B  1683               	bsf	3,5	;RP0=1, select bank1
  2556  059C  1303               	bcf	3,6	;RP1=0, select bank1
  2557  059D  1405               	bsf	5,0	;volatile
  2558                           
  2559                           ;./ADC.h: 7:             break;
  2560  059E  0008               	return
  2561  059F                     l62:	
  2562                           ;./ADC.h: 8:         case 1:
  2563                           
  2564                           
  2565                           ;./ADC.h: 9:             ANSELbits.ANS1 = 1;
  2566  059F  1683               	bsf	3,5	;RP0=1, select bank3
  2567  05A0  1703               	bsf	3,6	;RP1=1, select bank3
  2568  05A1  1488               	bsf	8,1	;volatile
  2569                           
  2570                           ;./ADC.h: 10:             TRISAbits.TRISA1 = 1;
  2571  05A2  1683               	bsf	3,5	;RP0=1, select bank1
  2572  05A3  1303               	bcf	3,6	;RP1=0, select bank1
  2573  05A4  1485               	bsf	5,1	;volatile
  2574                           
  2575                           ;./ADC.h: 11:             break;
  2576  05A5  0008               	return
  2577  05A6                     l63:	
  2578                           ;./ADC.h: 12:         case 2:
  2579                           
  2580                           
  2581                           ;./ADC.h: 13:             ANSELbits.ANS2 = 1;
  2582  05A6  1683               	bsf	3,5	;RP0=1, select bank3
  2583  05A7  1703               	bsf	3,6	;RP1=1, select bank3
  2584  05A8  1508               	bsf	8,2	;volatile
  2585                           
  2586                           ;./ADC.h: 14:             TRISAbits.TRISA2 = 1;
  2587  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  2588  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  2589  05AB  1505               	bsf	5,2	;volatile
  2590                           
  2591                           ;./ADC.h: 15:             break;
  2592  05AC  0008               	return
  2593  05AD                     l64:	
  2594                           ;./ADC.h: 16:         case 3:
  2595                           
  2596                           
  2597                           ;./ADC.h: 17:             ANSELbits.ANS3 = 1;
  2598  05AD  1683               	bsf	3,5	;RP0=1, select bank3
  2599  05AE  1703               	bsf	3,6	;RP1=1, select bank3
  2600  05AF  1588               	bsf	8,3	;volatile
  2601                           
  2602                           ;./ADC.h: 18:             TRISAbits.TRISA3 = 1;
  2603  05B0  1683               	bsf	3,5	;RP0=1, select bank1
  2604  05B1  1303               	bcf	3,6	;RP1=0, select bank1
  2605  05B2  1585               	bsf	5,3	;volatile
  2606                           
  2607                           ;./ADC.h: 19:             break;
  2608  05B3  0008               	return
  2609  05B4                     l65:	
  2610                           ;./ADC.h: 20:         case 4:
  2611                           
  2612                           
  2613                           ;./ADC.h: 21:             ANSELbits.ANS4 = 1;
  2614  05B4  1683               	bsf	3,5	;RP0=1, select bank3
  2615  05B5  1703               	bsf	3,6	;RP1=1, select bank3
  2616  05B6  1608               	bsf	8,4	;volatile
  2617                           
  2618                           ;./ADC.h: 22:             TRISAbits.TRISA5 = 1;
  2619  05B7  1683               	bsf	3,5	;RP0=1, select bank1
  2620  05B8  1303               	bcf	3,6	;RP1=0, select bank1
  2621  05B9  1685               	bsf	5,5	;volatile
  2622                           
  2623                           ;./ADC.h: 23:             break;
  2624  05BA  0008               	return
  2625  05BB                     l66:	
  2626                           ;./ADC.h: 24:         case 5:
  2627                           
  2628                           
  2629                           ;./ADC.h: 25:             ANSELbits.ANS5 = 1;
  2630  05BB  1683               	bsf	3,5	;RP0=1, select bank3
  2631  05BC  1703               	bsf	3,6	;RP1=1, select bank3
  2632  05BD  1688               	bsf	8,5	;volatile
  2633                           
  2634                           ;./ADC.h: 26:             TRISEbits.TRISE0 = 1;
  2635  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  2636  05BF  1303               	bcf	3,6	;RP1=0, select bank1
  2637  05C0  1409               	bsf	9,0	;volatile
  2638                           
  2639                           ;./ADC.h: 27:             break;
  2640  05C1  0008               	return
  2641  05C2                     l67:	
  2642                           ;./ADC.h: 28:         case 6:
  2643                           
  2644                           
  2645                           ;./ADC.h: 29:             ANSELbits.ANS6 = 1;
  2646  05C2  1683               	bsf	3,5	;RP0=1, select bank3
  2647  05C3  1703               	bsf	3,6	;RP1=1, select bank3
  2648  05C4  1708               	bsf	8,6	;volatile
  2649                           
  2650                           ;./ADC.h: 30:             TRISEbits.TRISE1 = 1;
  2651  05C5  1683               	bsf	3,5	;RP0=1, select bank1
  2652  05C6  1303               	bcf	3,6	;RP1=0, select bank1
  2653  05C7  1489               	bsf	9,1	;volatile
  2654                           
  2655                           ;./ADC.h: 31:             break;
  2656  05C8  0008               	return
  2657  05C9                     l68:	
  2658                           ;./ADC.h: 32:         case 7:
  2659                           
  2660                           
  2661                           ;./ADC.h: 33:             ANSELbits.ANS7 = 1;
  2662  05C9  1683               	bsf	3,5	;RP0=1, select bank3
  2663  05CA  1703               	bsf	3,6	;RP1=1, select bank3
  2664  05CB  1788               	bsf	8,7	;volatile
  2665                           
  2666                           ;./ADC.h: 34:             TRISEbits.TRISE2 = 1;
  2667  05CC  1683               	bsf	3,5	;RP0=1, select bank1
  2668  05CD  1303               	bcf	3,6	;RP1=0, select bank1
  2669  05CE  1509               	bsf	9,2	;volatile
  2670                           
  2671                           ;./ADC.h: 35:             break;
  2672  05CF  0008               	return
  2673  05D0                     l69:	
  2674                           ;./ADC.h: 36:         case 8:
  2675                           
  2676                           
  2677                           ;./ADC.h: 37:             ANSELHbits.ANS8 = 1;
  2678  05D0  1683               	bsf	3,5	;RP0=1, select bank3
  2679  05D1  1703               	bsf	3,6	;RP1=1, select bank3
  2680  05D2  1409               	bsf	9,0	;volatile
  2681                           
  2682                           ;./ADC.h: 38:             TRISBbits.TRISB2 = 1;
  2683  05D3  1683               	bsf	3,5	;RP0=1, select bank1
  2684  05D4  1303               	bcf	3,6	;RP1=0, select bank1
  2685  05D5  1506               	bsf	6,2	;volatile
  2686                           
  2687                           ;./ADC.h: 39:             break;
  2688  05D6  0008               	return
  2689  05D7                     l70:	
  2690                           ;./ADC.h: 40:         case 9:
  2691                           
  2692                           
  2693                           ;./ADC.h: 41:             ANSELHbits.ANS9 = 1;
  2694  05D7  1683               	bsf	3,5	;RP0=1, select bank3
  2695  05D8  1703               	bsf	3,6	;RP1=1, select bank3
  2696  05D9  1489               	bsf	9,1	;volatile
  2697                           
  2698                           ;./ADC.h: 42:             TRISBbits.TRISB3 = 1;
  2699  05DA  1683               	bsf	3,5	;RP0=1, select bank1
  2700  05DB  1303               	bcf	3,6	;RP1=0, select bank1
  2701  05DC  1586               	bsf	6,3	;volatile
  2702                           
  2703                           ;./ADC.h: 43:             break;
  2704  05DD  0008               	return
  2705  05DE                     l71:	
  2706                           ;./ADC.h: 44:         case 10:
  2707                           
  2708                           
  2709                           ;./ADC.h: 45:             ANSELHbits.ANS10 = 1;
  2710  05DE  1683               	bsf	3,5	;RP0=1, select bank3
  2711  05DF  1703               	bsf	3,6	;RP1=1, select bank3
  2712  05E0  1509               	bsf	9,2	;volatile
  2713                           
  2714                           ;./ADC.h: 46:             TRISBbits.TRISB1 = 1;
  2715  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  2716  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  2717  05E3  1486               	bsf	6,1	;volatile
  2718                           
  2719                           ;./ADC.h: 47:             break;
  2720  05E4  0008               	return
  2721  05E5                     l72:	
  2722                           ;./ADC.h: 48:         case 11:
  2723                           
  2724                           
  2725                           ;./ADC.h: 49:             ANSELHbits.ANS11 = 1;
  2726  05E5  1683               	bsf	3,5	;RP0=1, select bank3
  2727  05E6  1703               	bsf	3,6	;RP1=1, select bank3
  2728  05E7  1589               	bsf	9,3	;volatile
  2729                           
  2730                           ;./ADC.h: 50:             TRISBbits.TRISB4 = 1;
  2731  05E8  1683               	bsf	3,5	;RP0=1, select bank1
  2732  05E9  1303               	bcf	3,6	;RP1=0, select bank1
  2733  05EA  1606               	bsf	6,4	;volatile
  2734                           
  2735                           ;./ADC.h: 51:             break;
  2736  05EB  0008               	return
  2737  05EC                     l73:	
  2738                           ;./ADC.h: 52:         case 12:
  2739                           
  2740                           
  2741                           ;./ADC.h: 53:             ANSELHbits.ANS12 = 1;
  2742  05EC  1683               	bsf	3,5	;RP0=1, select bank3
  2743  05ED  1703               	bsf	3,6	;RP1=1, select bank3
  2744  05EE  1609               	bsf	9,4	;volatile
  2745                           
  2746                           ;./ADC.h: 54:             TRISBbits.TRISB0 = 1;
  2747  05EF  1683               	bsf	3,5	;RP0=1, select bank1
  2748  05F0  1303               	bcf	3,6	;RP1=0, select bank1
  2749  05F1  1406               	bsf	6,0	;volatile
  2750                           
  2751                           ;./ADC.h: 55:             break;
  2752  05F2  0008               	return
  2753  05F3                     l74:	
  2754                           ;./ADC.h: 56:         case 13:
  2755                           
  2756                           
  2757                           ;./ADC.h: 57:             ANSELHbits.ANS13 = 1;
  2758  05F3  1683               	bsf	3,5	;RP0=1, select bank3
  2759  05F4  1703               	bsf	3,6	;RP1=1, select bank3
  2760  05F5  1689               	bsf	9,5	;volatile
  2761                           
  2762                           ;./ADC.h: 58:             TRISBbits.TRISB5 = 1;
  2763  05F6  1683               	bsf	3,5	;RP0=1, select bank1
  2764  05F7  1303               	bcf	3,6	;RP1=0, select bank1
  2765  05F8  1686               	bsf	6,5	;volatile
  2766                           
  2767                           ;./ADC.h: 59:             break;
  2768  05F9  0008               	return
  2769  05FA                     l75:	
  2770                           ;./ADC.h: 60:         default:
  2771                           
  2772                           
  2773                           ;./ADC.h: 61:             ANSELbits.ANS0 = 1;
  2774  05FA  1683               	bsf	3,5	;RP0=1, select bank3
  2775  05FB  1703               	bsf	3,6	;RP1=1, select bank3
  2776  05FC  1408               	bsf	8,0	;volatile
  2777                           
  2778                           ;./ADC.h: 62:             TRISAbits.TRISA0 = 1;
  2779  05FD  1683               	bsf	3,5	;RP0=1, select bank1
  2780  05FE  1303               	bcf	3,6	;RP1=0, select bank1
  2781  05FF  1405               	bsf	5,0	;volatile
  2782                           
  2783                           ;./ADC.h: 63:             break;
  2784  0600  0008               	return
  2785  0601                     l1273:	
  2786  0601  0872               	movf	ADC_option@option,w
  2787  0602  00F0               	movwf	??_ADC_option
  2788  0603  01F1               	clrf	??_ADC_option+1
  2789                           
  2790                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2791                           ; Switch size 1, requested type "simple"
  2792                           ; Number of cases is 1, Range of values is 0 to 0
  2793                           ; switch strategies available:
  2794                           ; Name         Instructions Cycles
  2795                           ; simple_byte            4     3 (average)
  2796                           ; direct_byte           11     8 (fixed)
  2797                           ; jumptable            260     6 (fixed)
  2798                           ;	Chosen strategy is simple_byte
  2799  0604  0871               	movf	??_ADC_option+1,w
  2800  0605  3A00               	xorlw	0	; case 0
  2801  0606  1903               	skipnz
  2802  0607  2E09               	goto	l1697
  2803  0608  2DFA               	goto	l75
  2804  0609                     l1697:	
  2805                           
  2806                           ; Switch size 1, requested type "simple"
  2807                           ; Number of cases is 14, Range of values is 0 to 13
  2808                           ; switch strategies available:
  2809                           ; Name         Instructions Cycles
  2810                           ; simple_byte           43    22 (average)
  2811                           ; direct_byte           50     8 (fixed)
  2812                           ; jumptable            260     6 (fixed)
  2813                           ;	Chosen strategy is simple_byte
  2814  0609  0870               	movf	??_ADC_option,w
  2815  060A  3A00               	xorlw	0	; case 0
  2816  060B  1903               	skipnz
  2817  060C  2D98               	goto	l60
  2818  060D  3A01               	xorlw	1	; case 1
  2819  060E  1903               	skipnz
  2820  060F  2D9F               	goto	l62
  2821  0610  3A03               	xorlw	3	; case 2
  2822  0611  1903               	skipnz
  2823  0612  2DA6               	goto	l63
  2824  0613  3A01               	xorlw	1	; case 3
  2825  0614  1903               	skipnz
  2826  0615  2DAD               	goto	l64
  2827  0616  3A07               	xorlw	7	; case 4
  2828  0617  1903               	skipnz
  2829  0618  2DB4               	goto	l65
  2830  0619  3A01               	xorlw	1	; case 5
  2831  061A  1903               	skipnz
  2832  061B  2DBB               	goto	l66
  2833  061C  3A03               	xorlw	3	; case 6
  2834  061D  1903               	skipnz
  2835  061E  2DC2               	goto	l67
  2836  061F  3A01               	xorlw	1	; case 7
  2837  0620  1903               	skipnz
  2838  0621  2DC9               	goto	l68
  2839  0622  3A0F               	xorlw	15	; case 8
  2840  0623  1903               	skipnz
  2841  0624  2DD0               	goto	l69
  2842  0625  3A01               	xorlw	1	; case 9
  2843  0626  1903               	skipnz
  2844  0627  2DD7               	goto	l70
  2845  0628  3A03               	xorlw	3	; case 10
  2846  0629  1903               	skipnz
  2847  062A  2DDE               	goto	l71
  2848  062B  3A01               	xorlw	1	; case 11
  2849  062C  1903               	skipnz
  2850  062D  2DE5               	goto	l72
  2851  062E  3A07               	xorlw	7	; case 12
  2852  062F  1903               	skipnz
  2853  0630  2DEC               	goto	l73
  2854  0631  3A01               	xorlw	1	; case 13
  2855  0632  1903               	skipnz
  2856  0633  2DF3               	goto	l74
  2857  0634  2DFA               	goto	l75
  2858  0635  0008               	return
  2859  0636                     __end_of_ADC_option:	
  2860                           
  2861                           	psect	text16
  2862  037D                     __ptext16:	
  2863 ;; *************** function _ADC_freq *****************
  2864 ;; Defined at:
  2865 ;;		line 67 in file "./ADC.h"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  freq            1    wreg     unsigned char 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  freq            1    1[COMMON] unsigned char 
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2879 ;;      Params:         0       0       0       0       0
  2880 ;;      Locals:         1       0       0       0       0
  2881 ;;      Temps:          1       0       0       0       0
  2882 ;;      Totals:         2       0       0       0       0
  2883 ;;Total ram usage:        2 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; This function calls:
  2886 ;;		Nothing
  2887 ;; This function is called by:
  2888 ;;		_ADC_begin
  2889 ;;		_ADC_int_begin
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           
  2894                           ;psect for function _ADC_freq
  2895  037D                     _ADC_freq:	
  2896                           
  2897                           ;incstack = 0
  2898                           ; Regs used in _ADC_freq: [wreg+status,2+status,0]
  2899                           ;ADC_freq@freq stored from wreg
  2900  037D  00F1               	movwf	ADC_freq@freq
  2901                           
  2902                           ;./ADC.h: 74:     ADCON0bits.ADCS = freq;
  2903  037E  0871               	movf	ADC_freq@freq,w
  2904  037F  00F0               	movwf	??_ADC_freq
  2905  0380  0EF0               	swapf	??_ADC_freq,f
  2906  0381  0DF0               	rlf	??_ADC_freq,f
  2907  0382  0DF0               	rlf	??_ADC_freq,f
  2908  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2909  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2910  0385  081F               	movf	31,w	;volatile
  2911  0386  0670               	xorwf	??_ADC_freq,w
  2912  0387  393F               	andlw	-193
  2913  0388  0670               	xorwf	??_ADC_freq,w
  2914  0389  009F               	movwf	31	;volatile
  2915  038A  0008               	return
  2916  038B                     __end_of_ADC_freq:	
  2917                           
  2918                           	psect	text17
  2919  0370                     __ptext17:	
  2920 ;; *************** function _ADC_channel *****************
  2921 ;; Defined at:
  2922 ;;		line 77 in file "./ADC.h"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  channel         1    wreg     unsigned char 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  channel         1    1[COMMON] unsigned char 
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      void 
  2929 ;; Registers used:
  2930 ;;		wreg, status,2, status,0
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2936 ;;      Params:         0       0       0       0       0
  2937 ;;      Locals:         1       0       0       0       0
  2938 ;;      Temps:          1       0       0       0       0
  2939 ;;      Totals:         2       0       0       0       0
  2940 ;;Total ram usage:        2 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; This function calls:
  2943 ;;		Nothing
  2944 ;; This function is called by:
  2945 ;;		_ADC_begin
  2946 ;;		_ADC_int_begin
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           
  2951                           ;psect for function _ADC_channel
  2952  0370                     _ADC_channel:	
  2953                           
  2954                           ;incstack = 0
  2955                           ; Regs used in _ADC_channel: [wreg+status,2+status,0]
  2956                           ;ADC_channel@channel stored from wreg
  2957  0370  00F1               	movwf	ADC_channel@channel
  2958                           
  2959                           ;./ADC.h: 81:     ADCON0bits.CHS = channel;
  2960  0371  0871               	movf	ADC_channel@channel,w
  2961  0372  00F0               	movwf	??_ADC_channel
  2962  0373  0DF0               	rlf	??_ADC_channel,f
  2963  0374  0DF0               	rlf	??_ADC_channel,f
  2964  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2965  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2966  0377  081F               	movf	31,w	;volatile
  2967  0378  0670               	xorwf	??_ADC_channel,w
  2968  0379  39C3               	andlw	-61
  2969  037A  0670               	xorwf	??_ADC_channel,w
  2970  037B  009F               	movwf	31	;volatile
  2971  037C  0008               	return
  2972  037D                     __end_of_ADC_channel:	
  2973  007E                     btemp	set	126	;btemp
  2974  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    10
    Data        0
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     16      72
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 13
		 -> STR_3(CODE[13]), STR_2(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> test(BANK0[20]), show(BANK0[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD8_strWrite@data	PTR unsigned char  size(2) Largest target is 20
		 -> test(BANK0[20]), show(BANK0[15]), STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD8_strWrite->_LCD8_write
    _LCD8_set_cursor->_LCD8_cmd
    _LCD8_clear->_LCD8_cmd
    _LCD8_begin->_LCD8_cmd
    _ADC_begin->_ADC_option

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3110
                                             13 BANK0      3     3      0
                          _ADC_begin
                     _ADC_conversion
                         _LCD8_begin
                         _LCD8_clear
                    _LCD8_set_cursor
                      _LCD8_strWrite
                            ___lwdiv
                    _oscilator_begin
                            _sprintf
                           _wave_rev
                          _wave_step
 ---------------------------------------------------------------------------------
 (1) _wave_step                                            4     2      2      98
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _wave_rev                                             4     2      2      98
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1472
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     466
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _oscilator_begin                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD8_strWrite                                        4     2      2     340
                                              2 COMMON     4     2      2
                         _LCD8_write
 ---------------------------------------------------------------------------------
 (2) _LCD8_write                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD8_set_cursor                                      4     3      1     362
                                              3 COMMON     4     3      1
                           _LCD8_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD8_clear                                           0     0      0      22
                           _LCD8_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD8_begin                                           2     2      0      22
                                              3 COMMON     2     2      0
                           _LCD8_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD8_cmd                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_conversion                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_begin                                            2     1      1     208
                                              3 COMMON     2     1      1
                        _ADC_channel
                           _ADC_freq
                         _ADC_option
 ---------------------------------------------------------------------------------
 (2) _ADC_option                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_freq                                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADC_channel                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_begin
     _ADC_channel
     _ADC_freq
     _ADC_option
   _ADC_conversion
   _LCD8_begin
     _LCD8_cmd
   _LCD8_clear
     _LCD8_cmd
   _LCD8_set_cursor
     _LCD8_cmd
   _LCD8_strWrite
     _LCD8_write
   ___lwdiv
   _oscilator_begin
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _wave_rev
   _wave_step

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      56       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      48       5       90.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      56      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Feb 25 17:11:16 2019

      LCD8_set_cursor@row 0076                         _i 0033                         pc 0002  
             __CFG_CP$OFF 0000     LCD8_set_cursor@column 0073                        l60 0598  
                      l70 05D7                        l62 059F                        l71 05DE  
                      l63 05A6                        l72 05E5                        l64 05AD  
                      l73 05EC                        l65 05B4                        l74 05F3  
                      l66 05BB                        l75 05FA                        l67 05C2  
                      l91 0359                        l68 05C9                        l69 05D0  
   LCD8_set_cursor@cursor 0075                        fsr 0004        __size_of_ADC_begin 001A  
                     l106 03C6                       l210 04DC                       l215 052E  
                     l152 07D6                       l156 07E6                       l184 053B  
                     l189 058D                       _RA1 0029                       _RA2 002A  
                     _RE2 004A                       _RE3 004B                       u505 0453  
            __CFG_CPD$OFF 0000                       u525 045F                       u605 0439  
                     u535 046B                       u545 0475                       u575 041F  
                     u825 0541                       u595 0430                       u685 06AB  
                     u775 04E2                       u977 075A                       u987 0553  
                     u997 0565                       fsr0 0004                       indf 0000  
            __CFG_LVP$OFF 0000                      l1311 045E                      l1321 047F  
                    l1411 03EF                      l1317 0474                      l1309 0450  
                    l1333 041C                      l1335 042A                      l1343 0443  
                    l1273 0601                      l1433 067B                      l1513 056A  
                    l1339 0438                      l1443 0692                      l1427 065D  
                    l1373 03CF                      l1461 06C4                      l1517 057C  
                    l1509 0558                      l1455 06B5                      l1471 063D  
                    l1607 07E4                      l1449 0694                      l1473 0709  
                    l1469 06C8                      l1493 050B                      l1497 051D  
                    l1489 04F9                      l1579 0760                      l1695 0670  
                    l1697 0609       __size_of_ADC_option 00A0                      STR_1 0035  
                    STR_2 002A                      STR_3 001D                      u1007 0577  
                    u1017 0588                      u1107 04B2                      u1027 04F4  
                    u1117 03B4                      u1037 0506                      u1047 0518  
                    u1057 0529                      u1067 03A2                      u1077 048B  
                    u1087 049A                      u1097 04A7              __CFG_WRT$OFF 0000  
                    _main 070E                      _show 0049                      _test 0035  
                    _step 0030                      btemp 007E             __CFG_BOREN$ON 0000  
                    start 0000          __end_of_ADC_freq 038B             __CFG_IESO$OFF 0000  
    __size_of_ADC_channel 000D   __end_of_oscilator_begin 0399          __end_of_LCD8_cmd 03BD  
     __size_of_LCD8_begin 0054       __size_of_LCD8_clear 000B           _LCD8_set_cursor 03BD  
                   ?_main 0070       __size_of_LCD8_write 0010             __CFG_WDTE$OFF 0000  
         __end_of___lwdiv 0484           __end_of___lwmod 0448                     _PORTA 0005  
                   _PORTB 0006                     _PORTD 0008                     _TRISB 0086  
                   _TRISD 0088                     _TRISE 0089            __CFG_FCMEN$OFF 0000  
                   _delta 002A           __end_of_dpowers 001D             wave_rev@steps 0070  
                   _theta 002E                     pclath 000A         __end_of_ADC_begin 03EE  
                   status 0003                     wtemp0 007E           __end_of_sprintf 070E  
          __CFG_MCLRE$OFF 0000           __initialization 07F5              __end_of_main 07F5  
                  ??_main 0065          ??_ADC_conversion 0070                    _ADRESH 001E  
                  _TRISA1 0429                    _TRISA2 042A            __CFG_PWRTE$OFF 0000  
 __end_of_LCD8_set_cursor 03D4              ??_ADC_option 0070          ?_oscilator_begin 0070  
               ??___lwdiv 0074                 ??___lwmod 007C          __end_of_wave_rev 0537  
               ?_ADC_freq 0070              ??_LCD8_begin 0073                 ??_sprintf 005B  
            ??_LCD8_clear 0073                 ?_LCD8_cmd 0070        __end_of_ADC_option 0636  
            ??_LCD8_write 0070   __end_of__initialization 07FC            __pcstackCOMMON 0070  
          wave_step@steps 0070        __end_of_LCD8_begin 04D8        __end_of_LCD8_clear 0370  
      __end_of_LCD8_write 03A9                ??_ADC_freq 0070                ??_LCD8_cmd 0070  
              __pbssBANK0 0020          ADC_option@option 0072     __end_of_LCD8_strWrite 0416  
              __pmaintext 070E          ?_LCD8_set_cursor 0073        __size_of_wave_step 005F  
              __stringtab 0003             ??_ADC_channel 0070                 _ADC_begin 03D4  
               ?_wave_rev 0070                   ___lwdiv 0448                   ___lwmod 0416  
               _ANSELbits 0188                   __ptext1 0537                   __ptext2 04D8  
                 __ptext3 0636                   __ptext4 0416                   __ptext5 0448  
                 __ptext6 038B                   __ptext7 03EE                   __ptext8 0399  
                 __ptext9 03BD                   _dpowers 0013         LCD8_strWrite@data 0072  
                 _sprintf 0636                   clrloop0 035E      end_of_initialization 07FC  
              ?_ADC_begin 0073         __end_of_wave_step 0596                ??_wave_rev 0072  
     __end_of_ADC_channel 037D                 _TRISAbits 0085                 _TRISBbits 0086  
               _TRISEbits 0089         __size_of_ADC_freq 000E         __size_of_LCD8_cmd 0014  
            ADC_freq@freq 0071  __size_of_oscilator_begin 000E       start_initialization 07F5  
             _ADC_channel 0370  __CFG_FOSC$INTRC_NOCLKOUT 0000   __size_of_ADC_conversion 0007  
             ??_ADC_begin 0074                full_step@i 0028                 ___latbits 0002  
           __pcstackBANK0 0058               sprintf@flag 005F               sprintf@prec 0060  
        ___lwdiv@dividend 0072                  ?___lwdiv 0070                  ?___lwmod 0078  
          LCD8_strWrite@i 0075         __size_of_wave_rev 005F                 __pstrings 0003  
  __size_of_LCD8_strWrite 0028  __size_of_LCD8_set_cursor 0017            LCD8_write@data 0071  
                _ADC_freq 037D          ___lwdiv@quotient 0075                  ?_sprintf 0058  
       ??_oscilator_begin 0070                  _LCD8_cmd 03A9                 clear_ram0 035D  
                _PIE1bits 008C                  _PIR1bits 000C                 _wave_step 0537  
              _ADCON0bits 001F               __stringbase 0012                _ADCON1bits 009F  
               _step_last 002C                wave_step@a 0024                wave_step@i 0026  
      ADC_channel@channel 0071             _LCD8_strWrite 03EE       oscilator_begin@freq 0071  
          _ADC_conversion 0356                _ADC_option 0596                 full_rev@i 0032  
              ?_wave_step 0070          __size_of___lwdiv 003C          __size_of___lwmod 0032  
      __end_of__stringtab 0013                  _adc_read 0034                _ANSELHbits 0189  
              sprintf@val 0061           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 0365                  __ptext11 0484                  __ptext12 03A9  
                __ptext13 0356                  __ptext14 03D4                  __ptext15 0596  
                __ptext16 037D                  __ptext17 0370         __CFG_BOR4V$BOR40V 0000  
       ??_LCD8_set_cursor 0074                _LCD8_begin 0484                _LCD8_clear 0365  
        __size_of_sprintf 00D8            ?_LCD8_strWrite 0072                _LCD8_write 0399  
  __end_of_ADC_conversion 035D             __size_of_main 00E7              ?_ADC_channel 0070  
            LCD8_cmd@data 0072                  _wave_rev 04D8                 wave_rev@a 0020  
               wave_rev@i 0022           ADC_begin@option 0074                _INTCONbits 000B  
               sprintf@ap 005E                 sprintf@sp 0063           ?_ADC_conversion 0070  
        ___lwmod@dividend 007A                 stringcode 000D                _OSCCONbits 008F  
             ?_ADC_option 0070               ??_wave_step 0072           _oscilator_begin 038B  
                sprintf@c 0064                  sprintf@f 0058           ___lwmod@divisor 0078  
         ___lwmod@counter 007D                  stringdir 000D                  stringtab 0003  
           ADC_begin@freq 0073           ??_LCD8_strWrite 0074               ?_LCD8_begin 0070  
             ?_LCD8_clear 0070               ?_LCD8_write 0070  
