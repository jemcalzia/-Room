

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Feb 25 12:04:24 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.05
    30                           ; Generated 20/12/2018 GMT
    31                           ; 
    32                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0088                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  008F                     	;# 
   108  0090                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0093                     	;# 
   114  0094                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  0105                     	;# 
   127  0107                     	;# 
   128  0108                     	;# 
   129  0109                     	;# 
   130  010C                     	;# 
   131  010C                     	;# 
   132  010D                     	;# 
   133  010E                     	;# 
   134  010F                     	;# 
   135  0185                     	;# 
   136  0187                     	;# 
   137  0188                     	;# 
   138  0189                     	;# 
   139  018C                     	;# 
   140  018D                     	;# 
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  0008                     	;# 
   150  0009                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000D                     	;# 
   155  000E                     	;# 
   156  000E                     	;# 
   157  000F                     	;# 
   158  0010                     	;# 
   159  0011                     	;# 
   160  0012                     	;# 
   161  0013                     	;# 
   162  0014                     	;# 
   163  0015                     	;# 
   164  0015                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001B                     	;# 
   171  001B                     	;# 
   172  001C                     	;# 
   173  001D                     	;# 
   174  001E                     	;# 
   175  001F                     	;# 
   176  0081                     	;# 
   177  0085                     	;# 
   178  0086                     	;# 
   179  0087                     	;# 
   180  0088                     	;# 
   181  0089                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  008F                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0093                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0094                     	;# 
   193  0095                     	;# 
   194  0096                     	;# 
   195  0097                     	;# 
   196  0098                     	;# 
   197  0099                     	;# 
   198  009A                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  0105                     	;# 
   205  0107                     	;# 
   206  0108                     	;# 
   207  0109                     	;# 
   208  010C                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  0185                     	;# 
   214  0187                     	;# 
   215  0188                     	;# 
   216  0189                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0008                     	;# 
   228  0009                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000D                     	;# 
   233  000E                     	;# 
   234  000E                     	;# 
   235  000F                     	;# 
   236  0010                     	;# 
   237  0011                     	;# 
   238  0012                     	;# 
   239  0013                     	;# 
   240  0014                     	;# 
   241  0015                     	;# 
   242  0015                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001B                     	;# 
   249  001B                     	;# 
   250  001C                     	;# 
   251  001D                     	;# 
   252  001E                     	;# 
   253  001F                     	;# 
   254  0081                     	;# 
   255  0085                     	;# 
   256  0086                     	;# 
   257  0087                     	;# 
   258  0088                     	;# 
   259  0089                     	;# 
   260  008C                     	;# 
   261  008D                     	;# 
   262  008E                     	;# 
   263  008F                     	;# 
   264  0090                     	;# 
   265  0091                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0093                     	;# 
   270  0094                     	;# 
   271  0095                     	;# 
   272  0096                     	;# 
   273  0097                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009A                     	;# 
   277  009B                     	;# 
   278  009C                     	;# 
   279  009D                     	;# 
   280  009E                     	;# 
   281  009F                     	;# 
   282  0105                     	;# 
   283  0107                     	;# 
   284  0108                     	;# 
   285  0109                     	;# 
   286  010C                     	;# 
   287  010C                     	;# 
   288  010D                     	;# 
   289  010E                     	;# 
   290  010F                     	;# 
   291  0185                     	;# 
   292  0187                     	;# 
   293  0188                     	;# 
   294  0189                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297                           
   298                           	psect	strings
   299  0003                     __pstrings:	
   300  0003                     stringtab:	
   301  0003                     __stringtab:	
   302                           
   303                           ;	String table - string pointers are 1 byte each
   304  0003  1BFF               	btfsc	btemp+1,7
   305  0004  280D               	ljmp	stringcode
   306  0005  1383               	bcf	3,7
   307  0006  187F               	btfsc	btemp+1,0
   308  0007  1783               	bsf	3,7
   309  0008  0800               	movf	0,w
   310  0009  0A84               	incf	4,f
   311  000A  1903               	skipnz
   312  000B  0AFF               	incf	btemp+1,f
   313  000C  0008               	return
   314  000D                     stringcode:	
   315  000D                     stringdir:	
   316  000D  3000               	movlw	high stringdir
   317  000E  008A               	movwf	10
   318  000F  0804               	movf	4,w
   319  0010  0A84               	incf	4,f
   320  0011  0782               	addwf	2,f
   321  0012                     __stringbase:	
   322  0012  3400               	retlw	0
   323  0013                     __end_of__stringtab:	
   324  0013                     _dpowers:	
   325  0013  3401               	retlw	1
   326  0014  3400               	retlw	0
   327  0015  340A               	retlw	10
   328  0016  3400               	retlw	0
   329  0017  3464               	retlw	100
   330  0018  3400               	retlw	0
   331  0019  34E8               	retlw	232
   332  001A  3403               	retlw	3
   333  001B  3410               	retlw	16
   334  001C  3427               	retlw	39
   335  001D                     __end_of_dpowers:	
   336  0008                     _PORTD	set	8
   337  0005                     _PORTA	set	5
   338  0006                     _PORTB	set	6
   339  001E                     _ADRESH	set	30
   340  000C                     _PIR1bits	set	12
   341  000B                     _INTCONbits	set	11
   342  001F                     _ADCON0bits	set	31
   343  0029                     _RA1	set	41
   344  002A                     _RA2	set	42
   345  0088                     _TRISD	set	136
   346  0086                     _TRISB	set	134
   347  008F                     _OSCCONbits	set	143
   348  008C                     _PIE1bits	set	140
   349  009F                     _ADCON1bits	set	159
   350  0086                     _TRISBbits	set	134
   351  0089                     _TRISEbits	set	137
   352  0085                     _TRISAbits	set	133
   353  042A                     _TRISA2	set	1066
   354  0429                     _TRISA1	set	1065
   355  0189                     _ANSELHbits	set	393
   356  0188                     _ANSELbits	set	392
   357  001D                     STR_2:	
   358  001D  3420               	retlw	32	;' '
   359  001E  3453               	retlw	83	;'S'
   360  001F  3474               	retlw	116	;'t'
   361  0020  3465               	retlw	101	;'e'
   362  0021  3470               	retlw	112	;'p'
   363  0022  3420               	retlw	32	;' '
   364  0023  343D               	retlw	61	;'='
   365  0024  3420               	retlw	32	;' '
   366  0025  3425               	retlw	37	;'%'
   367  0026  3464               	retlw	100	;'d'
   368  0027  3400               	retlw	0
   369  0028                     STR_1:	
   370  0028  3468               	retlw	104	;'h'
   371  0029  346F               	retlw	111	;'o'
   372  002A  346C               	retlw	108	;'l'
   373  002B  3461               	retlw	97	;'a'
   374  002C  3461               	retlw	97	;'a'
   375  002D  3461               	retlw	97	;'a'
   376  002E  3400               	retlw	0
   377                           
   378                           ; #config settings
   379  0000                     
   380                           	psect	cinit
   381  07F5                     start_initialization:	
   382  07F5                     __initialization:	
   383                           
   384                           ; Clear objects allocated to BANK0
   385  07F5  1383               	bcf	3,7	;select IRP bank0
   386  07F6  3020               	movlw	low __pbssBANK0
   387  07F7  0084               	movwf	4
   388  07F8  3038               	movlw	low (__pbssBANK0+24)
   389  07F9  120A  118A  2402   	fcall	clear_ram0
   390  07FC                     end_of_initialization:	
   391                           ;End of C runtime variable initialization code
   392                           
   393  07FC                     __end_of__initialization:	
   394  07FC  0183               	clrf	3
   395  07FD  120A  118A  2E7C   	ljmp	_main	;jump to C main() function
   396                           
   397                           	psect	bssBANK0
   398  0020                     __pbssBANK0:	
   399  0020                     wave_step@a:	
   400  0020                     	ds	2
   401  0022                     wave_step@i:	
   402  0022                     	ds	2
   403  0024                     _step:	
   404  0024                     	ds	2
   405  0026                     full_step@i:	
   406  0026                     	ds	1
   407  0027                     _i:	
   408  0027                     	ds	1
   409  0028                     _adc_read:	
   410  0028                     	ds	1
   411  0029                     _show:	
   412  0029                     	ds	15
   413                           
   414                           	psect	clrtext
   415  0402                     clear_ram0:	
   416                           ;	Called with FSR containing the base address, and
   417                           ;	W with the last address+1
   418                           
   419  0402  0064               	clrwdt	;clear the watchdog before getting into this loop
   420  0403                     clrloop0:	
   421  0403  0180               	clrf	0	;clear RAM location pointed to by FSR
   422  0404  0A84               	incf	4,f	;increment pointer
   423  0405  0604               	xorwf	4,w	;XOR with final address
   424  0406  1903               	btfsc	3,2	;have we reached the end yet?
   425  0407  3400               	retlw	0	;all done for this memory range, return
   426  0408  0604               	xorwf	4,w	;XOR again to restore value
   427  0409  2C03               	goto	clrloop0	;do the next byte
   428                           
   429                           	psect	cstackCOMMON
   430  0070                     __pcstackCOMMON:	
   431  0070                     ?_wave_step:	
   432  0070                     ?_ADC_option:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ??_ADC_option:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_ADC_freq:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ??_ADC_freq:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_ADC_channel:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ??_ADC_channel:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ?_ADC_conversion:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ??_ADC_conversion:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0070                     ?_LCD8_write:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0070                     ??_LCD8_write:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0070                     ?_LCD8_cmd:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ??_LCD8_cmd:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0070                     ?_LCD8_clear:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ?_LCD8_begin:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_oscilator_begin:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ??_oscilator_begin:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_main:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?___lwdiv:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     wave_step@steps:	
   487                           ; 2 bytes @ 0x0
   488                           
   489  0070                     ___lwdiv@divisor:	
   490                           ; 2 bytes @ 0x0
   491                           
   492                           
   493                           ; 2 bytes @ 0x0
   494  0070                     	ds	1
   495  0071                     ADC_freq@freq:	
   496  0071                     ADC_channel@channel:	
   497                           ; 1 bytes @ 0x1
   498                           
   499  0071                     LCD8_write@data:	
   500                           ; 1 bytes @ 0x1
   501                           
   502  0071                     oscilator_begin@freq:	
   503                           ; 1 bytes @ 0x1
   504                           
   505                           
   506                           ; 1 bytes @ 0x1
   507  0071                     	ds	1
   508  0072                     ??_wave_step:	
   509  0072                     ?_LCD8_strWrite:	
   510                           ; 1 bytes @ 0x2
   511                           
   512  0072                     ADC_option@option:	
   513                           ; 1 bytes @ 0x2
   514                           
   515  0072                     LCD8_cmd@data:	
   516                           ; 1 bytes @ 0x2
   517                           
   518  0072                     LCD8_strWrite@data:	
   519                           ; 1 bytes @ 0x2
   520                           
   521  0072                     ___lwdiv@dividend:	
   522                           ; 2 bytes @ 0x2
   523                           
   524                           
   525                           ; 2 bytes @ 0x2
   526  0072                     	ds	1
   527  0073                     ?_ADC_begin:	
   528  0073                     ?_LCD8_set_cursor:	
   529                           ; 1 bytes @ 0x3
   530                           
   531  0073                     ??_LCD8_clear:	
   532                           ; 1 bytes @ 0x3
   533                           
   534  0073                     ??_LCD8_begin:	
   535                           ; 1 bytes @ 0x3
   536                           
   537  0073                     ADC_begin@freq:	
   538                           ; 1 bytes @ 0x3
   539                           
   540  0073                     LCD8_set_cursor@column:	
   541                           ; 1 bytes @ 0x3
   542                           
   543                           
   544                           ; 1 bytes @ 0x3
   545  0073                     	ds	1
   546  0074                     ??_ADC_begin:	
   547  0074                     ??_LCD8_set_cursor:	
   548                           ; 1 bytes @ 0x4
   549                           
   550  0074                     ??_LCD8_strWrite:	
   551                           ; 1 bytes @ 0x4
   552                           
   553  0074                     ??___lwdiv:	
   554                           ; 1 bytes @ 0x4
   555                           
   556  0074                     ADC_begin@option:	
   557                           ; 1 bytes @ 0x4
   558                           
   559                           
   560                           ; 1 bytes @ 0x4
   561  0074                     	ds	1
   562  0075                     LCD8_set_cursor@cursor:	
   563  0075                     LCD8_strWrite@i:	
   564                           ; 1 bytes @ 0x5
   565                           
   566  0075                     ___lwdiv@quotient:	
   567                           ; 1 bytes @ 0x5
   568                           
   569                           
   570                           ; 2 bytes @ 0x5
   571  0075                     	ds	1
   572  0076                     LCD8_set_cursor@row:	
   573                           
   574                           ; 1 bytes @ 0x6
   575  0076                     	ds	1
   576  0077                     ___lwdiv@counter:	
   577                           
   578                           ; 1 bytes @ 0x7
   579  0077                     	ds	1
   580  0078                     ?___lwmod:	
   581  0078                     ___lwmod@divisor:	
   582                           ; 2 bytes @ 0x8
   583                           
   584                           
   585                           ; 2 bytes @ 0x8
   586  0078                     	ds	2
   587  007A                     ___lwmod@dividend:	
   588                           
   589                           ; 2 bytes @ 0xA
   590  007A                     	ds	2
   591  007C                     ??___lwmod:	
   592                           
   593                           ; 1 bytes @ 0xC
   594  007C                     	ds	1
   595  007D                     ___lwmod@counter:	
   596                           
   597                           ; 1 bytes @ 0xD
   598  007D                     	ds	1
   599                           
   600                           	psect	cstackBANK0
   601  0038                     __pcstackBANK0:	
   602  0038                     ?_sprintf:	
   603  0038                     sprintf@f:	
   604                           ; 2 bytes @ 0x0
   605                           
   606                           
   607                           ; 1 bytes @ 0x0
   608  0038                     	ds	3
   609  003B                     ??_sprintf:	
   610                           
   611                           ; 1 bytes @ 0x3
   612  003B                     	ds	3
   613  003E                     sprintf@ap:	
   614                           
   615                           ; 1 bytes @ 0x6
   616  003E                     	ds	1
   617  003F                     sprintf@flag:	
   618                           
   619                           ; 1 bytes @ 0x7
   620  003F                     	ds	1
   621  0040                     sprintf@prec:	
   622                           
   623                           ; 1 bytes @ 0x8
   624  0040                     	ds	1
   625  0041                     sprintf@val:	
   626                           
   627                           ; 2 bytes @ 0x9
   628  0041                     	ds	2
   629  0043                     sprintf@sp:	
   630                           
   631                           ; 1 bytes @ 0xB
   632  0043                     	ds	1
   633  0044                     sprintf@c:	
   634                           
   635                           ; 1 bytes @ 0xC
   636  0044                     	ds	1
   637  0045                     ??_main:	
   638                           
   639                           ; 1 bytes @ 0xD
   640  0045                     	ds	3
   641                           
   642                           	psect	maintext
   643  067C                     __pmaintext:	
   644 ;;
   645 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   646 ;;
   647 ;; *************** function _main *****************
   648 ;; Defined at:
   649 ;;		line 39 in file "main_stepper.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;		None
   654 ;; Return value:  Size  Location     Type
   655 ;;                  1    wreg      void 
   656 ;; Registers used:
   657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   658 ;; Tracked objects:
   659 ;;		On entry : B00/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   663 ;;      Params:         0       0       0       0       0
   664 ;;      Locals:         0       0       0       0       0
   665 ;;      Temps:          0       3       0       0       0
   666 ;;      Totals:         0       3       0       0       0
   667 ;;Total ram usage:        3 bytes
   668 ;; Hardware stack levels required when called:    2
   669 ;; This function calls:
   670 ;;		_ADC_begin
   671 ;;		_ADC_conversion
   672 ;;		_LCD8_begin
   673 ;;		_LCD8_clear
   674 ;;		_LCD8_set_cursor
   675 ;;		_LCD8_strWrite
   676 ;;		_oscilator_begin
   677 ;;		_sprintf
   678 ;;		_wave_step
   679 ;; This function is called by:
   680 ;;		Startup code after reset
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           
   685                           ;psect for function _main
   686  067C                     _main:	
   687                           
   688                           ;main_stepper.c: 41:     oscilator_begin(7);
   689                           
   690                           ;incstack = 0
   691                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   692  067C  3007               	movlw	7
   693  067D  120A  118A  2430  120A  118A  	fcall	_oscilator_begin
   694                           
   695                           ;main_stepper.c: 42:     ADC_begin(0,2);
   696  0682  3002               	movlw	2
   697  0683  1283               	bcf	3,5	;RP0=0, select bank0
   698  0684  1303               	bcf	3,6	;RP1=0, select bank0
   699  0685  00C5               	movwf	??_main
   700  0686  0845               	movf	??_main,w
   701  0687  00F3               	movwf	ADC_begin@freq
   702  0688  3000               	movlw	0
   703  0689  120A  118A  2479  120A  118A  	fcall	_ADC_begin
   704                           
   705                           ;main_stepper.c: 43:     TRISB = 0;
   706  068E  1683               	bsf	3,5	;RP0=1, select bank1
   707  068F  1303               	bcf	3,6	;RP1=0, select bank1
   708  0690  0186               	clrf	6	;volatile
   709                           
   710                           ;main_stepper.c: 44:     ANSELbits.ANS1 = 0;
   711  0691  1683               	bsf	3,5	;RP0=1, select bank3
   712  0692  1703               	bsf	3,6	;RP1=1, select bank3
   713  0693  1088               	bcf	8,1	;volatile
   714                           
   715                           ;main_stepper.c: 45:     ANSELbits.ANS2 = 0;
   716  0694  1108               	bcf	8,2	;volatile
   717                           
   718                           ;main_stepper.c: 46:     TRISA1 = 0;
   719  0695  1683               	bsf	3,5	;RP0=1, select bank1
   720  0696  1303               	bcf	3,6	;RP1=0, select bank1
   721  0697  1085               	bcf	5,1	;volatile
   722                           
   723                           ;main_stepper.c: 47:     TRISA2 = 0;
   724  0698  1105               	bcf	5,2	;volatile
   725                           
   726                           ;main_stepper.c: 48:     PORTA = 0;
   727  0699  1283               	bcf	3,5	;RP0=0, select bank0
   728  069A  1303               	bcf	3,6	;RP1=0, select bank0
   729  069B  0185               	clrf	5	;volatile
   730                           
   731                           ;main_stepper.c: 49:     PORTB = 0;
   732  069C  0186               	clrf	6	;volatile
   733                           
   734                           ;main_stepper.c: 50:     TRISD = 0;
   735  069D  1683               	bsf	3,5	;RP0=1, select bank1
   736  069E  1303               	bcf	3,6	;RP1=0, select bank1
   737  069F  0188               	clrf	8	;volatile
   738                           
   739                           ;main_stepper.c: 51:     PORTD = 0;
   740  06A0  1283               	bcf	3,5	;RP0=0, select bank0
   741  06A1  1303               	bcf	3,6	;RP1=0, select bank0
   742  06A2  0188               	clrf	8	;volatile
   743                           
   744                           ;main_stepper.c: 52:     LCD8_begin();
   745  06A3  120A  118A  2529  120A  118A  	fcall	_LCD8_begin
   746                           
   747                           ;main_stepper.c: 53:     LCD8_clear();
   748  06A8  120A  118A  240A  120A  118A  	fcall	_LCD8_clear
   749                           
   750                           ;main_stepper.c: 54:     LCD8_set_cursor(1,1);
   751  06AD  01F3               	clrf	LCD8_set_cursor@column
   752  06AE  0AF3               	incf	LCD8_set_cursor@column,f
   753  06AF  3001               	movlw	1
   754  06B0  120A  118A  2462  120A  118A  	fcall	_LCD8_set_cursor
   755                           
   756                           ;main_stepper.c: 55:     LCD8_strWrite("holaaa");
   757  06B5  3016               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   758  06B6  00F2               	movwf	LCD8_strWrite@data
   759  06B7  3080               	movlw	128
   760  06B8  00F3               	movwf	LCD8_strWrite@data+1
   761  06B9  120A  118A  2493  120A  118A  	fcall	_LCD8_strWrite
   762                           
   763                           ;main_stepper.c: 56:     _delay((unsigned long)((5000)*(8000000/4000.0)));
   764  06BE  3033               	movlw	51
   765  06BF  1283               	bcf	3,5	;RP0=0, select bank0
   766  06C0  1303               	bcf	3,6	;RP1=0, select bank0
   767  06C1  00C7               	movwf	??_main+2
   768  06C2  30BB               	movlw	187
   769  06C3  00C6               	movwf	??_main+1
   770  06C4  30DF               	movlw	223
   771  06C5  00C5               	movwf	??_main
   772  06C6                     u717:	
   773  06C6  0BC5               	decfsz	??_main,f
   774  06C7  2EC6               	goto	u717
   775  06C8  0BC6               	decfsz	??_main+1,f
   776  06C9  2EC6               	goto	u717
   777  06CA  0BC7               	decfsz	??_main+2,f
   778  06CB  2EC6               	goto	u717
   779  06CC                     l1450:	
   780                           
   781                           ;main_stepper.c: 58:     {;main_stepper.c: 59:         i++;
   782  06CC  3001               	movlw	1
   783  06CD  1283               	bcf	3,5	;RP0=0, select bank0
   784  06CE  1303               	bcf	3,6	;RP1=0, select bank0
   785  06CF  00C5               	movwf	??_main
   786  06D0  0845               	movf	??_main,w
   787  06D1  07A7               	addwf	_i,f
   788                           
   789                           ;main_stepper.c: 60:         LCD8_clear();
   790  06D2  120A  118A  240A  120A  118A  	fcall	_LCD8_clear
   791                           
   792                           ;main_stepper.c: 61:         adc_read = ADC_conversion();
   793  06D7  120A  118A  23FB  120A  118A  	fcall	_ADC_conversion
   794  06DC  1283               	bcf	3,5	;RP0=0, select bank0
   795  06DD  1303               	bcf	3,6	;RP1=0, select bank0
   796  06DE  00C5               	movwf	??_main
   797  06DF  0845               	movf	??_main,w
   798  06E0  00A8               	movwf	_adc_read
   799                           
   800                           ;main_stepper.c: 62:         step = adc_read*4U;
   801  06E1  0828               	movf	_adc_read,w
   802  06E2  00C5               	movwf	??_main
   803  06E3  01C6               	clrf	??_main+1
   804  06E4  1003               	clrc
   805  06E5  0DC5               	rlf	??_main,f
   806  06E6  0DC6               	rlf	??_main+1,f
   807  06E7  1003               	clrc
   808  06E8  0DC5               	rlf	??_main,f
   809  06E9  0DC6               	rlf	??_main+1,f
   810  06EA  0845               	movf	??_main,w
   811  06EB  00A4               	movwf	_step
   812  06EC  0846               	movf	??_main+1,w
   813  06ED  00A5               	movwf	_step+1
   814                           
   815                           ;main_stepper.c: 63:         sprintf(show," Step = %d",step);
   816  06EE  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   817  06EF  00C5               	movwf	??_main
   818  06F0  0845               	movf	??_main,w
   819  06F1  00B8               	movwf	sprintf@f
   820  06F2  0825               	movf	_step+1,w
   821  06F3  00BA               	movwf	?_sprintf+2
   822  06F4  0824               	movf	_step,w
   823  06F5  00B9               	movwf	?_sprintf+1
   824  06F6  3029               	movlw	(low (_show| 0))& (0+255)
   825  06F7  120A  118A  271D  120A  118A  	fcall	_sprintf
   826                           
   827                           ;main_stepper.c: 64:         LCD8_set_cursor(1,1);
   828  06FC  01F3               	clrf	LCD8_set_cursor@column
   829  06FD  0AF3               	incf	LCD8_set_cursor@column,f
   830  06FE  3001               	movlw	1
   831  06FF  120A  118A  2462  120A  118A  	fcall	_LCD8_set_cursor
   832                           
   833                           ;main_stepper.c: 65:         LCD8_strWrite(show);
   834  0704  3029               	movlw	(low (_show| 0))& (0+255)
   835  0705  00F2               	movwf	LCD8_strWrite@data
   836  0706  3000               	movlw	0
   837  0707  00F3               	movwf	LCD8_strWrite@data+1
   838  0708  120A  118A  2493  120A  118A  	fcall	_LCD8_strWrite
   839                           
   840                           ;main_stepper.c: 66:         if(i>200){
   841  070D  30C9               	movlw	201
   842  070E  1283               	bcf	3,5	;RP0=0, select bank0
   843  070F  1303               	bcf	3,6	;RP1=0, select bank0
   844  0710  0227               	subwf	_i,w
   845  0711  1C03               	skipc
   846  0712  2ECC               	goto	l1450
   847                           
   848                           ;main_stepper.c: 67:         wave_step(step);
   849  0713  0825               	movf	_step+1,w
   850  0714  00F1               	movwf	wave_step@steps+1
   851  0715  0824               	movf	_step,w
   852  0716  00F0               	movwf	wave_step@steps
   853  0717  120A  118A  257D  120A  118A  	fcall	_wave_step
   854  071C  2ECC               	goto	l1450
   855  071D                     __end_of_main:	
   856                           
   857                           	psect	text1
   858  057D                     __ptext1:	
   859 ;; *************** function _wave_step *****************
   860 ;; Defined at:
   861 ;;		line 35 in file "stepper.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;  steps           2    0[COMMON] unsigned int 
   864 ;; Auto vars:     Size  Location     Type
   865 ;;		None
   866 ;; Return value:  Size  Location     Type
   867 ;;                  1    wreg      void 
   868 ;; Registers used:
   869 ;;		wreg, status,2, status,0
   870 ;; Tracked objects:
   871 ;;		On entry : 0/0
   872 ;;		On exit  : 0/0
   873 ;;		Unchanged: 0/0
   874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   875 ;;      Params:         2       0       0       0       0
   876 ;;      Locals:         0       0       0       0       0
   877 ;;      Temps:          2       0       0       0       0
   878 ;;      Totals:         4       0       0       0       0
   879 ;;Total ram usage:        4 bytes
   880 ;; Hardware stack levels used:    1
   881 ;; This function calls:
   882 ;;		Nothing
   883 ;; This function is called by:
   884 ;;		_main
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           
   889                           ;psect for function _wave_step
   890  057D                     _wave_step:	
   891                           
   892                           ;stepper.c: 35: wave_step(uint16_t steps);stepper.c: 36:     {;stepper.c: 37:     static
      +                           uint16_t i, a;;stepper.c: 38:     i = 0;
   893                           
   894                           ;incstack = 0
   895                           ; Regs used in _wave_step: [wreg+status,2+status,0]
   896  057D  1283               	bcf	3,5	;RP0=0, select bank0
   897  057E  1303               	bcf	3,6	;RP1=0, select bank0
   898  057F  01A2               	clrf	wave_step@i
   899  0580  01A3               	clrf	wave_step@i+1
   900  0581                     l161:	
   901                           ;stepper.c: 59:         }
   902                           
   903                           ;stepper.c: 39:     while(i<steps)
   904                           
   905                           
   906                           ;stepper.c: 39:     while(i<steps)
   907  0581  0871               	movf	wave_step@steps+1,w
   908  0582  0223               	subwf	wave_step@i+1,w
   909  0583  1D03               	skipz
   910  0584  2D87               	goto	u645
   911  0585  0870               	movf	wave_step@steps,w
   912  0586  0222               	subwf	wave_step@i,w
   913  0587                     u645:	
   914  0587  1803               	btfsc	3,0
   915  0588  0008               	return
   916                           
   917                           ;stepper.c: 40:     {;stepper.c: 41:         a = i%4;
   918  0589  3003               	movlw	3
   919  058A  0522               	andwf	wave_step@i,w
   920  058B  00A0               	movwf	wave_step@a
   921  058C  3000               	movlw	0
   922  058D  0523               	andwf	wave_step@i+1,w
   923  058E  00A1               	movwf	wave_step@a+1
   924                           
   925                           ;stepper.c: 42:         if (a == 1){
   926  058F  0320               	decf	wave_step@a,w
   927  0590  0421               	iorwf	wave_step@a+1,w
   928  0591  1D03               	btfss	3,2
   929  0592  2D9E               	goto	l1382
   930                           
   931                           ;stepper.c: 43:             PORTD = 1;
   932  0593  3001               	movlw	1
   933  0594  0088               	movwf	8	;volatile
   934                           
   935                           ;stepper.c: 44:             _delay((unsigned long)((5)*(8000000/4000.0)));
   936  0595  300D               	movlw	13
   937  0596  00F3               	movwf	??_wave_step+1
   938  0597  30FB               	movlw	251
   939  0598  00F2               	movwf	??_wave_step
   940  0599                     u727:	
   941  0599  0BF2               	decfsz	??_wave_step,f
   942  059A  2D99               	goto	u727
   943  059B  0BF3               	decfsz	??_wave_step+1,f
   944  059C  2D99               	goto	u727
   945  059D  2D9E               	nop2
   946  059E                     l1382:	
   947                           
   948                           ;stepper.c: 46:         if (a == 2){
   949  059E  3002               	movlw	2
   950  059F  1283               	bcf	3,5	;RP0=0, select bank0
   951  05A0  1303               	bcf	3,6	;RP1=0, select bank0
   952  05A1  0620               	xorwf	wave_step@a,w
   953  05A2  0421               	iorwf	wave_step@a+1,w
   954  05A3  1D03               	btfss	3,2
   955  05A4  2DB0               	goto	l1386
   956                           
   957                           ;stepper.c: 47:             PORTD = 2;
   958  05A5  3002               	movlw	2
   959  05A6  0088               	movwf	8	;volatile
   960                           
   961                           ;stepper.c: 48:             _delay((unsigned long)((5)*(8000000/4000.0)));
   962  05A7  300D               	movlw	13
   963  05A8  00F3               	movwf	??_wave_step+1
   964  05A9  30FB               	movlw	251
   965  05AA  00F2               	movwf	??_wave_step
   966  05AB                     u737:	
   967  05AB  0BF2               	decfsz	??_wave_step,f
   968  05AC  2DAB               	goto	u737
   969  05AD  0BF3               	decfsz	??_wave_step+1,f
   970  05AE  2DAB               	goto	u737
   971  05AF  2DB0               	nop2
   972  05B0                     l1386:	
   973                           
   974                           ;stepper.c: 50:         if (a == 3){
   975  05B0  3003               	movlw	3
   976  05B1  1283               	bcf	3,5	;RP0=0, select bank0
   977  05B2  1303               	bcf	3,6	;RP1=0, select bank0
   978  05B3  0620               	xorwf	wave_step@a,w
   979  05B4  0421               	iorwf	wave_step@a+1,w
   980  05B5  1D03               	btfss	3,2
   981  05B6  2DC2               	goto	l1390
   982                           
   983                           ;stepper.c: 51:             PORTD = 4;
   984  05B7  3004               	movlw	4
   985  05B8  0088               	movwf	8	;volatile
   986                           
   987                           ;stepper.c: 52:             _delay((unsigned long)((5)*(8000000/4000.0)));
   988  05B9  300D               	movlw	13
   989  05BA  00F3               	movwf	??_wave_step+1
   990  05BB  30FB               	movlw	251
   991  05BC  00F2               	movwf	??_wave_step
   992  05BD                     u747:	
   993  05BD  0BF2               	decfsz	??_wave_step,f
   994  05BE  2DBD               	goto	u747
   995  05BF  0BF3               	decfsz	??_wave_step+1,f
   996  05C0  2DBD               	goto	u747
   997  05C1  2DC2               	nop2
   998  05C2                     l1390:	
   999                           
  1000                           ;stepper.c: 54:         if (a == 0){
  1001  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  1002  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  1003  05C4  0820               	movf	wave_step@a,w
  1004  05C5  0421               	iorwf	wave_step@a+1,w
  1005  05C6  1D03               	btfss	3,2
  1006  05C7  2DD3               	goto	l166
  1007                           
  1008                           ;stepper.c: 55:             PORTD = 8;
  1009  05C8  3008               	movlw	8
  1010  05C9  0088               	movwf	8	;volatile
  1011                           
  1012                           ;stepper.c: 56:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1013  05CA  300D               	movlw	13
  1014  05CB  00F3               	movwf	??_wave_step+1
  1015  05CC  30FB               	movlw	251
  1016  05CD  00F2               	movwf	??_wave_step
  1017  05CE                     u757:	
  1018  05CE  0BF2               	decfsz	??_wave_step,f
  1019  05CF  2DCE               	goto	u757
  1020  05D0  0BF3               	decfsz	??_wave_step+1,f
  1021  05D1  2DCE               	goto	u757
  1022  05D2  2DD3               	nop2
  1023  05D3                     l166:	
  1024                           ;stepper.c: 57:         }
  1025                           
  1026                           
  1027                           ;stepper.c: 58:         i++;
  1028  05D3  3001               	movlw	1
  1029  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  1030  05D5  1303               	bcf	3,6	;RP1=0, select bank0
  1031  05D6  07A2               	addwf	wave_step@i,f
  1032  05D7  1803               	skipnc
  1033  05D8  0AA3               	incf	wave_step@i+1,f
  1034  05D9  3000               	movlw	0
  1035  05DA  07A3               	addwf	wave_step@i+1,f
  1036  05DB  2D81               	goto	l161
  1037  05DC                     __end_of_wave_step:	
  1038                           
  1039                           	psect	text2
  1040  071D                     __ptext2:	
  1041 ;; *************** function _sprintf *****************
  1042 ;; Defined at:
  1043 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;  sp              1    wreg     PTR unsigned char 
  1046 ;;		 -> show(15), 
  1047 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1048 ;;		 -> STR_2(11), 
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1051 ;;		 -> show(15), 
  1052 ;;  tmpval          4    0        struct .
  1053 ;;  val             2    9[BANK0 ] unsigned int 
  1054 ;;  cp              2    0        PTR const unsigned char 
  1055 ;;  len             2    0        unsigned int 
  1056 ;;  c               1   12[BANK0 ] unsigned char 
  1057 ;;  prec            1    8[BANK0 ] char 
  1058 ;;  flag            1    7[BANK0 ] unsigned char 
  1059 ;;  ap              1    6[BANK0 ] PTR void [1]
  1060 ;;		 -> ?_sprintf(2), 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  2    0[BANK0 ] int 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1070 ;;      Params:         0       3       0       0       0
  1071 ;;      Locals:         0       7       0       0       0
  1072 ;;      Temps:          0       3       0       0       0
  1073 ;;      Totals:         0      13       0       0       0
  1074 ;;Total ram usage:       13 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    1
  1077 ;; This function calls:
  1078 ;;		___lwdiv
  1079 ;;		___lwmod
  1080 ;; This function is called by:
  1081 ;;		_main
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           
  1086                           ;psect for function _sprintf
  1087  071D                     _sprintf:	
  1088                           
  1089                           ;incstack = 0
  1090                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1091                           ;sprintf@sp stored from wreg
  1092  071D  1283               	bcf	3,5	;RP0=0, select bank0
  1093  071E  1303               	bcf	3,6	;RP1=0, select bank0
  1094  071F  00C3               	movwf	sprintf@sp
  1095                           
  1096                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  1097  0720  3039               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1098  0721  00BB               	movwf	??_sprintf
  1099  0722  083B               	movf	??_sprintf,w
  1100  0723  00BE               	movwf	sprintf@ap
  1101  0724                     l1364:	
  1102                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  1103                           
  1104                           
  1105                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  1106  0724  3001               	movlw	1
  1107  0725  07B8               	addwf	sprintf@f,f
  1108  0726  30FF               	movlw	-1
  1109  0727  0738               	addwf	sprintf@f,w
  1110  0728  0084               	movwf	4
  1111  0729  120A  118A  200D  120A  118A  	fcall	stringdir
  1112  072E  00BB               	movwf	??_sprintf
  1113  072F  083B               	movf	??_sprintf,w
  1114  0730  00C4               	movwf	sprintf@c
  1115  0731  0844               	movf	sprintf@c,w
  1116  0732  1903               	btfsc	3,2
  1117  0733  2FF0               	goto	l1366
  1118                           
  1119                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  1120  0734  3025               	movlw	37
  1121  0735  0644               	xorwf	sprintf@c,w
  1122  0736  1903               	btfsc	3,2
  1123  0737  2F44               	goto	l1320
  1124                           
  1125                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  1126  0738  0844               	movf	sprintf@c,w
  1127  0739  00BB               	movwf	??_sprintf
  1128  073A  0843               	movf	sprintf@sp,w
  1129  073B  0084               	movwf	4
  1130  073C  083B               	movf	??_sprintf,w
  1131  073D  1383               	bcf	3,7	;select IRP bank0
  1132  073E  0080               	movwf	0
  1133  073F  3001               	movlw	1
  1134  0740  00BB               	movwf	??_sprintf
  1135  0741  083B               	movf	??_sprintf,w
  1136  0742  07C3               	addwf	sprintf@sp,f
  1137                           
  1138                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  1139  0743  2F24               	goto	l1364
  1140  0744                     l1320:	
  1141                           
  1142                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  1143  0744  01BF               	clrf	sprintf@flag
  1144                           
  1145                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  1146  0745  3001               	movlw	1
  1147  0746  07B8               	addwf	sprintf@f,f
  1148  0747  30FF               	movlw	-1
  1149  0748  0738               	addwf	sprintf@f,w
  1150  0749  0084               	movwf	4
  1151  074A  120A  118A  200D  120A  118A  	fcall	stringdir
  1152  074F  00C4               	movwf	sprintf@c
  1153  0750  00BB               	movwf	??_sprintf
  1154  0751  01BC               	clrf	??_sprintf+1
  1155                           
  1156                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1157                           ; Switch size 1, requested type "simple"
  1158                           ; Number of cases is 1, Range of values is 0 to 0
  1159                           ; switch strategies available:
  1160                           ; Name         Instructions Cycles
  1161                           ; simple_byte            4     3 (average)
  1162                           ; direct_byte           11     8 (fixed)
  1163                           ; jumptable            260     6 (fixed)
  1164                           ;	Chosen strategy is simple_byte
  1165  0752  083C               	movf	??_sprintf+1,w
  1166  0753  3A00               	xorlw	0	; case 0
  1167  0754  1903               	skipnz
  1168  0755  2F57               	goto	l1530
  1169  0756  2F24               	goto	l1364
  1170  0757                     l1530:	
  1171                           
  1172                           ; Switch size 1, requested type "simple"
  1173                           ; Number of cases is 3, Range of values is 0 to 105
  1174                           ; switch strategies available:
  1175                           ; Name         Instructions Cycles
  1176                           ; simple_byte           10     6 (average)
  1177                           ; jumptable            260     6 (fixed)
  1178                           ;	Chosen strategy is simple_byte
  1179  0757  083B               	movf	??_sprintf,w
  1180  0758  3A00               	xorlw	0	; case 0
  1181  0759  1903               	skipnz
  1182  075A  2FF0               	goto	l1366
  1183  075B  3A64               	xorlw	100	; case 100
  1184  075C  1903               	skipnz
  1185  075D  2F62               	goto	l1326
  1186  075E  3A0D               	xorlw	13	; case 105
  1187  075F  1903               	skipnz
  1188  0760  2F62               	goto	l1326
  1189  0761  2F24               	goto	l1364
  1190  0762                     l1326:	
  1191                           
  1192                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1193  0762  083E               	movf	sprintf@ap,w
  1194  0763  0084               	movwf	4
  1195  0764  1383               	bcf	3,7	;select IRP bank0
  1196  0765  0800               	movf	0,w
  1197  0766  00C1               	movwf	sprintf@val
  1198  0767  0A84               	incf	4,f
  1199  0768  0800               	movf	0,w
  1200  0769  00C2               	movwf	sprintf@val+1
  1201  076A  3002               	movlw	2
  1202  076B  00BB               	movwf	??_sprintf
  1203  076C  083B               	movf	??_sprintf,w
  1204  076D  07BE               	addwf	sprintf@ap,f
  1205                           
  1206                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  1207  076E  1FC2               	btfss	sprintf@val+1,7
  1208  076F  2F79               	goto	l1336
  1209                           
  1210                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  1211  0770  3003               	movlw	3
  1212  0771  00BB               	movwf	??_sprintf
  1213  0772  083B               	movf	??_sprintf,w
  1214  0773  04BF               	iorwf	sprintf@flag,f
  1215                           
  1216                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  1217  0774  09C1               	comf	sprintf@val,f
  1218  0775  09C2               	comf	sprintf@val+1,f
  1219  0776  0AC1               	incf	sprintf@val,f
  1220  0777  1903               	skipnz
  1221  0778  0AC2               	incf	sprintf@val+1,f
  1222  0779                     l1336:	
  1223                           
  1224                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1225  0779  01C4               	clrf	sprintf@c
  1226  077A  0AC4               	incf	sprintf@c,f
  1227  077B                     l1342:	
  1228                           
  1229                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  1230  077B  0844               	movf	sprintf@c,w
  1231  077C  00BB               	movwf	??_sprintf
  1232  077D  073B               	addwf	??_sprintf,w
  1233  077E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1234  077F  0084               	movwf	4
  1235  0780  120A  118A  200D  120A  118A  	fcall	stringdir
  1236  0785  00BC               	movwf	??_sprintf+1
  1237  0786  120A  118A  200D  120A  118A  	fcall	stringdir
  1238  078B  00BD               	movwf	??_sprintf+2
  1239  078C  083D               	movf	??_sprintf+2,w
  1240  078D  0242               	subwf	sprintf@val+1,w
  1241  078E  1D03               	skipz
  1242  078F  2F92               	goto	u555
  1243  0790  083C               	movf	??_sprintf+1,w
  1244  0791  0241               	subwf	sprintf@val,w
  1245  0792                     u555:	
  1246  0792  1C03               	btfss	3,0
  1247  0793  2F9C               	goto	l1348
  1248  0794  3001               	movlw	1
  1249  0795  00BB               	movwf	??_sprintf
  1250  0796  083B               	movf	??_sprintf,w
  1251  0797  07C4               	addwf	sprintf@c,f
  1252  0798  3005               	movlw	5
  1253  0799  0644               	xorwf	sprintf@c,w
  1254  079A  1D03               	btfss	3,2
  1255  079B  2F7B               	goto	l1342
  1256  079C                     l1348:	
  1257                           
  1258                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  1259  079C  083F               	movf	sprintf@flag,w
  1260  079D  3903               	andlw	3
  1261  079E  1903               	btfsc	3,2
  1262  079F  2FAB               	goto	l1354
  1263                           
  1264                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  1265  07A0  302D               	movlw	45
  1266  07A1  00BB               	movwf	??_sprintf
  1267  07A2  0843               	movf	sprintf@sp,w
  1268  07A3  0084               	movwf	4
  1269  07A4  083B               	movf	??_sprintf,w
  1270  07A5  1383               	bcf	3,7	;select IRP bank0
  1271  07A6  0080               	movwf	0
  1272  07A7  3001               	movlw	1
  1273  07A8  00BB               	movwf	??_sprintf
  1274  07A9  083B               	movf	??_sprintf,w
  1275  07AA  07C3               	addwf	sprintf@sp,f
  1276  07AB                     l1354:	
  1277                           
  1278                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  1279  07AB  0844               	movf	sprintf@c,w
  1280  07AC  00BB               	movwf	??_sprintf
  1281  07AD  083B               	movf	??_sprintf,w
  1282  07AE  00C0               	movwf	sprintf@prec
  1283  07AF                     l1362:	
  1284                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  1285                           
  1286                           
  1287                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  1288  07AF  30FF               	movlw	255
  1289  07B0  00BB               	movwf	??_sprintf
  1290  07B1  083B               	movf	??_sprintf,w
  1291  07B2  07C0               	addwf	sprintf@prec,f
  1292  07B3  0A40               	incf	sprintf@prec,w
  1293  07B4  1903               	btfsc	3,2
  1294  07B5  2F24               	goto	l1364
  1295                           
  1296                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  1297  07B6  300A               	movlw	10
  1298  07B7  00F8               	movwf	___lwmod@divisor
  1299  07B8  3000               	movlw	0
  1300  07B9  00F9               	movwf	___lwmod@divisor+1
  1301  07BA  0840               	movf	sprintf@prec,w
  1302  07BB  00BB               	movwf	??_sprintf
  1303  07BC  073B               	addwf	??_sprintf,w
  1304  07BD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1305  07BE  0084               	movwf	4
  1306  07BF  120A  118A  200D  120A  118A  	fcall	stringdir
  1307  07C4  00F0               	movwf	___lwdiv@divisor
  1308  07C5  120A  118A  200D  120A  118A  	fcall	stringdir
  1309  07CA  00F1               	movwf	___lwdiv@divisor+1
  1310  07CB  0842               	movf	sprintf@val+1,w
  1311  07CC  00F3               	movwf	___lwdiv@dividend+1
  1312  07CD  0841               	movf	sprintf@val,w
  1313  07CE  00F2               	movwf	___lwdiv@dividend
  1314  07CF  120A  118A  24ED  120A  118A  	fcall	___lwdiv
  1315  07D4  0871               	movf	?___lwdiv+1,w
  1316  07D5  00FB               	movwf	___lwmod@dividend+1
  1317  07D6  0870               	movf	?___lwdiv,w
  1318  07D7  00FA               	movwf	___lwmod@dividend
  1319  07D8  120A  118A  24BB  120A  118A  	fcall	___lwmod
  1320  07DD  0878               	movf	?___lwmod,w
  1321  07DE  3E30               	addlw	48
  1322  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  1323  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  1324  07E1  00BC               	movwf	??_sprintf+1
  1325  07E2  083C               	movf	??_sprintf+1,w
  1326  07E3  00C4               	movwf	sprintf@c
  1327                           
  1328                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  1329  07E4  0844               	movf	sprintf@c,w
  1330  07E5  00BB               	movwf	??_sprintf
  1331  07E6  0843               	movf	sprintf@sp,w
  1332  07E7  0084               	movwf	4
  1333  07E8  083B               	movf	??_sprintf,w
  1334  07E9  1383               	bcf	3,7	;select IRP bank0
  1335  07EA  0080               	movwf	0
  1336  07EB  3001               	movlw	1
  1337  07EC  00BB               	movwf	??_sprintf
  1338  07ED  083B               	movf	??_sprintf,w
  1339  07EE  07C3               	addwf	sprintf@sp,f
  1340  07EF  2FAF               	goto	l1362
  1341  07F0                     l1366:	
  1342                           
  1343                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  1344  07F0  0843               	movf	sprintf@sp,w
  1345  07F1  0084               	movwf	4
  1346  07F2  1383               	bcf	3,7	;select IRP bank0
  1347  07F3  0180               	clrf	0
  1348  07F4  0008               	return
  1349  07F5                     __end_of_sprintf:	
  1350                           
  1351                           	psect	text3
  1352  04BB                     __ptext3:	
  1353 ;; *************** function ___lwmod *****************
  1354 ;; Defined at:
  1355 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;  divisor         2    8[COMMON] unsigned int 
  1358 ;;  dividend        2   10[COMMON] unsigned int 
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;  counter         1   13[COMMON] unsigned char 
  1361 ;; Return value:  Size  Location     Type
  1362 ;;                  2    8[COMMON] unsigned int 
  1363 ;; Registers used:
  1364 ;;		wreg, status,2, status,0
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1370 ;;      Params:         4       0       0       0       0
  1371 ;;      Locals:         1       0       0       0       0
  1372 ;;      Temps:          1       0       0       0       0
  1373 ;;      Totals:         6       0       0       0       0
  1374 ;;Total ram usage:        6 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; This function calls:
  1377 ;;		Nothing
  1378 ;; This function is called by:
  1379 ;;		_sprintf
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           
  1384                           ;psect for function ___lwmod
  1385  04BB                     ___lwmod:	
  1386                           
  1387                           ;incstack = 0
  1388                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1389  04BB  0878               	movf	___lwmod@divisor,w
  1390  04BC  0479               	iorwf	___lwmod@divisor+1,w
  1391  04BD  1903               	btfsc	3,2
  1392  04BE  2CE8               	goto	l1236
  1393  04BF  01FD               	clrf	___lwmod@counter
  1394  04C0  0AFD               	incf	___lwmod@counter,f
  1395  04C1                     l1226:	
  1396  04C1  1BF9               	btfsc	___lwmod@divisor+1,7
  1397  04C2  2CCF               	goto	l1228
  1398  04C3  3001               	movlw	1
  1399  04C4                     u445:	
  1400  04C4  1003               	clrc
  1401  04C5  0DF8               	rlf	___lwmod@divisor,f
  1402  04C6  0DF9               	rlf	___lwmod@divisor+1,f
  1403  04C7  3EFF               	addlw	-1
  1404  04C8  1D03               	skipz
  1405  04C9  2CC4               	goto	u445
  1406  04CA  3001               	movlw	1
  1407  04CB  00FC               	movwf	??___lwmod
  1408  04CC  087C               	movf	??___lwmod,w
  1409  04CD  07FD               	addwf	___lwmod@counter,f
  1410  04CE  2CC1               	goto	l1226
  1411  04CF                     l1228:	
  1412  04CF  0879               	movf	___lwmod@divisor+1,w
  1413  04D0  027B               	subwf	___lwmod@dividend+1,w
  1414  04D1  1D03               	skipz
  1415  04D2  2CD5               	goto	u465
  1416  04D3  0878               	movf	___lwmod@divisor,w
  1417  04D4  027A               	subwf	___lwmod@dividend,w
  1418  04D5                     u465:	
  1419  04D5  1C03               	skipc
  1420  04D6  2CDD               	goto	l1232
  1421  04D7  0878               	movf	___lwmod@divisor,w
  1422  04D8  02FA               	subwf	___lwmod@dividend,f
  1423  04D9  0879               	movf	___lwmod@divisor+1,w
  1424  04DA  1C03               	skipc
  1425  04DB  03FB               	decf	___lwmod@dividend+1,f
  1426  04DC  02FB               	subwf	___lwmod@dividend+1,f
  1427  04DD                     l1232:	
  1428  04DD  3001               	movlw	1
  1429  04DE                     u475:	
  1430  04DE  1003               	clrc
  1431  04DF  0CF9               	rrf	___lwmod@divisor+1,f
  1432  04E0  0CF8               	rrf	___lwmod@divisor,f
  1433  04E1  3EFF               	addlw	-1
  1434  04E2  1D03               	skipz
  1435  04E3  2CDE               	goto	u475
  1436  04E4  3001               	movlw	1
  1437  04E5  02FD               	subwf	___lwmod@counter,f
  1438  04E6  1D03               	btfss	3,2
  1439  04E7  2CCF               	goto	l1228
  1440  04E8                     l1236:	
  1441  04E8  087B               	movf	___lwmod@dividend+1,w
  1442  04E9  00F9               	movwf	?___lwmod+1
  1443  04EA  087A               	movf	___lwmod@dividend,w
  1444  04EB  00F8               	movwf	?___lwmod
  1445  04EC  0008               	return
  1446  04ED                     __end_of___lwmod:	
  1447                           
  1448                           	psect	text4
  1449  04ED                     __ptext4:	
  1450 ;; *************** function ___lwdiv *****************
  1451 ;; Defined at:
  1452 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;  divisor         2    0[COMMON] unsigned int 
  1455 ;;  dividend        2    2[COMMON] unsigned int 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  quotient        2    5[COMMON] unsigned int 
  1458 ;;  counter         1    7[COMMON] unsigned char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  2    0[COMMON] unsigned int 
  1461 ;; Registers used:
  1462 ;;		wreg, status,2, status,0
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1468 ;;      Params:         4       0       0       0       0
  1469 ;;      Locals:         3       0       0       0       0
  1470 ;;      Temps:          1       0       0       0       0
  1471 ;;      Totals:         8       0       0       0       0
  1472 ;;Total ram usage:        8 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; This function calls:
  1475 ;;		Nothing
  1476 ;; This function is called by:
  1477 ;;		_sprintf
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           
  1482                           ;psect for function ___lwdiv
  1483  04ED                     ___lwdiv:	
  1484                           
  1485                           ;incstack = 0
  1486                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1487  04ED  01F5               	clrf	___lwdiv@quotient
  1488  04EE  01F6               	clrf	___lwdiv@quotient+1
  1489  04EF  0870               	movf	___lwdiv@divisor,w
  1490  04F0  0471               	iorwf	___lwdiv@divisor+1,w
  1491  04F1  1903               	btfsc	3,2
  1492  04F2  2D24               	goto	l1214
  1493  04F3  01F7               	clrf	___lwdiv@counter
  1494  04F4  0AF7               	incf	___lwdiv@counter,f
  1495  04F5                     l1202:	
  1496  04F5  1BF1               	btfsc	___lwdiv@divisor+1,7
  1497  04F6  2D03               	goto	l1204
  1498  04F7  3001               	movlw	1
  1499  04F8                     u375:	
  1500  04F8  1003               	clrc
  1501  04F9  0DF0               	rlf	___lwdiv@divisor,f
  1502  04FA  0DF1               	rlf	___lwdiv@divisor+1,f
  1503  04FB  3EFF               	addlw	-1
  1504  04FC  1D03               	skipz
  1505  04FD  2CF8               	goto	u375
  1506  04FE  3001               	movlw	1
  1507  04FF  00F4               	movwf	??___lwdiv
  1508  0500  0874               	movf	??___lwdiv,w
  1509  0501  07F7               	addwf	___lwdiv@counter,f
  1510  0502  2CF5               	goto	l1202
  1511  0503                     l1204:	
  1512  0503  3001               	movlw	1
  1513  0504                     u395:	
  1514  0504  1003               	clrc
  1515  0505  0DF5               	rlf	___lwdiv@quotient,f
  1516  0506  0DF6               	rlf	___lwdiv@quotient+1,f
  1517  0507  3EFF               	addlw	-1
  1518  0508  1D03               	skipz
  1519  0509  2D04               	goto	u395
  1520  050A  0871               	movf	___lwdiv@divisor+1,w
  1521  050B  0273               	subwf	___lwdiv@dividend+1,w
  1522  050C  1D03               	skipz
  1523  050D  2D10               	goto	u405
  1524  050E  0870               	movf	___lwdiv@divisor,w
  1525  050F  0272               	subwf	___lwdiv@dividend,w
  1526  0510                     u405:	
  1527  0510  1C03               	skipc
  1528  0511  2D19               	goto	l1210
  1529  0512  0870               	movf	___lwdiv@divisor,w
  1530  0513  02F2               	subwf	___lwdiv@dividend,f
  1531  0514  0871               	movf	___lwdiv@divisor+1,w
  1532  0515  1C03               	skipc
  1533  0516  03F3               	decf	___lwdiv@dividend+1,f
  1534  0517  02F3               	subwf	___lwdiv@dividend+1,f
  1535  0518  1475               	bsf	___lwdiv@quotient,0
  1536  0519                     l1210:	
  1537  0519  3001               	movlw	1
  1538  051A                     u415:	
  1539  051A  1003               	clrc
  1540  051B  0CF1               	rrf	___lwdiv@divisor+1,f
  1541  051C  0CF0               	rrf	___lwdiv@divisor,f
  1542  051D  3EFF               	addlw	-1
  1543  051E  1D03               	skipz
  1544  051F  2D1A               	goto	u415
  1545  0520  3001               	movlw	1
  1546  0521  02F7               	subwf	___lwdiv@counter,f
  1547  0522  1D03               	btfss	3,2
  1548  0523  2D03               	goto	l1204
  1549  0524                     l1214:	
  1550  0524  0876               	movf	___lwdiv@quotient+1,w
  1551  0525  00F1               	movwf	?___lwdiv+1
  1552  0526  0875               	movf	___lwdiv@quotient,w
  1553  0527  00F0               	movwf	?___lwdiv
  1554  0528  0008               	return
  1555  0529                     __end_of___lwdiv:	
  1556                           
  1557                           	psect	text5
  1558  0430                     __ptext5:	
  1559 ;; *************** function _oscilator_begin *****************
  1560 ;; Defined at:
  1561 ;;		line 9 in file "./Oscilator.h"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;  freq            1    wreg     unsigned char 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  freq            1    1[COMMON] unsigned char 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  1    wreg      void 
  1568 ;; Registers used:
  1569 ;;		wreg, status,2, status,0
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1575 ;;      Params:         0       0       0       0       0
  1576 ;;      Locals:         1       0       0       0       0
  1577 ;;      Temps:          1       0       0       0       0
  1578 ;;      Totals:         2       0       0       0       0
  1579 ;;Total ram usage:        2 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_main
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           
  1589                           ;psect for function _oscilator_begin
  1590  0430                     _oscilator_begin:	
  1591                           
  1592                           ;incstack = 0
  1593                           ; Regs used in _oscilator_begin: [wreg+status,2+status,0]
  1594                           ;oscilator_begin@freq stored from wreg
  1595  0430  00F1               	movwf	oscilator_begin@freq
  1596                           
  1597                           ;./Oscilator.h: 10:     OSCCONbits.IRCF = freq;
  1598  0431  0871               	movf	oscilator_begin@freq,w
  1599  0432  00F0               	movwf	??_oscilator_begin
  1600  0433  0EF0               	swapf	??_oscilator_begin,f
  1601  0434  1683               	bsf	3,5	;RP0=1, select bank1
  1602  0435  1303               	bcf	3,6	;RP1=0, select bank1
  1603  0436  080F               	movf	15,w	;volatile
  1604  0437  0670               	xorwf	??_oscilator_begin,w
  1605  0438  398F               	andlw	-113
  1606  0439  0670               	xorwf	??_oscilator_begin,w
  1607  043A  008F               	movwf	15	;volatile
  1608                           
  1609                           ;./Oscilator.h: 11:     OSCCONbits.SCS = 1;
  1610  043B  140F               	bsf	15,0	;volatile
  1611                           
  1612                           ;./Oscilator.h: 12:     OSCCONbits.OSTS = 0;
  1613  043C  118F               	bcf	15,3	;volatile
  1614  043D  0008               	return
  1615  043E                     __end_of_oscilator_begin:	
  1616                           
  1617                           	psect	text6
  1618  0493                     __ptext6:	
  1619 ;; *************** function _LCD8_strWrite *****************
  1620 ;; Defined at:
  1621 ;;		line 55 in file "./LCD8bit.h"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;  data            2    2[COMMON] PTR unsigned char 
  1624 ;;		 -> show(15), STR_1(7), 
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  i               1    5[COMMON] unsigned char 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      void 
  1629 ;; Registers used:
  1630 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1636 ;;      Params:         2       0       0       0       0
  1637 ;;      Locals:         1       0       0       0       0
  1638 ;;      Temps:          1       0       0       0       0
  1639 ;;      Totals:         4       0       0       0       0
  1640 ;;Total ram usage:        4 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    1
  1643 ;; This function calls:
  1644 ;;		_LCD8_write
  1645 ;; This function is called by:
  1646 ;;		_main
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           
  1651                           ;psect for function _LCD8_strWrite
  1652  0493                     _LCD8_strWrite:	
  1653                           
  1654                           ;./LCD8bit.h: 56:     char i;;./LCD8bit.h: 57:         for(i=0; data[i] !='\0';i++ )
  1655                           
  1656                           ;incstack = 0
  1657                           ; Regs used in _LCD8_strWrite: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1658  0493  01F5               	clrf	LCD8_strWrite@i
  1659  0494                     l1304:	
  1660  0494  0875               	movf	LCD8_strWrite@i,w
  1661  0495  0772               	addwf	LCD8_strWrite@data,w
  1662  0496  0084               	movwf	4
  1663  0497  0873               	movf	LCD8_strWrite@data+1,w
  1664  0498  1803               	skipnc
  1665  0499  0A73               	incf	LCD8_strWrite@data+1,w
  1666  049A  1283               	bcf	3,5	;RP0=0, select bank0
  1667  049B  1303               	bcf	3,6	;RP1=0, select bank0
  1668  049C  00FF               	movwf	127
  1669  049D  120A  118A  2003  120A  118A  	fcall	stringtab
  1670  04A2  3A00               	xorlw	0
  1671  04A3  1903               	btfsc	3,2
  1672  04A4  0008               	return
  1673                           
  1674                           ;./LCD8bit.h: 58:             LCD8_write(data[i]);
  1675  04A5  0875               	movf	LCD8_strWrite@i,w
  1676  04A6  0772               	addwf	LCD8_strWrite@data,w
  1677  04A7  0084               	movwf	4
  1678  04A8  0873               	movf	LCD8_strWrite@data+1,w
  1679  04A9  1803               	skipnc
  1680  04AA  0A73               	incf	LCD8_strWrite@data+1,w
  1681  04AB  00FF               	movwf	127
  1682  04AC  120A  118A  2003  120A  118A  	fcall	stringtab
  1683  04B1  120A  118A  243E  120A  118A  	fcall	_LCD8_write
  1684  04B6  3001               	movlw	1
  1685  04B7  00F4               	movwf	??_LCD8_strWrite
  1686  04B8  0874               	movf	??_LCD8_strWrite,w
  1687  04B9  07F5               	addwf	LCD8_strWrite@i,f
  1688  04BA  2C94               	goto	l1304
  1689  04BB                     __end_of_LCD8_strWrite:	
  1690                           
  1691                           	psect	text7
  1692  043E                     __ptext7:	
  1693 ;; *************** function _LCD8_write *****************
  1694 ;; Defined at:
  1695 ;;		line 4 in file "./LCD8bit.h"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;  data            1    wreg     unsigned char 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  data            1    1[COMMON] unsigned char 
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1709 ;;      Params:         0       0       0       0       0
  1710 ;;      Locals:         1       0       0       0       0
  1711 ;;      Temps:          1       0       0       0       0
  1712 ;;      Totals:         2       0       0       0       0
  1713 ;;Total ram usage:        2 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; This function calls:
  1716 ;;		Nothing
  1717 ;; This function is called by:
  1718 ;;		_LCD8_strWrite
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           
  1723                           ;psect for function _LCD8_write
  1724  043E                     _LCD8_write:	
  1725                           
  1726                           ;incstack = 0
  1727                           ; Regs used in _LCD8_write: [wreg]
  1728                           ;LCD8_write@data stored from wreg
  1729  043E  00F1               	movwf	LCD8_write@data
  1730                           
  1731                           ;./LCD8bit.h: 5:     RA2 = 1;
  1732  043F  1283               	bcf	3,5	;RP0=0, select bank0
  1733  0440  1303               	bcf	3,6	;RP1=0, select bank0
  1734  0441  1505               	bsf	5,2	;volatile
  1735                           
  1736                           ;./LCD8bit.h: 6:     PORTB = data;
  1737  0442  0871               	movf	LCD8_write@data,w
  1738  0443  0086               	movwf	6	;volatile
  1739                           
  1740                           ;./LCD8bit.h: 7:     RA1 = 1;
  1741  0444  1485               	bsf	5,1	;volatile
  1742                           
  1743                           ;./LCD8bit.h: 8:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  1744  0445  301A               	movlw	26
  1745  0446  00F0               	movwf	??_LCD8_write
  1746  0447                     u767:	
  1747  0447  0BF0               	decfsz	??_LCD8_write,f
  1748  0448  2C47               	goto	u767
  1749  0449  0000               	nop
  1750                           
  1751                           ;./LCD8bit.h: 9:     RA1 = 0;
  1752  044A  1283               	bcf	3,5	;RP0=0, select bank0
  1753  044B  1303               	bcf	3,6	;RP1=0, select bank0
  1754  044C  1085               	bcf	5,1	;volatile
  1755  044D  0008               	return
  1756  044E                     __end_of_LCD8_write:	
  1757                           
  1758                           	psect	text8
  1759  0462                     __ptext8:	
  1760 ;; *************** function _LCD8_set_cursor *****************
  1761 ;; Defined at:
  1762 ;;		line 21 in file "./LCD8bit.h"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  row             1    wreg     unsigned char 
  1765 ;;  column          1    3[COMMON] unsigned char 
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;  row             1    6[COMMON] unsigned char 
  1768 ;;  cursor          1    5[COMMON] unsigned char 
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  1    wreg      void 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0, pclath, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1778 ;;      Params:         1       0       0       0       0
  1779 ;;      Locals:         2       0       0       0       0
  1780 ;;      Temps:          1       0       0       0       0
  1781 ;;      Totals:         4       0       0       0       0
  1782 ;;Total ram usage:        4 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    1
  1785 ;; This function calls:
  1786 ;;		_LCD8_cmd
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           
  1793                           ;psect for function _LCD8_set_cursor
  1794  0462                     _LCD8_set_cursor:	
  1795                           
  1796                           ;incstack = 0
  1797                           ; Regs used in _LCD8_set_cursor: [wreg+status,2+status,0+pclath+cstack]
  1798                           ;LCD8_set_cursor@row stored from wreg
  1799  0462  00F6               	movwf	LCD8_set_cursor@row
  1800                           
  1801                           ;./LCD8bit.h: 22:     char cursor;;./LCD8bit.h: 24:         if(row==1)
  1802  0463  0376               	decf	LCD8_set_cursor@row,w
  1803  0464  1D03               	btfss	3,2
  1804  0465  2C6B               	goto	l98
  1805                           
  1806                           ;./LCD8bit.h: 25:             cursor = 128 + column -1;
  1807  0466  0873               	movf	LCD8_set_cursor@column,w
  1808  0467  3E7F               	addlw	127
  1809  0468  00F4               	movwf	??_LCD8_set_cursor
  1810  0469  0874               	movf	??_LCD8_set_cursor,w
  1811  046A  00F5               	movwf	LCD8_set_cursor@cursor
  1812  046B                     l98:	
  1813                           
  1814                           ;./LCD8bit.h: 26:         if (row==2)
  1815  046B  3002               	movlw	2
  1816  046C  0676               	xorwf	LCD8_set_cursor@row,w
  1817  046D  1D03               	btfss	3,2
  1818  046E  2C74               	goto	l1266
  1819                           
  1820                           ;./LCD8bit.h: 27:             cursor = 192 + column -1;
  1821  046F  0873               	movf	LCD8_set_cursor@column,w
  1822  0470  3EBF               	addlw	191
  1823  0471  00F4               	movwf	??_LCD8_set_cursor
  1824  0472  0874               	movf	??_LCD8_set_cursor,w
  1825  0473  00F5               	movwf	LCD8_set_cursor@cursor
  1826  0474                     l1266:	
  1827                           
  1828                           ;./LCD8bit.h: 29:         LCD8_cmd(cursor);
  1829  0474  0875               	movf	LCD8_set_cursor@cursor,w
  1830  0475  120A  118A  244E   	fcall	_LCD8_cmd
  1831  0478  0008               	return
  1832  0479                     __end_of_LCD8_set_cursor:	
  1833                           
  1834                           	psect	text9
  1835  040A                     __ptext9:	
  1836 ;; *************** function _LCD8_clear *****************
  1837 ;; Defined at:
  1838 ;;		line 32 in file "./LCD8bit.h"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;		None
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;		None
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  1    wreg      void 
  1845 ;; Registers used:
  1846 ;;		wreg, status,2, status,0, pclath, cstack
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1852 ;;      Params:         0       0       0       0       0
  1853 ;;      Locals:         0       0       0       0       0
  1854 ;;      Temps:          0       0       0       0       0
  1855 ;;      Totals:         0       0       0       0       0
  1856 ;;Total ram usage:        0 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; Hardware stack levels required when called:    1
  1859 ;; This function calls:
  1860 ;;		_LCD8_cmd
  1861 ;; This function is called by:
  1862 ;;		_main
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           
  1867                           ;psect for function _LCD8_clear
  1868  040A                     _LCD8_clear:	
  1869                           
  1870                           ;./LCD8bit.h: 33:     LCD8_cmd(0);
  1871                           
  1872                           ;incstack = 0
  1873                           ; Regs used in _LCD8_clear: [wreg+status,2+status,0+pclath+cstack]
  1874  040A  3000               	movlw	0
  1875  040B  120A  118A  244E  120A  118A  	fcall	_LCD8_cmd
  1876                           
  1877                           ;./LCD8bit.h: 34:     LCD8_cmd(1);
  1878  0410  3001               	movlw	1
  1879  0411  120A  118A  244E   	fcall	_LCD8_cmd
  1880  0414  0008               	return
  1881  0415                     __end_of_LCD8_clear:	
  1882                           
  1883                           	psect	text10
  1884  0529                     __ptext10:	
  1885 ;; *************** function _LCD8_begin *****************
  1886 ;; Defined at:
  1887 ;;		line 37 in file "./LCD8bit.h"
  1888 ;; Parameters:    Size  Location     Type
  1889 ;;		None
  1890 ;; Auto vars:     Size  Location     Type
  1891 ;;		None
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  1    wreg      void 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, status,0, pclath, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1901 ;;      Params:         0       0       0       0       0
  1902 ;;      Locals:         0       0       0       0       0
  1903 ;;      Temps:          2       0       0       0       0
  1904 ;;      Totals:         2       0       0       0       0
  1905 ;;Total ram usage:        2 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    1
  1908 ;; This function calls:
  1909 ;;		_LCD8_cmd
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           
  1916                           ;psect for function _LCD8_begin
  1917  0529                     _LCD8_begin:	
  1918                           
  1919                           ;./LCD8bit.h: 38:     PORTB = 0;
  1920                           
  1921                           ;incstack = 0
  1922                           ; Regs used in _LCD8_begin: [wreg+status,2+status,0+pclath+cstack]
  1923  0529  1283               	bcf	3,5	;RP0=0, select bank0
  1924  052A  1303               	bcf	3,6	;RP1=0, select bank0
  1925  052B  0186               	clrf	6	;volatile
  1926                           
  1927                           ;./LCD8bit.h: 39:     _delay((unsigned long)((20)*(8000000/4000.0)));
  1928  052C  3034               	movlw	52
  1929  052D  00F4               	movwf	??_LCD8_begin+1
  1930  052E  30F1               	movlw	241
  1931  052F  00F3               	movwf	??_LCD8_begin
  1932  0530                     u777:	
  1933  0530  0BF3               	decfsz	??_LCD8_begin,f
  1934  0531  2D30               	goto	u777
  1935  0532  0BF4               	decfsz	??_LCD8_begin+1,f
  1936  0533  2D30               	goto	u777
  1937  0534  2D35               	nop2
  1938                           
  1939                           ;./LCD8bit.h: 40:     LCD8_cmd(48);
  1940  0535  3030               	movlw	48
  1941  0536  120A  118A  244E  120A  118A  	fcall	_LCD8_cmd
  1942                           
  1943                           ;./LCD8bit.h: 41:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1944  053B  300D               	movlw	13
  1945  053C  00F4               	movwf	??_LCD8_begin+1
  1946  053D  30FB               	movlw	251
  1947  053E  00F3               	movwf	??_LCD8_begin
  1948  053F                     u787:	
  1949  053F  0BF3               	decfsz	??_LCD8_begin,f
  1950  0540  2D3F               	goto	u787
  1951  0541  0BF4               	decfsz	??_LCD8_begin+1,f
  1952  0542  2D3F               	goto	u787
  1953  0543  2D44               	nop2
  1954                           
  1955                           ;./LCD8bit.h: 42:     LCD8_cmd(48);
  1956  0544  3030               	movlw	48
  1957  0545  120A  118A  244E  120A  118A  	fcall	_LCD8_cmd
  1958                           
  1959                           ;./LCD8bit.h: 43:     _delay((unsigned long)((165)*(8000000/4000000.0)));
  1960  054A  306D               	movlw	109
  1961  054B  00F3               	movwf	??_LCD8_begin
  1962  054C                     u797:	
  1963  054C  0BF3               	decfsz	??_LCD8_begin,f
  1964  054D  2D4C               	goto	u797
  1965  054E  2D4F               	nop2
  1966                           
  1967                           ;./LCD8bit.h: 44:     LCD8_cmd(48);
  1968  054F  3030               	movlw	48
  1969  0550  120A  118A  244E  120A  118A  	fcall	_LCD8_cmd
  1970                           
  1971                           ;./LCD8bit.h: 45:     _delay((unsigned long)((165)*(8000000/4000000.0)));
  1972  0555  306D               	movlw	109
  1973  0556  00F3               	movwf	??_LCD8_begin
  1974  0557                     u807:	
  1975  0557  0BF3               	decfsz	??_LCD8_begin,f
  1976  0558  2D57               	goto	u807
  1977  0559  2D5A               	nop2
  1978                           
  1979                           ;./LCD8bit.h: 47:     LCD8_cmd(0b111000);
  1980  055A  3038               	movlw	56
  1981  055B  120A  118A  244E  120A  118A  	fcall	_LCD8_cmd
  1982                           
  1983                           ;./LCD8bit.h: 48:     LCD8_cmd(0b10100);
  1984  0560  3014               	movlw	20
  1985  0561  120A  118A  244E  120A  118A  	fcall	_LCD8_cmd
  1986                           
  1987                           ;./LCD8bit.h: 49:     LCD8_cmd(1);
  1988  0566  3001               	movlw	1
  1989  0567  120A  118A  244E  120A  118A  	fcall	_LCD8_cmd
  1990                           
  1991                           ;./LCD8bit.h: 50:     LCD8_cmd(0b110);
  1992  056C  3006               	movlw	6
  1993  056D  120A  118A  244E  120A  118A  	fcall	_LCD8_cmd
  1994                           
  1995                           ;./LCD8bit.h: 51:     LCD8_cmd(0b1100);
  1996  0572  300C               	movlw	12
  1997  0573  120A  118A  244E  120A  118A  	fcall	_LCD8_cmd
  1998                           
  1999                           ;./LCD8bit.h: 52:     LCD8_cmd(0b10);
  2000  0578  3002               	movlw	2
  2001  0579  120A  118A  244E   	fcall	_LCD8_cmd
  2002  057C  0008               	return
  2003  057D                     __end_of_LCD8_begin:	
  2004                           
  2005                           	psect	text11
  2006  044E                     __ptext11:	
  2007 ;; *************** function _LCD8_cmd *****************
  2008 ;; Defined at:
  2009 ;;		line 12 in file "./LCD8bit.h"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  data            1    wreg     unsigned char 
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;  data            1    2[COMMON] unsigned char 
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2023 ;;      Params:         0       0       0       0       0
  2024 ;;      Locals:         1       0       0       0       0
  2025 ;;      Temps:          2       0       0       0       0
  2026 ;;      Totals:         3       0       0       0       0
  2027 ;;Total ram usage:        3 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; This function calls:
  2030 ;;		Nothing
  2031 ;; This function is called by:
  2032 ;;		_LCD8_set_cursor
  2033 ;;		_LCD8_clear
  2034 ;;		_LCD8_begin
  2035 ;;		_LCD8_shiftR
  2036 ;;		_LCD8_shiftL
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           
  2041                           ;psect for function _LCD8_cmd
  2042  044E                     _LCD8_cmd:	
  2043                           
  2044                           ;incstack = 0
  2045                           ; Regs used in _LCD8_cmd: [wreg]
  2046                           ;LCD8_cmd@data stored from wreg
  2047  044E  00F2               	movwf	LCD8_cmd@data
  2048                           
  2049                           ;./LCD8bit.h: 13:     RA2 = 0;
  2050  044F  1283               	bcf	3,5	;RP0=0, select bank0
  2051  0450  1303               	bcf	3,6	;RP1=0, select bank0
  2052  0451  1105               	bcf	5,2	;volatile
  2053                           
  2054                           ;./LCD8bit.h: 14:     PORTB = data;
  2055  0452  0872               	movf	LCD8_cmd@data,w
  2056  0453  0086               	movwf	6	;volatile
  2057                           
  2058                           ;./LCD8bit.h: 16:     RA1 = 1;
  2059  0454  1485               	bsf	5,1	;volatile
  2060                           
  2061                           ;./LCD8bit.h: 17:     _delay((unsigned long)((4)*(8000000/4000.0)));
  2062  0455  300B               	movlw	11
  2063  0456  00F1               	movwf	??_LCD8_cmd+1
  2064  0457  3062               	movlw	98
  2065  0458  00F0               	movwf	??_LCD8_cmd
  2066  0459                     u817:	
  2067  0459  0BF0               	decfsz	??_LCD8_cmd,f
  2068  045A  2C59               	goto	u817
  2069  045B  0BF1               	decfsz	??_LCD8_cmd+1,f
  2070  045C  2C59               	goto	u817
  2071  045D  0000               	nop
  2072                           
  2073                           ;./LCD8bit.h: 18:     RA1 = 0;
  2074  045E  1283               	bcf	3,5	;RP0=0, select bank0
  2075  045F  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0460  1085               	bcf	5,1	;volatile
  2077  0461  0008               	return
  2078  0462                     __end_of_LCD8_cmd:	
  2079                           
  2080                           	psect	text12
  2081  03FB                     __ptext12:	
  2082 ;; *************** function _ADC_conversion *****************
  2083 ;; Defined at:
  2084 ;;		line 117 in file "./ADC.h"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;		None
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      unsigned char 
  2091 ;; Registers used:
  2092 ;;		wreg
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2098 ;;      Params:         0       0       0       0       0
  2099 ;;      Locals:         0       0       0       0       0
  2100 ;;      Temps:          0       0       0       0       0
  2101 ;;      Totals:         0       0       0       0       0
  2102 ;;Total ram usage:        0 bytes
  2103 ;; Hardware stack levels used:    1
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_main
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           
  2112                           ;psect for function _ADC_conversion
  2113  03FB                     _ADC_conversion:	
  2114                           
  2115                           ;./ADC.h: 118:     ADCON0bits.GO_nDONE = 1;
  2116                           
  2117                           ;incstack = 0
  2118                           ; Regs used in _ADC_conversion: [wreg]
  2119  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  2120  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  2121  03FD  149F               	bsf	31,1	;volatile
  2122  03FE                     l83:	
  2123                           ;./ADC.h: 119:     while(ADCON0bits.GO_nDONE);
  2124                           
  2125  03FE  189F               	btfsc	31,1	;volatile
  2126  03FF  2BFE               	goto	l83
  2127                           
  2128                           ;./ADC.h: 120:     return ADRESH;
  2129  0400  081E               	movf	30,w	;volatile
  2130  0401  0008               	return
  2131  0402                     __end_of_ADC_conversion:	
  2132                           
  2133                           	psect	text13
  2134  0479                     __ptext13:	
  2135 ;; *************** function _ADC_begin *****************
  2136 ;; Defined at:
  2137 ;;		line 84 in file "./ADC.h"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  option          1    wreg     unsigned char 
  2140 ;;  freq            1    3[COMMON] unsigned char 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;  option          1    4[COMMON] unsigned char 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2152 ;;      Params:         1       0       0       0       0
  2153 ;;      Locals:         1       0       0       0       0
  2154 ;;      Temps:          0       0       0       0       0
  2155 ;;      Totals:         2       0       0       0       0
  2156 ;;Total ram usage:        2 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    1
  2159 ;; This function calls:
  2160 ;;		_ADC_channel
  2161 ;;		_ADC_freq
  2162 ;;		_ADC_option
  2163 ;; This function is called by:
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           
  2169                           ;psect for function _ADC_begin
  2170  0479                     _ADC_begin:	
  2171                           
  2172                           ;incstack = 0
  2173                           ; Regs used in _ADC_begin: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2174                           ;ADC_begin@option stored from wreg
  2175  0479  00F4               	movwf	ADC_begin@option
  2176                           
  2177                           ;./ADC.h: 88:     ADC_option(option);
  2178  047A  0874               	movf	ADC_begin@option,w
  2179  047B  120A  118A  25DC  120A  118A  	fcall	_ADC_option
  2180                           
  2181                           ;./ADC.h: 89:     ADCON1bits.VCFG1 = 0;
  2182  0480  1683               	bsf	3,5	;RP0=1, select bank1
  2183  0481  1303               	bcf	3,6	;RP1=0, select bank1
  2184  0482  129F               	bcf	31,5	;volatile
  2185                           
  2186                           ;./ADC.h: 90:     ADCON1bits.VCFG0 = 0;
  2187  0483  121F               	bcf	31,4	;volatile
  2188                           
  2189                           ;./ADC.h: 91:     ADCON1bits.ADFM = 0;
  2190  0484  139F               	bcf	31,7	;volatile
  2191                           
  2192                           ;./ADC.h: 92:     ADCON0bits.ADON = 1;
  2193  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2194  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2195  0487  141F               	bsf	31,0	;volatile
  2196                           
  2197                           ;./ADC.h: 96:     ADC_freq(freq);
  2198  0488  0873               	movf	ADC_begin@freq,w
  2199  0489  120A  118A  2422  120A  118A  	fcall	_ADC_freq
  2200                           
  2201                           ;./ADC.h: 98:     ADC_channel(option);
  2202  048E  0874               	movf	ADC_begin@option,w
  2203  048F  120A  118A  2415   	fcall	_ADC_channel
  2204  0492  0008               	return
  2205  0493                     __end_of_ADC_begin:	
  2206                           
  2207                           	psect	text14
  2208  05DC                     __ptext14:	
  2209 ;; *************** function _ADC_option *****************
  2210 ;; Defined at:
  2211 ;;		line 2 in file "./ADC.h"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  option          1    wreg     unsigned char 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  option          1    2[COMMON] unsigned char 
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      void 
  2218 ;; Registers used:
  2219 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2225 ;;      Params:         0       0       0       0       0
  2226 ;;      Locals:         1       0       0       0       0
  2227 ;;      Temps:          2       0       0       0       0
  2228 ;;      Totals:         3       0       0       0       0
  2229 ;;Total ram usage:        3 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; This function calls:
  2232 ;;		Nothing
  2233 ;; This function is called by:
  2234 ;;		_ADC_begin
  2235 ;;		_ADC_int_begin
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           
  2240                           ;psect for function _ADC_option
  2241  05DC                     _ADC_option:	
  2242                           
  2243                           ;incstack = 0
  2244                           ; Regs used in _ADC_option: [wreg-fsr0h+status,2+status,0]
  2245                           ;ADC_option@option stored from wreg
  2246  05DC  00F2               	movwf	ADC_option@option
  2247                           
  2248                           ;./ADC.h: 3:     switch (option) {
  2249  05DD  2E47               	goto	l1166
  2250  05DE                     l52:	
  2251                           ;./ADC.h: 4:         case 0:
  2252                           
  2253                           
  2254                           ;./ADC.h: 5:             ANSELbits.ANS0 = 1;
  2255  05DE  1683               	bsf	3,5	;RP0=1, select bank3
  2256  05DF  1703               	bsf	3,6	;RP1=1, select bank3
  2257  05E0  1408               	bsf	8,0	;volatile
  2258                           
  2259                           ;./ADC.h: 6:             TRISAbits.TRISA0 = 1;
  2260  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  2261  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  2262  05E3  1405               	bsf	5,0	;volatile
  2263                           
  2264                           ;./ADC.h: 7:             break;
  2265  05E4  0008               	return
  2266  05E5                     l54:	
  2267                           ;./ADC.h: 8:         case 1:
  2268                           
  2269                           
  2270                           ;./ADC.h: 9:             ANSELbits.ANS1 = 1;
  2271  05E5  1683               	bsf	3,5	;RP0=1, select bank3
  2272  05E6  1703               	bsf	3,6	;RP1=1, select bank3
  2273  05E7  1488               	bsf	8,1	;volatile
  2274                           
  2275                           ;./ADC.h: 10:             TRISAbits.TRISA1 = 1;
  2276  05E8  1683               	bsf	3,5	;RP0=1, select bank1
  2277  05E9  1303               	bcf	3,6	;RP1=0, select bank1
  2278  05EA  1485               	bsf	5,1	;volatile
  2279                           
  2280                           ;./ADC.h: 11:             break;
  2281  05EB  0008               	return
  2282  05EC                     l55:	
  2283                           ;./ADC.h: 12:         case 2:
  2284                           
  2285                           
  2286                           ;./ADC.h: 13:             ANSELbits.ANS2 = 1;
  2287  05EC  1683               	bsf	3,5	;RP0=1, select bank3
  2288  05ED  1703               	bsf	3,6	;RP1=1, select bank3
  2289  05EE  1508               	bsf	8,2	;volatile
  2290                           
  2291                           ;./ADC.h: 14:             TRISAbits.TRISA2 = 1;
  2292  05EF  1683               	bsf	3,5	;RP0=1, select bank1
  2293  05F0  1303               	bcf	3,6	;RP1=0, select bank1
  2294  05F1  1505               	bsf	5,2	;volatile
  2295                           
  2296                           ;./ADC.h: 15:             break;
  2297  05F2  0008               	return
  2298  05F3                     l56:	
  2299                           ;./ADC.h: 16:         case 3:
  2300                           
  2301                           
  2302                           ;./ADC.h: 17:             ANSELbits.ANS3 = 1;
  2303  05F3  1683               	bsf	3,5	;RP0=1, select bank3
  2304  05F4  1703               	bsf	3,6	;RP1=1, select bank3
  2305  05F5  1588               	bsf	8,3	;volatile
  2306                           
  2307                           ;./ADC.h: 18:             TRISAbits.TRISA3 = 1;
  2308  05F6  1683               	bsf	3,5	;RP0=1, select bank1
  2309  05F7  1303               	bcf	3,6	;RP1=0, select bank1
  2310  05F8  1585               	bsf	5,3	;volatile
  2311                           
  2312                           ;./ADC.h: 19:             break;
  2313  05F9  0008               	return
  2314  05FA                     l57:	
  2315                           ;./ADC.h: 20:         case 4:
  2316                           
  2317                           
  2318                           ;./ADC.h: 21:             ANSELbits.ANS4 = 1;
  2319  05FA  1683               	bsf	3,5	;RP0=1, select bank3
  2320  05FB  1703               	bsf	3,6	;RP1=1, select bank3
  2321  05FC  1608               	bsf	8,4	;volatile
  2322                           
  2323                           ;./ADC.h: 22:             TRISAbits.TRISA5 = 1;
  2324  05FD  1683               	bsf	3,5	;RP0=1, select bank1
  2325  05FE  1303               	bcf	3,6	;RP1=0, select bank1
  2326  05FF  1685               	bsf	5,5	;volatile
  2327                           
  2328                           ;./ADC.h: 23:             break;
  2329  0600  0008               	return
  2330  0601                     l58:	
  2331                           ;./ADC.h: 24:         case 5:
  2332                           
  2333                           
  2334                           ;./ADC.h: 25:             ANSELbits.ANS5 = 1;
  2335  0601  1683               	bsf	3,5	;RP0=1, select bank3
  2336  0602  1703               	bsf	3,6	;RP1=1, select bank3
  2337  0603  1688               	bsf	8,5	;volatile
  2338                           
  2339                           ;./ADC.h: 26:             TRISEbits.TRISE0 = 1;
  2340  0604  1683               	bsf	3,5	;RP0=1, select bank1
  2341  0605  1303               	bcf	3,6	;RP1=0, select bank1
  2342  0606  1409               	bsf	9,0	;volatile
  2343                           
  2344                           ;./ADC.h: 27:             break;
  2345  0607  0008               	return
  2346  0608                     l59:	
  2347                           ;./ADC.h: 28:         case 6:
  2348                           
  2349                           
  2350                           ;./ADC.h: 29:             ANSELbits.ANS6 = 1;
  2351  0608  1683               	bsf	3,5	;RP0=1, select bank3
  2352  0609  1703               	bsf	3,6	;RP1=1, select bank3
  2353  060A  1708               	bsf	8,6	;volatile
  2354                           
  2355                           ;./ADC.h: 30:             TRISEbits.TRISE1 = 1;
  2356  060B  1683               	bsf	3,5	;RP0=1, select bank1
  2357  060C  1303               	bcf	3,6	;RP1=0, select bank1
  2358  060D  1489               	bsf	9,1	;volatile
  2359                           
  2360                           ;./ADC.h: 31:             break;
  2361  060E  0008               	return
  2362  060F                     l60:	
  2363                           ;./ADC.h: 32:         case 7:
  2364                           
  2365                           
  2366                           ;./ADC.h: 33:             ANSELbits.ANS7 = 1;
  2367  060F  1683               	bsf	3,5	;RP0=1, select bank3
  2368  0610  1703               	bsf	3,6	;RP1=1, select bank3
  2369  0611  1788               	bsf	8,7	;volatile
  2370                           
  2371                           ;./ADC.h: 34:             TRISEbits.TRISE2 = 1;
  2372  0612  1683               	bsf	3,5	;RP0=1, select bank1
  2373  0613  1303               	bcf	3,6	;RP1=0, select bank1
  2374  0614  1509               	bsf	9,2	;volatile
  2375                           
  2376                           ;./ADC.h: 35:             break;
  2377  0615  0008               	return
  2378  0616                     l61:	
  2379                           ;./ADC.h: 36:         case 8:
  2380                           
  2381                           
  2382                           ;./ADC.h: 37:             ANSELHbits.ANS8 = 1;
  2383  0616  1683               	bsf	3,5	;RP0=1, select bank3
  2384  0617  1703               	bsf	3,6	;RP1=1, select bank3
  2385  0618  1409               	bsf	9,0	;volatile
  2386                           
  2387                           ;./ADC.h: 38:             TRISBbits.TRISB2 = 1;
  2388  0619  1683               	bsf	3,5	;RP0=1, select bank1
  2389  061A  1303               	bcf	3,6	;RP1=0, select bank1
  2390  061B  1506               	bsf	6,2	;volatile
  2391                           
  2392                           ;./ADC.h: 39:             break;
  2393  061C  0008               	return
  2394  061D                     l62:	
  2395                           ;./ADC.h: 40:         case 9:
  2396                           
  2397                           
  2398                           ;./ADC.h: 41:             ANSELHbits.ANS9 = 1;
  2399  061D  1683               	bsf	3,5	;RP0=1, select bank3
  2400  061E  1703               	bsf	3,6	;RP1=1, select bank3
  2401  061F  1489               	bsf	9,1	;volatile
  2402                           
  2403                           ;./ADC.h: 42:             TRISBbits.TRISB3 = 1;
  2404  0620  1683               	bsf	3,5	;RP0=1, select bank1
  2405  0621  1303               	bcf	3,6	;RP1=0, select bank1
  2406  0622  1586               	bsf	6,3	;volatile
  2407                           
  2408                           ;./ADC.h: 43:             break;
  2409  0623  0008               	return
  2410  0624                     l63:	
  2411                           ;./ADC.h: 44:         case 10:
  2412                           
  2413                           
  2414                           ;./ADC.h: 45:             ANSELHbits.ANS10 = 1;
  2415  0624  1683               	bsf	3,5	;RP0=1, select bank3
  2416  0625  1703               	bsf	3,6	;RP1=1, select bank3
  2417  0626  1509               	bsf	9,2	;volatile
  2418                           
  2419                           ;./ADC.h: 46:             TRISBbits.TRISB1 = 1;
  2420  0627  1683               	bsf	3,5	;RP0=1, select bank1
  2421  0628  1303               	bcf	3,6	;RP1=0, select bank1
  2422  0629  1486               	bsf	6,1	;volatile
  2423                           
  2424                           ;./ADC.h: 47:             break;
  2425  062A  0008               	return
  2426  062B                     l64:	
  2427                           ;./ADC.h: 48:         case 11:
  2428                           
  2429                           
  2430                           ;./ADC.h: 49:             ANSELHbits.ANS11 = 1;
  2431  062B  1683               	bsf	3,5	;RP0=1, select bank3
  2432  062C  1703               	bsf	3,6	;RP1=1, select bank3
  2433  062D  1589               	bsf	9,3	;volatile
  2434                           
  2435                           ;./ADC.h: 50:             TRISBbits.TRISB4 = 1;
  2436  062E  1683               	bsf	3,5	;RP0=1, select bank1
  2437  062F  1303               	bcf	3,6	;RP1=0, select bank1
  2438  0630  1606               	bsf	6,4	;volatile
  2439                           
  2440                           ;./ADC.h: 51:             break;
  2441  0631  0008               	return
  2442  0632                     l65:	
  2443                           ;./ADC.h: 52:         case 12:
  2444                           
  2445                           
  2446                           ;./ADC.h: 53:             ANSELHbits.ANS12 = 1;
  2447  0632  1683               	bsf	3,5	;RP0=1, select bank3
  2448  0633  1703               	bsf	3,6	;RP1=1, select bank3
  2449  0634  1609               	bsf	9,4	;volatile
  2450                           
  2451                           ;./ADC.h: 54:             TRISBbits.TRISB0 = 1;
  2452  0635  1683               	bsf	3,5	;RP0=1, select bank1
  2453  0636  1303               	bcf	3,6	;RP1=0, select bank1
  2454  0637  1406               	bsf	6,0	;volatile
  2455                           
  2456                           ;./ADC.h: 55:             break;
  2457  0638  0008               	return
  2458  0639                     l66:	
  2459                           ;./ADC.h: 56:         case 13:
  2460                           
  2461                           
  2462                           ;./ADC.h: 57:             ANSELHbits.ANS13 = 1;
  2463  0639  1683               	bsf	3,5	;RP0=1, select bank3
  2464  063A  1703               	bsf	3,6	;RP1=1, select bank3
  2465  063B  1689               	bsf	9,5	;volatile
  2466                           
  2467                           ;./ADC.h: 58:             TRISBbits.TRISB5 = 1;
  2468  063C  1683               	bsf	3,5	;RP0=1, select bank1
  2469  063D  1303               	bcf	3,6	;RP1=0, select bank1
  2470  063E  1686               	bsf	6,5	;volatile
  2471                           
  2472                           ;./ADC.h: 59:             break;
  2473  063F  0008               	return
  2474  0640                     l67:	
  2475                           ;./ADC.h: 60:         default:
  2476                           
  2477                           
  2478                           ;./ADC.h: 61:             ANSELbits.ANS0 = 1;
  2479  0640  1683               	bsf	3,5	;RP0=1, select bank3
  2480  0641  1703               	bsf	3,6	;RP1=1, select bank3
  2481  0642  1408               	bsf	8,0	;volatile
  2482                           
  2483                           ;./ADC.h: 62:             TRISAbits.TRISA0 = 1;
  2484  0643  1683               	bsf	3,5	;RP0=1, select bank1
  2485  0644  1303               	bcf	3,6	;RP1=0, select bank1
  2486  0645  1405               	bsf	5,0	;volatile
  2487                           
  2488                           ;./ADC.h: 63:             break;
  2489  0646  0008               	return
  2490  0647                     l1166:	
  2491  0647  0872               	movf	ADC_option@option,w
  2492  0648  00F0               	movwf	??_ADC_option
  2493  0649  01F1               	clrf	??_ADC_option+1
  2494                           
  2495                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2496                           ; Switch size 1, requested type "simple"
  2497                           ; Number of cases is 1, Range of values is 0 to 0
  2498                           ; switch strategies available:
  2499                           ; Name         Instructions Cycles
  2500                           ; simple_byte            4     3 (average)
  2501                           ; direct_byte           11     8 (fixed)
  2502                           ; jumptable            260     6 (fixed)
  2503                           ;	Chosen strategy is simple_byte
  2504  064A  0871               	movf	??_ADC_option+1,w
  2505  064B  3A00               	xorlw	0	; case 0
  2506  064C  1903               	skipnz
  2507  064D  2E4F               	goto	l1532
  2508  064E  2E40               	goto	l67
  2509  064F                     l1532:	
  2510                           
  2511                           ; Switch size 1, requested type "simple"
  2512                           ; Number of cases is 14, Range of values is 0 to 13
  2513                           ; switch strategies available:
  2514                           ; Name         Instructions Cycles
  2515                           ; simple_byte           43    22 (average)
  2516                           ; direct_byte           50     8 (fixed)
  2517                           ; jumptable            260     6 (fixed)
  2518                           ;	Chosen strategy is simple_byte
  2519  064F  0870               	movf	??_ADC_option,w
  2520  0650  3A00               	xorlw	0	; case 0
  2521  0651  1903               	skipnz
  2522  0652  2DDE               	goto	l52
  2523  0653  3A01               	xorlw	1	; case 1
  2524  0654  1903               	skipnz
  2525  0655  2DE5               	goto	l54
  2526  0656  3A03               	xorlw	3	; case 2
  2527  0657  1903               	skipnz
  2528  0658  2DEC               	goto	l55
  2529  0659  3A01               	xorlw	1	; case 3
  2530  065A  1903               	skipnz
  2531  065B  2DF3               	goto	l56
  2532  065C  3A07               	xorlw	7	; case 4
  2533  065D  1903               	skipnz
  2534  065E  2DFA               	goto	l57
  2535  065F  3A01               	xorlw	1	; case 5
  2536  0660  1903               	skipnz
  2537  0661  2E01               	goto	l58
  2538  0662  3A03               	xorlw	3	; case 6
  2539  0663  1903               	skipnz
  2540  0664  2E08               	goto	l59
  2541  0665  3A01               	xorlw	1	; case 7
  2542  0666  1903               	skipnz
  2543  0667  2E0F               	goto	l60
  2544  0668  3A0F               	xorlw	15	; case 8
  2545  0669  1903               	skipnz
  2546  066A  2E16               	goto	l61
  2547  066B  3A01               	xorlw	1	; case 9
  2548  066C  1903               	skipnz
  2549  066D  2E1D               	goto	l62
  2550  066E  3A03               	xorlw	3	; case 10
  2551  066F  1903               	skipnz
  2552  0670  2E24               	goto	l63
  2553  0671  3A01               	xorlw	1	; case 11
  2554  0672  1903               	skipnz
  2555  0673  2E2B               	goto	l64
  2556  0674  3A07               	xorlw	7	; case 12
  2557  0675  1903               	skipnz
  2558  0676  2E32               	goto	l65
  2559  0677  3A01               	xorlw	1	; case 13
  2560  0678  1903               	skipnz
  2561  0679  2E39               	goto	l66
  2562  067A  2E40               	goto	l67
  2563  067B  0008               	return
  2564  067C                     __end_of_ADC_option:	
  2565                           
  2566                           	psect	text15
  2567  0422                     __ptext15:	
  2568 ;; *************** function _ADC_freq *****************
  2569 ;; Defined at:
  2570 ;;		line 67 in file "./ADC.h"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;  freq            1    wreg     unsigned char 
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;  freq            1    1[COMMON] unsigned char 
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, status,2, status,0
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2584 ;;      Params:         0       0       0       0       0
  2585 ;;      Locals:         1       0       0       0       0
  2586 ;;      Temps:          1       0       0       0       0
  2587 ;;      Totals:         2       0       0       0       0
  2588 ;;Total ram usage:        2 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; This function calls:
  2591 ;;		Nothing
  2592 ;; This function is called by:
  2593 ;;		_ADC_begin
  2594 ;;		_ADC_int_begin
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           
  2599                           ;psect for function _ADC_freq
  2600  0422                     _ADC_freq:	
  2601                           
  2602                           ;incstack = 0
  2603                           ; Regs used in _ADC_freq: [wreg+status,2+status,0]
  2604                           ;ADC_freq@freq stored from wreg
  2605  0422  00F1               	movwf	ADC_freq@freq
  2606                           
  2607                           ;./ADC.h: 74:     ADCON0bits.ADCS = freq;
  2608  0423  0871               	movf	ADC_freq@freq,w
  2609  0424  00F0               	movwf	??_ADC_freq
  2610  0425  0EF0               	swapf	??_ADC_freq,f
  2611  0426  0DF0               	rlf	??_ADC_freq,f
  2612  0427  0DF0               	rlf	??_ADC_freq,f
  2613  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2614  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2615  042A  081F               	movf	31,w	;volatile
  2616  042B  0670               	xorwf	??_ADC_freq,w
  2617  042C  393F               	andlw	-193
  2618  042D  0670               	xorwf	??_ADC_freq,w
  2619  042E  009F               	movwf	31	;volatile
  2620  042F  0008               	return
  2621  0430                     __end_of_ADC_freq:	
  2622                           
  2623                           	psect	text16
  2624  0415                     __ptext16:	
  2625 ;; *************** function _ADC_channel *****************
  2626 ;; Defined at:
  2627 ;;		line 77 in file "./ADC.h"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;  channel         1    wreg     unsigned char 
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;  channel         1    1[COMMON] unsigned char 
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  1    wreg      void 
  2634 ;; Registers used:
  2635 ;;		wreg, status,2, status,0
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2641 ;;      Params:         0       0       0       0       0
  2642 ;;      Locals:         1       0       0       0       0
  2643 ;;      Temps:          1       0       0       0       0
  2644 ;;      Totals:         2       0       0       0       0
  2645 ;;Total ram usage:        2 bytes
  2646 ;; Hardware stack levels used:    1
  2647 ;; This function calls:
  2648 ;;		Nothing
  2649 ;; This function is called by:
  2650 ;;		_ADC_begin
  2651 ;;		_ADC_int_begin
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           
  2656                           ;psect for function _ADC_channel
  2657  0415                     _ADC_channel:	
  2658                           
  2659                           ;incstack = 0
  2660                           ; Regs used in _ADC_channel: [wreg+status,2+status,0]
  2661                           ;ADC_channel@channel stored from wreg
  2662  0415  00F1               	movwf	ADC_channel@channel
  2663                           
  2664                           ;./ADC.h: 81:     ADCON0bits.CHS = channel;
  2665  0416  0871               	movf	ADC_channel@channel,w
  2666  0417  00F0               	movwf	??_ADC_channel
  2667  0418  0DF0               	rlf	??_ADC_channel,f
  2668  0419  0DF0               	rlf	??_ADC_channel,f
  2669  041A  1283               	bcf	3,5	;RP0=0, select bank0
  2670  041B  1303               	bcf	3,6	;RP1=0, select bank0
  2671  041C  081F               	movf	31,w	;volatile
  2672  041D  0670               	xorwf	??_ADC_channel,w
  2673  041E  39C3               	andlw	-61
  2674  041F  0670               	xorwf	??_ADC_channel,w
  2675  0420  009F               	movwf	31	;volatile
  2676  0421  0008               	return
  2677  0422                     __end_of_ADC_channel:	
  2678  007E                     btemp	set	126	;btemp
  2679  007E                     wtemp0	set	126


Data Sizes:
    Strings     18
    Constant    10
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     16      40
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_2(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 15
		 -> show(BANK0[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD8_strWrite@data	PTR unsigned char  size(2) Largest target is 15
		 -> show(BANK0[15]), STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD8_strWrite->_LCD8_write
    _LCD8_set_cursor->_LCD8_cmd
    _LCD8_clear->_LCD8_cmd
    _LCD8_begin->_LCD8_cmd
    _ADC_begin->_ADC_option

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2133
                                             13 BANK0      3     3      0
                          _ADC_begin
                     _ADC_conversion
                         _LCD8_begin
                         _LCD8_clear
                    _LCD8_set_cursor
                      _LCD8_strWrite
                    _oscilator_begin
                            _sprintf
                          _wave_step
 ---------------------------------------------------------------------------------
 (1) _wave_step                                            4     2      2      98
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _oscilator_begin                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD8_strWrite                                        4     2      2     264
                                              2 COMMON     4     2      2
                         _LCD8_write
 ---------------------------------------------------------------------------------
 (2) _LCD8_write                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD8_set_cursor                                      4     3      1     286
                                              3 COMMON     4     3      1
                           _LCD8_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD8_clear                                           0     0      0      22
                           _LCD8_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD8_begin                                           2     2      0      22
                                              3 COMMON     2     2      0
                           _LCD8_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD8_cmd                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_conversion                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_begin                                            2     1      1     208
                                              3 COMMON     2     1      1
                        _ADC_channel
                           _ADC_freq
                         _ADC_option
 ---------------------------------------------------------------------------------
 (2) _ADC_option                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_freq                                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADC_channel                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_begin
     _ADC_channel
     _ADC_freq
     _ADC_option
   _ADC_conversion
   _LCD8_begin
     _LCD8_cmd
   _LCD8_clear
     _LCD8_cmd
   _LCD8_set_cursor
     _LCD8_cmd
   _LCD8_strWrite
     _LCD8_write
   _oscilator_begin
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _wave_step

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      36       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      28       5       50.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      36      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Feb 25 12:04:24 2019

      LCD8_set_cursor@row 0076                         _i 0027                         pc 0002  
             __CFG_CP$OFF 0000     LCD8_set_cursor@column 0073                        l60 060F  
                      l52 05DE                        l61 0616                        l62 061D  
                      l54 05E5                        l63 0624                        l55 05EC  
                      l64 062B                        l56 05F3                        l65 0632  
                      l57 05FA                        l66 0639                        l58 0601  
                      l67 0640                        l59 0608                        l83 03FE  
                      l98 046B     LCD8_set_cursor@cursor 0075                        fsr 0004  
      __size_of_ADC_begin 001A                       l161 0581                       l166 05D3  
                     _RA1 0029                       _RA2 002A                       u405 0510  
                     u415 051A              __CFG_CPD$OFF 0000                       u445 04C4  
                     u375 04F8                       u465 04D5                       u395 0504  
                     u475 04DE                       u555 0792                       u645 0587  
                     u717 06C6                       u807 0557                       u727 0599  
                     u817 0459                       u737 05AB                       u747 05BD  
                     u757 05CE                       u767 0447                       u777 0530  
                     u787 053F                       u797 054C                       fsr0 0004  
                     indf 0000              __CFG_LVP$OFF 0000                      l1210 0519  
                    l1202 04F5                      l1204 0503                      l1214 0524  
                    l1304 0494                      l1232 04DD                      l1320 0744  
                    l1226 04C1                      l1228 04CF                      l1236 04E8  
                    l1166 0647                      l1342 077B                      l1326 0762  
                    l1336 0779                      l1266 0474                      l1362 07AF  
                    l1354 07AB                      l1530 0757                      l1450 06CC  
                    l1532 064F                      l1348 079C                      l1364 0724  
                    l1366 07F0                      l1390 05C2                      l1382 059E  
                    l1386 05B0       __size_of_ADC_option 00A0                      STR_1 0028  
                    STR_2 001D              __CFG_WRT$OFF 0000                      _main 067C  
                    _show 0029                      _step 0024                      btemp 007E  
           __CFG_BOREN$ON 0000                      start 0000          __end_of_ADC_freq 0430  
           __CFG_IESO$OFF 0000      __size_of_ADC_channel 000D   __end_of_oscilator_begin 043E  
        __end_of_LCD8_cmd 0462       __size_of_LCD8_begin 0054       __size_of_LCD8_clear 000B  
         _LCD8_set_cursor 0462                     ?_main 0070       __size_of_LCD8_write 0010  
           __CFG_WDTE$OFF 0000           __end_of___lwdiv 0529           __end_of___lwmod 04ED  
                   _PORTA 0005                     _PORTB 0006                     _PORTD 0008  
                   _TRISB 0086                     _TRISD 0088            __CFG_FCMEN$OFF 0000  
         __end_of_dpowers 001D                     pclath 000A         __end_of_ADC_begin 0493  
                   status 0003                     wtemp0 007E           __end_of_sprintf 07F5  
          __CFG_MCLRE$OFF 0000           __initialization 07F5              __end_of_main 071D  
                  ??_main 0045          ??_ADC_conversion 0070                    _ADRESH 001E  
                  _TRISA1 0429                    _TRISA2 042A            __CFG_PWRTE$OFF 0000  
 __end_of_LCD8_set_cursor 0479              ??_ADC_option 0070          ?_oscilator_begin 0070  
               ??___lwdiv 0074                 ??___lwmod 007C                 ?_ADC_freq 0070  
            ??_LCD8_begin 0073                 ??_sprintf 003B              ??_LCD8_clear 0073  
               ?_LCD8_cmd 0070        __end_of_ADC_option 067C              ??_LCD8_write 0070  
 __end_of__initialization 07FC            __pcstackCOMMON 0070            wave_step@steps 0070  
      __end_of_LCD8_begin 057D        __end_of_LCD8_clear 0415        __end_of_LCD8_write 044E  
              ??_ADC_freq 0070                ??_LCD8_cmd 0070                __pbssBANK0 0020  
        ADC_option@option 0072     __end_of_LCD8_strWrite 04BB                __pmaintext 067C  
        ?_LCD8_set_cursor 0073        __size_of_wave_step 005F                __stringtab 0003  
           ??_ADC_channel 0070                 _ADC_begin 0479                   ___lwdiv 04ED  
                 ___lwmod 04BB                 _ANSELbits 0188                   __ptext1 057D  
                 __ptext2 071D                   __ptext3 04BB                   __ptext4 04ED  
                 __ptext5 0430                   __ptext6 0493                   __ptext7 043E  
                 __ptext8 0462                   __ptext9 040A                   _dpowers 0013  
       LCD8_strWrite@data 0072                   _sprintf 071D                   clrloop0 0403  
    end_of_initialization 07FC                ?_ADC_begin 0073         __end_of_wave_step 05DC  
     __end_of_ADC_channel 0422                 _TRISAbits 0085                 _TRISBbits 0086  
               _TRISEbits 0089         __size_of_ADC_freq 000E         __size_of_LCD8_cmd 0014  
            ADC_freq@freq 0071  __size_of_oscilator_begin 000E       start_initialization 07F5  
             _ADC_channel 0415  __CFG_FOSC$INTRC_NOCLKOUT 0000   __size_of_ADC_conversion 0007  
             ??_ADC_begin 0074                full_step@i 0026                 ___latbits 0002  
           __pcstackBANK0 0038               sprintf@flag 003F               sprintf@prec 0040  
        ___lwdiv@dividend 0072                  ?___lwdiv 0070                  ?___lwmod 0078  
          LCD8_strWrite@i 0075                 __pstrings 0003    __size_of_LCD8_strWrite 0028  
__size_of_LCD8_set_cursor 0017            LCD8_write@data 0071                  _ADC_freq 0422  
        ___lwdiv@quotient 0075                  ?_sprintf 0038         ??_oscilator_begin 0070  
                _LCD8_cmd 044E                 clear_ram0 0402                  _PIE1bits 008C  
                _PIR1bits 000C                 _wave_step 057D                _ADCON0bits 001F  
             __stringbase 0012                _ADCON1bits 009F                wave_step@a 0020  
              wave_step@i 0022        ADC_channel@channel 0071             _LCD8_strWrite 0493  
     oscilator_begin@freq 0071            _ADC_conversion 03FB                _ADC_option 05DC  
              ?_wave_step 0070          __size_of___lwdiv 003C          __size_of___lwmod 0032  
      __end_of__stringtab 0013                  _adc_read 0028                _ANSELHbits 0189  
              sprintf@val 0041           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 0529                  __ptext11 044E                  __ptext12 03FB  
                __ptext13 0479                  __ptext14 05DC                  __ptext15 0422  
                __ptext16 0415         __CFG_BOR4V$BOR40V 0000         ??_LCD8_set_cursor 0074  
              _LCD8_begin 0529                _LCD8_clear 040A          __size_of_sprintf 00D8  
          ?_LCD8_strWrite 0072                _LCD8_write 043E    __end_of_ADC_conversion 0402  
           __size_of_main 00A1              ?_ADC_channel 0070              LCD8_cmd@data 0072  
         ADC_begin@option 0074                _INTCONbits 000B                 sprintf@ap 003E  
               sprintf@sp 0043           ?_ADC_conversion 0070          ___lwmod@dividend 007A  
               stringcode 000D                _OSCCONbits 008F               ?_ADC_option 0070  
             ??_wave_step 0072           _oscilator_begin 0430                  sprintf@c 0044  
                sprintf@f 0038           ___lwmod@divisor 0078           ___lwmod@counter 007D  
                stringdir 000D                  stringtab 0003             ADC_begin@freq 0073  
         ??_LCD8_strWrite 0074               ?_LCD8_begin 0070               ?_LCD8_clear 0070  
             ?_LCD8_write 0070  
