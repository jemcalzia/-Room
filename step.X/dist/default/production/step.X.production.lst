

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Feb 26 10:54:17 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.05
    30                           ; Generated 20/12/2018 GMT
    31                           ; 
    32                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0088                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  008F                     	;# 
   108  0090                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0093                     	;# 
   114  0094                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  0105                     	;# 
   127  0107                     	;# 
   128  0108                     	;# 
   129  0109                     	;# 
   130  010C                     	;# 
   131  010C                     	;# 
   132  010D                     	;# 
   133  010E                     	;# 
   134  010F                     	;# 
   135  0185                     	;# 
   136  0187                     	;# 
   137  0188                     	;# 
   138  0189                     	;# 
   139  018C                     	;# 
   140  018D                     	;# 
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  0008                     	;# 
   150  0009                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000D                     	;# 
   155  000E                     	;# 
   156  000E                     	;# 
   157  000F                     	;# 
   158  0010                     	;# 
   159  0011                     	;# 
   160  0012                     	;# 
   161  0013                     	;# 
   162  0014                     	;# 
   163  0015                     	;# 
   164  0015                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001B                     	;# 
   171  001B                     	;# 
   172  001C                     	;# 
   173  001D                     	;# 
   174  001E                     	;# 
   175  001F                     	;# 
   176  0081                     	;# 
   177  0085                     	;# 
   178  0086                     	;# 
   179  0087                     	;# 
   180  0088                     	;# 
   181  0089                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  008F                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0093                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0094                     	;# 
   193  0095                     	;# 
   194  0096                     	;# 
   195  0097                     	;# 
   196  0098                     	;# 
   197  0099                     	;# 
   198  009A                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  0105                     	;# 
   205  0107                     	;# 
   206  0108                     	;# 
   207  0109                     	;# 
   208  010C                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  0185                     	;# 
   214  0187                     	;# 
   215  0188                     	;# 
   216  0189                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0008                     	;# 
   228  0009                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000D                     	;# 
   233  000E                     	;# 
   234  000E                     	;# 
   235  000F                     	;# 
   236  0010                     	;# 
   237  0011                     	;# 
   238  0012                     	;# 
   239  0013                     	;# 
   240  0014                     	;# 
   241  0015                     	;# 
   242  0015                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001B                     	;# 
   249  001B                     	;# 
   250  001C                     	;# 
   251  001D                     	;# 
   252  001E                     	;# 
   253  001F                     	;# 
   254  0081                     	;# 
   255  0085                     	;# 
   256  0086                     	;# 
   257  0087                     	;# 
   258  0088                     	;# 
   259  0089                     	;# 
   260  008C                     	;# 
   261  008D                     	;# 
   262  008E                     	;# 
   263  008F                     	;# 
   264  0090                     	;# 
   265  0091                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0093                     	;# 
   270  0094                     	;# 
   271  0095                     	;# 
   272  0096                     	;# 
   273  0097                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009A                     	;# 
   277  009B                     	;# 
   278  009C                     	;# 
   279  009D                     	;# 
   280  009E                     	;# 
   281  009F                     	;# 
   282  0105                     	;# 
   283  0107                     	;# 
   284  0108                     	;# 
   285  0109                     	;# 
   286  010C                     	;# 
   287  010C                     	;# 
   288  010D                     	;# 
   289  010E                     	;# 
   290  010F                     	;# 
   291  0185                     	;# 
   292  0187                     	;# 
   293  0188                     	;# 
   294  0189                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297                           
   298                           	psect	strings
   299  0003                     __pstrings:	
   300  0003                     stringtab:	
   301  0003                     __stringtab:	
   302                           
   303                           ;	String table - string pointers are 1 byte each
   304  0003  1BFF               	btfsc	btemp+1,7
   305  0004  280D               	ljmp	stringcode
   306  0005  1383               	bcf	3,7
   307  0006  187F               	btfsc	btemp+1,0
   308  0007  1783               	bsf	3,7
   309  0008  0800               	movf	0,w
   310  0009  0A84               	incf	4,f
   311  000A  1903               	skipnz
   312  000B  0AFF               	incf	btemp+1,f
   313  000C  0008               	return
   314  000D                     stringcode:	
   315  000D                     stringdir:	
   316  000D  3000               	movlw	high stringdir
   317  000E  008A               	movwf	10
   318  000F  0804               	movf	4,w
   319  0010  0A84               	incf	4,f
   320  0011  0782               	addwf	2,f
   321  0012                     __stringbase:	
   322  0012  3400               	retlw	0
   323  0013                     __end_of__stringtab:	
   324  0013                     _dpowers:	
   325  0013  3401               	retlw	1
   326  0014  3400               	retlw	0
   327  0015  340A               	retlw	10
   328  0016  3400               	retlw	0
   329  0017  3464               	retlw	100
   330  0018  3400               	retlw	0
   331  0019  34E8               	retlw	232
   332  001A  3403               	retlw	3
   333  001B  3410               	retlw	16
   334  001C  3427               	retlw	39
   335  001D                     __end_of_dpowers:	
   336  0008                     _PORTD	set	8
   337  0005                     _PORTA	set	5
   338  0006                     _PORTB	set	6
   339  001E                     _ADRESH	set	30
   340  000C                     _PIR1bits	set	12
   341  000B                     _INTCONbits	set	11
   342  001F                     _ADCON0bits	set	31
   343  004B                     _RE3	set	75
   344  0029                     _RA1	set	41
   345  002A                     _RA2	set	42
   346  0088                     _TRISD	set	136
   347  0089                     _TRISE	set	137
   348  0086                     _TRISB	set	134
   349  008F                     _OSCCONbits	set	143
   350  008C                     _PIE1bits	set	140
   351  009F                     _ADCON1bits	set	159
   352  0086                     _TRISBbits	set	134
   353  0089                     _TRISEbits	set	137
   354  0085                     _TRISAbits	set	133
   355  042A                     _TRISA2	set	1066
   356  0429                     _TRISA1	set	1065
   357  0189                     _ANSELHbits	set	393
   358  0188                     _ANSELbits	set	392
   359  001D                     STR_3:	
   360  001D  344D               	retlw	77	;'M'
   361  001E  346F               	retlw	111	;'o'
   362  001F  3476               	retlw	118	;'v'
   363  0020  3469               	retlw	105	;'i'
   364  0021  3465               	retlw	101	;'e'
   365  0022  346E               	retlw	110	;'n'
   366  0023  3464               	retlw	100	;'d'
   367  0024  346F               	retlw	111	;'o'
   368  0025  343A               	retlw	58	;':'
   369  0026  3420               	retlw	32	;' '
   370  0027  3425               	retlw	37	;'%'
   371  0028  3464               	retlw	100	;'d'
   372  0029  3400               	retlw	0
   373  002A                     STR_2:	
   374  002A  3454               	retlw	84	;'T'
   375  002B  3468               	retlw	104	;'h'
   376  002C  3465               	retlw	101	;'e'
   377  002D  3474               	retlw	116	;'t'
   378  002E  3461               	retlw	97	;'a'
   379  002F  3420               	retlw	32	;' '
   380  0030  343D               	retlw	61	;'='
   381  0031  3420               	retlw	32	;' '
   382  0032  3425               	retlw	37	;'%'
   383  0033  3464               	retlw	100	;'d'
   384  0034  3400               	retlw	0
   385  0035                     STR_1:	
   386  0035  3468               	retlw	104	;'h'
   387  0036  346F               	retlw	111	;'o'
   388  0037  346C               	retlw	108	;'l'
   389  0038  3461               	retlw	97	;'a'
   390  0039  3461               	retlw	97	;'a'
   391  003A  3461               	retlw	97	;'a'
   392  003B  3400               	retlw	0
   393                           
   394                           ; #config settings
   395  0000                     
   396                           	psect	cinit
   397  07F5                     start_initialization:	
   398  07F5                     __initialization:	
   399                           
   400                           ; Clear objects allocated to BANK0
   401  07F5  1383               	bcf	3,7	;select IRP bank0
   402  07F6  3020               	movlw	low __pbssBANK0
   403  07F7  0084               	movwf	4
   404  07F8  3058               	movlw	low (__pbssBANK0+56)
   405  07F9  120A  118A  23CC   	fcall	clear_ram0
   406  07FC                     end_of_initialization:	
   407                           ;End of C runtime variable initialization code
   408                           
   409  07FC                     __end_of__initialization:	
   410  07FC  0183               	clrf	3
   411  07FD  120A  118A  2E46   	ljmp	_main	;jump to C main() function
   412                           
   413                           	psect	bssBANK0
   414  0020                     __pbssBANK0:	
   415  0020                     wave_rev@a:	
   416  0020                     	ds	2
   417  0022                     wave_rev@i:	
   418  0022                     	ds	2
   419  0024                     wave_step@a:	
   420  0024                     	ds	2
   421  0026                     wave_step@i:	
   422  0026                     	ds	2
   423  0028                     full_step@i:	
   424  0028                     	ds	2
   425  002A                     _delta:	
   426  002A                     	ds	2
   427  002C                     _step_last:	
   428  002C                     	ds	2
   429  002E                     _theta:	
   430  002E                     	ds	2
   431  0030                     _step:	
   432  0030                     	ds	2
   433  0032                     full_rev@i:	
   434  0032                     	ds	1
   435  0033                     _i:	
   436  0033                     	ds	1
   437  0034                     _adc_read:	
   438  0034                     	ds	1
   439  0035                     _test:	
   440  0035                     	ds	20
   441  0049                     _show:	
   442  0049                     	ds	15
   443                           
   444                           	psect	clrtext
   445  03CC                     clear_ram0:	
   446                           ;	Called with FSR containing the base address, and
   447                           ;	W with the last address+1
   448                           
   449  03CC  0064               	clrwdt	;clear the watchdog before getting into this loop
   450  03CD                     clrloop0:	
   451  03CD  0180               	clrf	0	;clear RAM location pointed to by FSR
   452  03CE  0A84               	incf	4,f	;increment pointer
   453  03CF  0604               	xorwf	4,w	;XOR with final address
   454  03D0  1903               	btfsc	3,2	;have we reached the end yet?
   455  03D1  3400               	retlw	0	;all done for this memory range, return
   456  03D2  0604               	xorwf	4,w	;XOR again to restore value
   457  03D3  2BCD               	goto	clrloop0	;do the next byte
   458                           
   459                           	psect	cstackCOMMON
   460  0070                     __pcstackCOMMON:	
   461  0070                     ?_wave_step:	
   462  0070                     ?_ADC_option:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ??_ADC_option:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0070                     ?_ADC_freq:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ??_ADC_freq:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_ADC_channel:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ??_ADC_channel:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_ADC_conversion:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ??_ADC_conversion:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ?_LCD8_write:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ??_LCD8_write:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?_LCD8_cmd:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ??_LCD8_cmd:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?_LCD8_clear:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?_LCD8_begin:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     ?_oscilator_begin:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ??_oscilator_begin:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?_main:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ?___lwdiv:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     wave_step@steps:	
   517                           ; 2 bytes @ 0x0
   518                           
   519  0070                     ___lwdiv@divisor:	
   520                           ; 2 bytes @ 0x0
   521                           
   522                           
   523                           ; 2 bytes @ 0x0
   524  0070                     	ds	1
   525  0071                     ADC_freq@freq:	
   526  0071                     ADC_channel@channel:	
   527                           ; 1 bytes @ 0x1
   528                           
   529  0071                     LCD8_write@data:	
   530                           ; 1 bytes @ 0x1
   531                           
   532  0071                     oscilator_begin@freq:	
   533                           ; 1 bytes @ 0x1
   534                           
   535                           
   536                           ; 1 bytes @ 0x1
   537  0071                     	ds	1
   538  0072                     ??_wave_step:	
   539  0072                     ?_LCD8_strWrite:	
   540                           ; 1 bytes @ 0x2
   541                           
   542  0072                     ADC_option@option:	
   543                           ; 1 bytes @ 0x2
   544                           
   545  0072                     LCD8_cmd@data:	
   546                           ; 1 bytes @ 0x2
   547                           
   548  0072                     LCD8_strWrite@data:	
   549                           ; 1 bytes @ 0x2
   550                           
   551  0072                     ___lwdiv@dividend:	
   552                           ; 2 bytes @ 0x2
   553                           
   554                           
   555                           ; 2 bytes @ 0x2
   556  0072                     	ds	1
   557  0073                     ?_ADC_begin:	
   558  0073                     ?_LCD8_set_cursor:	
   559                           ; 1 bytes @ 0x3
   560                           
   561  0073                     ??_LCD8_clear:	
   562                           ; 1 bytes @ 0x3
   563                           
   564  0073                     ??_LCD8_begin:	
   565                           ; 1 bytes @ 0x3
   566                           
   567  0073                     ADC_begin@freq:	
   568                           ; 1 bytes @ 0x3
   569                           
   570  0073                     LCD8_set_cursor@column:	
   571                           ; 1 bytes @ 0x3
   572                           
   573                           
   574                           ; 1 bytes @ 0x3
   575  0073                     	ds	1
   576  0074                     ??_ADC_begin:	
   577  0074                     ??_LCD8_set_cursor:	
   578                           ; 1 bytes @ 0x4
   579                           
   580  0074                     ??_LCD8_strWrite:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     ??___lwdiv:	
   584                           ; 1 bytes @ 0x4
   585                           
   586  0074                     ADC_begin@option:	
   587                           ; 1 bytes @ 0x4
   588                           
   589                           
   590                           ; 1 bytes @ 0x4
   591  0074                     	ds	1
   592  0075                     LCD8_set_cursor@cursor:	
   593  0075                     LCD8_strWrite@i:	
   594                           ; 1 bytes @ 0x5
   595                           
   596  0075                     ___lwdiv@quotient:	
   597                           ; 1 bytes @ 0x5
   598                           
   599                           
   600                           ; 2 bytes @ 0x5
   601  0075                     	ds	1
   602  0076                     LCD8_set_cursor@row:	
   603                           
   604                           ; 1 bytes @ 0x6
   605  0076                     	ds	1
   606  0077                     ___lwdiv@counter:	
   607                           
   608                           ; 1 bytes @ 0x7
   609  0077                     	ds	1
   610  0078                     ?___lwmod:	
   611  0078                     ___lwmod@divisor:	
   612                           ; 2 bytes @ 0x8
   613                           
   614                           
   615                           ; 2 bytes @ 0x8
   616  0078                     	ds	2
   617  007A                     ___lwmod@dividend:	
   618                           
   619                           ; 2 bytes @ 0xA
   620  007A                     	ds	2
   621  007C                     ??___lwmod:	
   622                           
   623                           ; 1 bytes @ 0xC
   624  007C                     	ds	1
   625  007D                     ___lwmod@counter:	
   626                           
   627                           ; 1 bytes @ 0xD
   628  007D                     	ds	1
   629                           
   630                           	psect	cstackBANK0
   631  0058                     __pcstackBANK0:	
   632  0058                     ?_sprintf:	
   633  0058                     sprintf@f:	
   634                           ; 2 bytes @ 0x0
   635                           
   636                           
   637                           ; 1 bytes @ 0x0
   638  0058                     	ds	3
   639  005B                     ??_sprintf:	
   640                           
   641                           ; 1 bytes @ 0x3
   642  005B                     	ds	3
   643  005E                     sprintf@ap:	
   644                           
   645                           ; 1 bytes @ 0x6
   646  005E                     	ds	1
   647  005F                     sprintf@flag:	
   648                           
   649                           ; 1 bytes @ 0x7
   650  005F                     	ds	1
   651  0060                     sprintf@prec:	
   652                           
   653                           ; 1 bytes @ 0x8
   654  0060                     	ds	1
   655  0061                     sprintf@val:	
   656                           
   657                           ; 2 bytes @ 0x9
   658  0061                     	ds	2
   659  0063                     sprintf@sp:	
   660                           
   661                           ; 1 bytes @ 0xB
   662  0063                     	ds	1
   663  0064                     sprintf@c:	
   664                           
   665                           ; 1 bytes @ 0xC
   666  0064                     	ds	1
   667  0065                     ??_main:	
   668                           
   669                           ; 1 bytes @ 0xD
   670  0065                     	ds	3
   671                           
   672                           	psect	maintext
   673  0646                     __pmaintext:	
   674 ;;
   675 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   676 ;;
   677 ;; *************** function _main *****************
   678 ;; Defined at:
   679 ;;		line 40 in file "main_stepper.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;		None
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      void 
   686 ;; Registers used:
   687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   688 ;; Tracked objects:
   689 ;;		On entry : B00/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   693 ;;      Params:         0       0       0       0       0
   694 ;;      Locals:         0       0       0       0       0
   695 ;;      Temps:          0       3       0       0       0
   696 ;;      Totals:         0       3       0       0       0
   697 ;;Total ram usage:        3 bytes
   698 ;; Hardware stack levels required when called:    2
   699 ;; This function calls:
   700 ;;		_ADC_begin
   701 ;;		_ADC_conversion
   702 ;;		_LCD8_begin
   703 ;;		_LCD8_clear
   704 ;;		_LCD8_set_cursor
   705 ;;		_LCD8_strWrite
   706 ;;		___lwdiv
   707 ;;		_oscilator_begin
   708 ;;		_sprintf
   709 ;;		_wave_step
   710 ;; This function is called by:
   711 ;;		Startup code after reset
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           
   716                           ;psect for function _main
   717  0646                     _main:	
   718                           
   719                           ;main_stepper.c: 42:     oscilator_begin(7);
   720                           
   721                           ;incstack = 0
   722                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   723  0646  3007               	movlw	7
   724  0647  120A  118A  23FA  120A  118A  	fcall	_oscilator_begin
   725                           
   726                           ;main_stepper.c: 43:     ADC_begin(0, 2);
   727  064C  3002               	movlw	2
   728  064D  1283               	bcf	3,5	;RP0=0, select bank0
   729  064E  1303               	bcf	3,6	;RP1=0, select bank0
   730  064F  00E5               	movwf	??_main
   731  0650  0865               	movf	??_main,w
   732  0651  00F3               	movwf	ADC_begin@freq
   733  0652  3000               	movlw	0
   734  0653  120A  118A  2443  120A  118A  	fcall	_ADC_begin
   735                           
   736                           ;main_stepper.c: 44:     TRISB = 0;
   737  0658  1683               	bsf	3,5	;RP0=1, select bank1
   738  0659  1303               	bcf	3,6	;RP1=0, select bank1
   739  065A  0186               	clrf	6	;volatile
   740                           
   741                           ;main_stepper.c: 45:     TRISE = 1;
   742  065B  3001               	movlw	1
   743  065C  0089               	movwf	9	;volatile
   744                           
   745                           ;main_stepper.c: 46:     ANSELbits.ANS1 = 0;
   746  065D  1683               	bsf	3,5	;RP0=1, select bank3
   747  065E  1703               	bsf	3,6	;RP1=1, select bank3
   748  065F  1088               	bcf	8,1	;volatile
   749                           
   750                           ;main_stepper.c: 47:     ANSELbits.ANS2 = 0;
   751  0660  1108               	bcf	8,2	;volatile
   752                           
   753                           ;main_stepper.c: 48:     TRISA1 = 0;
   754  0661  1683               	bsf	3,5	;RP0=1, select bank1
   755  0662  1303               	bcf	3,6	;RP1=0, select bank1
   756  0663  1085               	bcf	5,1	;volatile
   757                           
   758                           ;main_stepper.c: 49:     TRISA2 = 0;
   759  0664  1105               	bcf	5,2	;volatile
   760                           
   761                           ;main_stepper.c: 50:     PORTA = 0;
   762  0665  1283               	bcf	3,5	;RP0=0, select bank0
   763  0666  1303               	bcf	3,6	;RP1=0, select bank0
   764  0667  0185               	clrf	5	;volatile
   765                           
   766                           ;main_stepper.c: 51:     PORTB = 0;
   767  0668  0186               	clrf	6	;volatile
   768                           
   769                           ;main_stepper.c: 52:     TRISD = 0;
   770  0669  1683               	bsf	3,5	;RP0=1, select bank1
   771  066A  1303               	bcf	3,6	;RP1=0, select bank1
   772  066B  0188               	clrf	8	;volatile
   773                           
   774                           ;main_stepper.c: 53:     PORTD = 0;
   775  066C  1283               	bcf	3,5	;RP0=0, select bank0
   776  066D  1303               	bcf	3,6	;RP1=0, select bank0
   777  066E  0188               	clrf	8	;volatile
   778                           
   779                           ;main_stepper.c: 54:     LCD8_begin();
   780  066F  120A  118A  24F3  120A  118A  	fcall	_LCD8_begin
   781                           
   782                           ;main_stepper.c: 55:     LCD8_clear();
   783  0674  120A  118A  23D4  120A  118A  	fcall	_LCD8_clear
   784                           
   785                           ;main_stepper.c: 56:     LCD8_set_cursor(1, 1);
   786  0679  01F3               	clrf	LCD8_set_cursor@column
   787  067A  0AF3               	incf	LCD8_set_cursor@column,f
   788  067B  3001               	movlw	1
   789  067C  120A  118A  242C  120A  118A  	fcall	_LCD8_set_cursor
   790                           
   791                           ;main_stepper.c: 57:     LCD8_strWrite("holaaa");
   792  0681  3023               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   793  0682  00F2               	movwf	LCD8_strWrite@data
   794  0683  3080               	movlw	128
   795  0684  00F3               	movwf	LCD8_strWrite@data+1
   796  0685  120A  118A  245D  120A  118A  	fcall	_LCD8_strWrite
   797                           
   798                           ;main_stepper.c: 58:     _delay((unsigned long)((5000)*(8000000/4000.0)));
   799  068A  3033               	movlw	51
   800  068B  1283               	bcf	3,5	;RP0=0, select bank0
   801  068C  1303               	bcf	3,6	;RP1=0, select bank0
   802  068D  00E7               	movwf	??_main+2
   803  068E  30BB               	movlw	187
   804  068F  00E6               	movwf	??_main+1
   805  0690  30DF               	movlw	223
   806  0691  00E5               	movwf	??_main
   807  0692                     u937:	
   808  0692  0BE5               	decfsz	??_main,f
   809  0693  2E92               	goto	u937
   810  0694  0BE6               	decfsz	??_main+1,f
   811  0695  2E92               	goto	u937
   812  0696  0BE7               	decfsz	??_main+2,f
   813  0697  2E92               	goto	u937
   814  0698                     l1543:	
   815                           
   816                           ;main_stepper.c: 60:         LCD8_clear();
   817  0698  120A  118A  23D4  120A  118A  	fcall	_LCD8_clear
   818                           
   819                           ;main_stepper.c: 61:         adc_read = ADC_conversion();
   820  069D  120A  118A  23C5  120A  118A  	fcall	_ADC_conversion
   821  06A2  1283               	bcf	3,5	;RP0=0, select bank0
   822  06A3  1303               	bcf	3,6	;RP1=0, select bank0
   823  06A4  00E5               	movwf	??_main
   824  06A5  0865               	movf	??_main,w
   825  06A6  00B4               	movwf	_adc_read
   826                           
   827                           ;main_stepper.c: 62:         step = adc_read * 8U;
   828  06A7  0834               	movf	_adc_read,w
   829  06A8  00E5               	movwf	??_main
   830  06A9  01E6               	clrf	??_main+1
   831  06AA  1003               	clrc
   832  06AB  0DE5               	rlf	??_main,f
   833  06AC  0DE6               	rlf	??_main+1,f
   834  06AD  1003               	clrc
   835  06AE  0DE5               	rlf	??_main,f
   836  06AF  0DE6               	rlf	??_main+1,f
   837  06B0  1003               	clrc
   838  06B1  0DE5               	rlf	??_main,f
   839  06B2  0DE6               	rlf	??_main+1,f
   840  06B3  0865               	movf	??_main,w
   841  06B4  00B0               	movwf	_step
   842  06B5  0866               	movf	??_main+1,w
   843  06B6  00B1               	movwf	_step+1
   844                           
   845                           ;main_stepper.c: 63:         theta = step / 6;
   846  06B7  3006               	movlw	6
   847  06B8  00F0               	movwf	___lwdiv@divisor
   848  06B9  3000               	movlw	0
   849  06BA  00F1               	movwf	___lwdiv@divisor+1
   850  06BB  0831               	movf	_step+1,w
   851  06BC  00F3               	movwf	___lwdiv@dividend+1
   852  06BD  0830               	movf	_step,w
   853  06BE  00F2               	movwf	___lwdiv@dividend
   854  06BF  120A  118A  24B7  120A  118A  	fcall	___lwdiv
   855  06C4  0871               	movf	?___lwdiv+1,w
   856  06C5  1283               	bcf	3,5	;RP0=0, select bank0
   857  06C6  1303               	bcf	3,6	;RP1=0, select bank0
   858  06C7  00AF               	movwf	_theta+1
   859  06C8  0870               	movf	?___lwdiv,w
   860  06C9  00AE               	movwf	_theta
   861                           
   862                           ;main_stepper.c: 64:         sprintf(show, "Theta = %d", theta);
   863  06CA  3018               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   864  06CB  00E5               	movwf	??_main
   865  06CC  0865               	movf	??_main,w
   866  06CD  00D8               	movwf	sprintf@f
   867  06CE  082F               	movf	_theta+1,w
   868  06CF  00DA               	movwf	?_sprintf+2
   869  06D0  082E               	movf	_theta,w
   870  06D1  00D9               	movwf	?_sprintf+1
   871  06D2  3049               	movlw	(low (_show| 0))& (0+255)
   872  06D3  120A  118A  271D  120A  118A  	fcall	_sprintf
   873                           
   874                           ;main_stepper.c: 65:         sprintf(test, "Moviendo: %d", step);
   875  06D8  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   876  06D9  1283               	bcf	3,5	;RP0=0, select bank0
   877  06DA  1303               	bcf	3,6	;RP1=0, select bank0
   878  06DB  00E5               	movwf	??_main
   879  06DC  0865               	movf	??_main,w
   880  06DD  00D8               	movwf	sprintf@f
   881  06DE  0831               	movf	_step+1,w
   882  06DF  00DA               	movwf	?_sprintf+2
   883  06E0  0830               	movf	_step,w
   884  06E1  00D9               	movwf	?_sprintf+1
   885  06E2  3035               	movlw	(low (_test| 0))& (0+255)
   886  06E3  120A  118A  271D  120A  118A  	fcall	_sprintf
   887                           
   888                           ;main_stepper.c: 66:         LCD8_set_cursor(1, 1);
   889  06E8  01F3               	clrf	LCD8_set_cursor@column
   890  06E9  0AF3               	incf	LCD8_set_cursor@column,f
   891  06EA  3001               	movlw	1
   892  06EB  120A  118A  242C  120A  118A  	fcall	_LCD8_set_cursor
   893                           
   894                           ;main_stepper.c: 67:         LCD8_strWrite(show);
   895  06F0  3049               	movlw	(low (_show| 0))& (0+255)
   896  06F1  00F2               	movwf	LCD8_strWrite@data
   897  06F2  3000               	movlw	0
   898  06F3  00F3               	movwf	LCD8_strWrite@data+1
   899  06F4  120A  118A  245D  120A  118A  	fcall	_LCD8_strWrite
   900                           
   901                           ;main_stepper.c: 69:         LCD8_set_cursor(2, 1);
   902  06F9  01F3               	clrf	LCD8_set_cursor@column
   903  06FA  0AF3               	incf	LCD8_set_cursor@column,f
   904  06FB  3002               	movlw	2
   905  06FC  120A  118A  242C  120A  118A  	fcall	_LCD8_set_cursor
   906                           
   907                           ;main_stepper.c: 70:         LCD8_strWrite(test);
   908  0701  3035               	movlw	(low (_test| 0))& (0+255)
   909  0702  00F2               	movwf	LCD8_strWrite@data
   910  0703  3000               	movlw	0
   911  0704  00F3               	movwf	LCD8_strWrite@data+1
   912  0705  120A  118A  245D  120A  118A  	fcall	_LCD8_strWrite
   913                           
   914                           ;main_stepper.c: 77:         if(RE3){
   915  070A  1283               	bcf	3,5	;RP0=0, select bank0
   916  070B  1303               	bcf	3,6	;RP1=0, select bank0
   917  070C  1D89               	btfss	9,3	;volatile
   918  070D  2E98               	goto	l1543
   919  070E                     l148:	
   920  070E  1989               	btfsc	9,3	;volatile
   921  070F  2F0E               	goto	l148
   922                           
   923                           ;main_stepper.c: 79:             wave_step(step);
   924  0710  0831               	movf	_step+1,w
   925  0711  00F1               	movwf	wave_step@steps+1
   926  0712  0830               	movf	_step,w
   927  0713  00F0               	movwf	wave_step@steps
   928  0714  120A  118A  2547  120A  118A  	fcall	_wave_step
   929                           
   930                           ;main_stepper.c: 80:             PORTD = 0;
   931  0719  1283               	bcf	3,5	;RP0=0, select bank0
   932  071A  1303               	bcf	3,6	;RP1=0, select bank0
   933  071B  0188               	clrf	8	;volatile
   934  071C  2E98               	goto	l1543
   935  071D                     __end_of_main:	
   936                           
   937                           	psect	text1
   938  0547                     __ptext1:	
   939 ;; *************** function _wave_step *****************
   940 ;; Defined at:
   941 ;;		line 35 in file "stepper.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;  steps           2    0[COMMON] unsigned int 
   944 ;; Auto vars:     Size  Location     Type
   945 ;;		None
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      void 
   948 ;; Registers used:
   949 ;;		wreg, status,2, status,0
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   955 ;;      Params:         2       0       0       0       0
   956 ;;      Locals:         0       0       0       0       0
   957 ;;      Temps:          2       0       0       0       0
   958 ;;      Totals:         4       0       0       0       0
   959 ;;Total ram usage:        4 bytes
   960 ;; Hardware stack levels used:    1
   961 ;; This function calls:
   962 ;;		Nothing
   963 ;; This function is called by:
   964 ;;		_main
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           
   969                           ;psect for function _wave_step
   970  0547                     _wave_step:	
   971                           
   972                           ;stepper.c: 35: wave_step(uint16_t steps);stepper.c: 36:     {;stepper.c: 37:     static
      +                           uint16_t i, a;;stepper.c: 38:     i = 0;
   973                           
   974                           ;incstack = 0
   975                           ; Regs used in _wave_step: [wreg+status,2+status,0]
   976  0547  1283               	bcf	3,5	;RP0=0, select bank0
   977  0548  1303               	bcf	3,6	;RP1=0, select bank0
   978  0549  01A6               	clrf	wave_step@i
   979  054A  01A7               	clrf	wave_step@i+1
   980  054B                     l176:	
   981                           ;stepper.c: 59:         }
   982                           
   983                           ;stepper.c: 39:     while(i<steps)
   984                           
   985                           
   986                           ;stepper.c: 39:     while(i<steps)
   987  054B  0871               	movf	wave_step@steps+1,w
   988  054C  0227               	subwf	wave_step@i+1,w
   989  054D  1D03               	skipz
   990  054E  2D51               	goto	u755
   991  054F  0870               	movf	wave_step@steps,w
   992  0550  0226               	subwf	wave_step@i,w
   993  0551                     u755:	
   994  0551  1803               	btfsc	3,0
   995  0552  0008               	return
   996                           
   997                           ;stepper.c: 40:     {;stepper.c: 41:         a = i%4;
   998  0553  3003               	movlw	3
   999  0554  0526               	andwf	wave_step@i,w
  1000  0555  00A4               	movwf	wave_step@a
  1001  0556  3000               	movlw	0
  1002  0557  0527               	andwf	wave_step@i+1,w
  1003  0558  00A5               	movwf	wave_step@a+1
  1004                           
  1005                           ;stepper.c: 42:         if (a == 1){
  1006  0559  0324               	decf	wave_step@a,w
  1007  055A  0425               	iorwf	wave_step@a+1,w
  1008  055B  1D03               	btfss	3,2
  1009  055C  2D68               	goto	l1473
  1010                           
  1011                           ;stepper.c: 43:             PORTD = 1;
  1012  055D  3001               	movlw	1
  1013  055E  0088               	movwf	8	;volatile
  1014                           
  1015                           ;stepper.c: 44:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1016  055F  300D               	movlw	13
  1017  0560  00F3               	movwf	??_wave_step+1
  1018  0561  30FB               	movlw	251
  1019  0562  00F2               	movwf	??_wave_step
  1020  0563                     u947:	
  1021  0563  0BF2               	decfsz	??_wave_step,f
  1022  0564  2D63               	goto	u947
  1023  0565  0BF3               	decfsz	??_wave_step+1,f
  1024  0566  2D63               	goto	u947
  1025  0567  2D68               	nop2
  1026  0568                     l1473:	
  1027                           
  1028                           ;stepper.c: 46:         if (a == 2){
  1029  0568  3002               	movlw	2
  1030  0569  1283               	bcf	3,5	;RP0=0, select bank0
  1031  056A  1303               	bcf	3,6	;RP1=0, select bank0
  1032  056B  0624               	xorwf	wave_step@a,w
  1033  056C  0425               	iorwf	wave_step@a+1,w
  1034  056D  1D03               	btfss	3,2
  1035  056E  2D7A               	goto	l1477
  1036                           
  1037                           ;stepper.c: 47:             PORTD = 2;
  1038  056F  3002               	movlw	2
  1039  0570  0088               	movwf	8	;volatile
  1040                           
  1041                           ;stepper.c: 48:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1042  0571  300D               	movlw	13
  1043  0572  00F3               	movwf	??_wave_step+1
  1044  0573  30FB               	movlw	251
  1045  0574  00F2               	movwf	??_wave_step
  1046  0575                     u957:	
  1047  0575  0BF2               	decfsz	??_wave_step,f
  1048  0576  2D75               	goto	u957
  1049  0577  0BF3               	decfsz	??_wave_step+1,f
  1050  0578  2D75               	goto	u957
  1051  0579  2D7A               	nop2
  1052  057A                     l1477:	
  1053                           
  1054                           ;stepper.c: 50:         if (a == 3){
  1055  057A  3003               	movlw	3
  1056  057B  1283               	bcf	3,5	;RP0=0, select bank0
  1057  057C  1303               	bcf	3,6	;RP1=0, select bank0
  1058  057D  0624               	xorwf	wave_step@a,w
  1059  057E  0425               	iorwf	wave_step@a+1,w
  1060  057F  1D03               	btfss	3,2
  1061  0580  2D8C               	goto	l1481
  1062                           
  1063                           ;stepper.c: 51:             PORTD = 4;
  1064  0581  3004               	movlw	4
  1065  0582  0088               	movwf	8	;volatile
  1066                           
  1067                           ;stepper.c: 52:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1068  0583  300D               	movlw	13
  1069  0584  00F3               	movwf	??_wave_step+1
  1070  0585  30FB               	movlw	251
  1071  0586  00F2               	movwf	??_wave_step
  1072  0587                     u967:	
  1073  0587  0BF2               	decfsz	??_wave_step,f
  1074  0588  2D87               	goto	u967
  1075  0589  0BF3               	decfsz	??_wave_step+1,f
  1076  058A  2D87               	goto	u967
  1077  058B  2D8C               	nop2
  1078  058C                     l1481:	
  1079                           
  1080                           ;stepper.c: 54:         if (a == 0){
  1081  058C  1283               	bcf	3,5	;RP0=0, select bank0
  1082  058D  1303               	bcf	3,6	;RP1=0, select bank0
  1083  058E  0824               	movf	wave_step@a,w
  1084  058F  0425               	iorwf	wave_step@a+1,w
  1085  0590  1D03               	btfss	3,2
  1086  0591  2D9D               	goto	l181
  1087                           
  1088                           ;stepper.c: 55:             PORTD = 8;
  1089  0592  3008               	movlw	8
  1090  0593  0088               	movwf	8	;volatile
  1091                           
  1092                           ;stepper.c: 56:             _delay((unsigned long)((5)*(8000000/4000.0)));
  1093  0594  300D               	movlw	13
  1094  0595  00F3               	movwf	??_wave_step+1
  1095  0596  30FB               	movlw	251
  1096  0597  00F2               	movwf	??_wave_step
  1097  0598                     u977:	
  1098  0598  0BF2               	decfsz	??_wave_step,f
  1099  0599  2D98               	goto	u977
  1100  059A  0BF3               	decfsz	??_wave_step+1,f
  1101  059B  2D98               	goto	u977
  1102  059C  2D9D               	nop2
  1103  059D                     l181:	
  1104                           ;stepper.c: 57:         }
  1105                           
  1106                           
  1107                           ;stepper.c: 58:         i++;
  1108  059D  3001               	movlw	1
  1109  059E  1283               	bcf	3,5	;RP0=0, select bank0
  1110  059F  1303               	bcf	3,6	;RP1=0, select bank0
  1111  05A0  07A6               	addwf	wave_step@i,f
  1112  05A1  1803               	skipnc
  1113  05A2  0AA7               	incf	wave_step@i+1,f
  1114  05A3  3000               	movlw	0
  1115  05A4  07A7               	addwf	wave_step@i+1,f
  1116  05A5  2D4B               	goto	l176
  1117  05A6                     __end_of_wave_step:	
  1118                           
  1119                           	psect	text2
  1120  071D                     __ptext2:	
  1121 ;; *************** function _sprintf *****************
  1122 ;; Defined at:
  1123 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;  sp              1    wreg     PTR unsigned char 
  1126 ;;		 -> test(20), show(15), 
  1127 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1128 ;;		 -> STR_3(13), STR_2(11), 
  1129 ;; Auto vars:     Size  Location     Type
  1130 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1131 ;;		 -> test(20), show(15), 
  1132 ;;  tmpval          4    0        struct .
  1133 ;;  val             2    9[BANK0 ] unsigned int 
  1134 ;;  cp              2    0        PTR const unsigned char 
  1135 ;;  len             2    0        unsigned int 
  1136 ;;  c               1   12[BANK0 ] unsigned char 
  1137 ;;  prec            1    8[BANK0 ] char 
  1138 ;;  flag            1    7[BANK0 ] unsigned char 
  1139 ;;  ap              1    6[BANK0 ] PTR void [1]
  1140 ;;		 -> ?_sprintf(2), 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  2    0[BANK0 ] int 
  1143 ;; Registers used:
  1144 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1150 ;;      Params:         0       3       0       0       0
  1151 ;;      Locals:         0       7       0       0       0
  1152 ;;      Temps:          0       3       0       0       0
  1153 ;;      Totals:         0      13       0       0       0
  1154 ;;Total ram usage:       13 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; Hardware stack levels required when called:    1
  1157 ;; This function calls:
  1158 ;;		___lwdiv
  1159 ;;		___lwmod
  1160 ;; This function is called by:
  1161 ;;		_main
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           
  1166                           ;psect for function _sprintf
  1167  071D                     _sprintf:	
  1168                           
  1169                           ;incstack = 0
  1170                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1171                           ;sprintf@sp stored from wreg
  1172  071D  1283               	bcf	3,5	;RP0=0, select bank0
  1173  071E  1303               	bcf	3,6	;RP1=0, select bank0
  1174  071F  00E3               	movwf	sprintf@sp
  1175                           
  1176                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  1177  0720  3059               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1178  0721  00DB               	movwf	??_sprintf
  1179  0722  085B               	movf	??_sprintf,w
  1180  0723  00DE               	movwf	sprintf@ap
  1181  0724                     l1455:	
  1182                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  1183                           
  1184                           
  1185                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  1186  0724  3001               	movlw	1
  1187  0725  07D8               	addwf	sprintf@f,f
  1188  0726  30FF               	movlw	-1
  1189  0727  0758               	addwf	sprintf@f,w
  1190  0728  0084               	movwf	4
  1191  0729  120A  118A  200D  120A  118A  	fcall	stringdir
  1192  072E  00DB               	movwf	??_sprintf
  1193  072F  085B               	movf	??_sprintf,w
  1194  0730  00E4               	movwf	sprintf@c
  1195  0731  0864               	movf	sprintf@c,w
  1196  0732  1903               	btfsc	3,2
  1197  0733  2FF0               	goto	l1457
  1198                           
  1199                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  1200  0734  3025               	movlw	37
  1201  0735  0664               	xorwf	sprintf@c,w
  1202  0736  1903               	btfsc	3,2
  1203  0737  2F44               	goto	l1411
  1204                           
  1205                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  1206  0738  0864               	movf	sprintf@c,w
  1207  0739  00DB               	movwf	??_sprintf
  1208  073A  0863               	movf	sprintf@sp,w
  1209  073B  0084               	movwf	4
  1210  073C  085B               	movf	??_sprintf,w
  1211  073D  1383               	bcf	3,7	;select IRP bank0
  1212  073E  0080               	movwf	0
  1213  073F  3001               	movlw	1
  1214  0740  00DB               	movwf	??_sprintf
  1215  0741  085B               	movf	??_sprintf,w
  1216  0742  07E3               	addwf	sprintf@sp,f
  1217                           
  1218                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  1219  0743  2F24               	goto	l1455
  1220  0744                     l1411:	
  1221                           
  1222                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  1223  0744  01DF               	clrf	sprintf@flag
  1224                           
  1225                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  1226  0745  3001               	movlw	1
  1227  0746  07D8               	addwf	sprintf@f,f
  1228  0747  30FF               	movlw	-1
  1229  0748  0758               	addwf	sprintf@f,w
  1230  0749  0084               	movwf	4
  1231  074A  120A  118A  200D  120A  118A  	fcall	stringdir
  1232  074F  00E4               	movwf	sprintf@c
  1233  0750  00DB               	movwf	??_sprintf
  1234  0751  01DC               	clrf	??_sprintf+1
  1235                           
  1236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1237                           ; Switch size 1, requested type "simple"
  1238                           ; Number of cases is 1, Range of values is 0 to 0
  1239                           ; switch strategies available:
  1240                           ; Name         Instructions Cycles
  1241                           ; simple_byte            4     3 (average)
  1242                           ; direct_byte           11     8 (fixed)
  1243                           ; jumptable            260     6 (fixed)
  1244                           ;	Chosen strategy is simple_byte
  1245  0752  085C               	movf	??_sprintf+1,w
  1246  0753  3A00               	xorlw	0	; case 0
  1247  0754  1903               	skipnz
  1248  0755  2F57               	goto	l1671
  1249  0756  2F24               	goto	l1455
  1250  0757                     l1671:	
  1251                           
  1252                           ; Switch size 1, requested type "simple"
  1253                           ; Number of cases is 3, Range of values is 0 to 105
  1254                           ; switch strategies available:
  1255                           ; Name         Instructions Cycles
  1256                           ; simple_byte           10     6 (average)
  1257                           ; jumptable            260     6 (fixed)
  1258                           ;	Chosen strategy is simple_byte
  1259  0757  085B               	movf	??_sprintf,w
  1260  0758  3A00               	xorlw	0	; case 0
  1261  0759  1903               	skipnz
  1262  075A  2FF0               	goto	l1457
  1263  075B  3A64               	xorlw	100	; case 100
  1264  075C  1903               	skipnz
  1265  075D  2F62               	goto	l1417
  1266  075E  3A0D               	xorlw	13	; case 105
  1267  075F  1903               	skipnz
  1268  0760  2F62               	goto	l1417
  1269  0761  2F24               	goto	l1455
  1270  0762                     l1417:	
  1271                           
  1272                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1273  0762  085E               	movf	sprintf@ap,w
  1274  0763  0084               	movwf	4
  1275  0764  1383               	bcf	3,7	;select IRP bank0
  1276  0765  0800               	movf	0,w
  1277  0766  00E1               	movwf	sprintf@val
  1278  0767  0A84               	incf	4,f
  1279  0768  0800               	movf	0,w
  1280  0769  00E2               	movwf	sprintf@val+1
  1281  076A  3002               	movlw	2
  1282  076B  00DB               	movwf	??_sprintf
  1283  076C  085B               	movf	??_sprintf,w
  1284  076D  07DE               	addwf	sprintf@ap,f
  1285                           
  1286                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  1287  076E  1FE2               	btfss	sprintf@val+1,7
  1288  076F  2F79               	goto	l1427
  1289                           
  1290                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  1291  0770  3003               	movlw	3
  1292  0771  00DB               	movwf	??_sprintf
  1293  0772  085B               	movf	??_sprintf,w
  1294  0773  04DF               	iorwf	sprintf@flag,f
  1295                           
  1296                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  1297  0774  09E1               	comf	sprintf@val,f
  1298  0775  09E2               	comf	sprintf@val+1,f
  1299  0776  0AE1               	incf	sprintf@val,f
  1300  0777  1903               	skipnz
  1301  0778  0AE2               	incf	sprintf@val+1,f
  1302  0779                     l1427:	
  1303                           
  1304                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1305  0779  01E4               	clrf	sprintf@c
  1306  077A  0AE4               	incf	sprintf@c,f
  1307  077B                     l1433:	
  1308                           
  1309                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  1310  077B  0864               	movf	sprintf@c,w
  1311  077C  00DB               	movwf	??_sprintf
  1312  077D  075B               	addwf	??_sprintf,w
  1313  077E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1314  077F  0084               	movwf	4
  1315  0780  120A  118A  200D  120A  118A  	fcall	stringdir
  1316  0785  00DC               	movwf	??_sprintf+1
  1317  0786  120A  118A  200D  120A  118A  	fcall	stringdir
  1318  078B  00DD               	movwf	??_sprintf+2
  1319  078C  085D               	movf	??_sprintf+2,w
  1320  078D  0262               	subwf	sprintf@val+1,w
  1321  078E  1D03               	skipz
  1322  078F  2F92               	goto	u665
  1323  0790  085C               	movf	??_sprintf+1,w
  1324  0791  0261               	subwf	sprintf@val,w
  1325  0792                     u665:	
  1326  0792  1C03               	btfss	3,0
  1327  0793  2F9C               	goto	l1439
  1328  0794  3001               	movlw	1
  1329  0795  00DB               	movwf	??_sprintf
  1330  0796  085B               	movf	??_sprintf,w
  1331  0797  07E4               	addwf	sprintf@c,f
  1332  0798  3005               	movlw	5
  1333  0799  0664               	xorwf	sprintf@c,w
  1334  079A  1D03               	btfss	3,2
  1335  079B  2F7B               	goto	l1433
  1336  079C                     l1439:	
  1337                           
  1338                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  1339  079C  085F               	movf	sprintf@flag,w
  1340  079D  3903               	andlw	3
  1341  079E  1903               	btfsc	3,2
  1342  079F  2FAB               	goto	l1445
  1343                           
  1344                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  1345  07A0  302D               	movlw	45
  1346  07A1  00DB               	movwf	??_sprintf
  1347  07A2  0863               	movf	sprintf@sp,w
  1348  07A3  0084               	movwf	4
  1349  07A4  085B               	movf	??_sprintf,w
  1350  07A5  1383               	bcf	3,7	;select IRP bank0
  1351  07A6  0080               	movwf	0
  1352  07A7  3001               	movlw	1
  1353  07A8  00DB               	movwf	??_sprintf
  1354  07A9  085B               	movf	??_sprintf,w
  1355  07AA  07E3               	addwf	sprintf@sp,f
  1356  07AB                     l1445:	
  1357                           
  1358                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  1359  07AB  0864               	movf	sprintf@c,w
  1360  07AC  00DB               	movwf	??_sprintf
  1361  07AD  085B               	movf	??_sprintf,w
  1362  07AE  00E0               	movwf	sprintf@prec
  1363  07AF                     l1453:	
  1364                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  1365                           
  1366                           
  1367                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  1368  07AF  30FF               	movlw	255
  1369  07B0  00DB               	movwf	??_sprintf
  1370  07B1  085B               	movf	??_sprintf,w
  1371  07B2  07E0               	addwf	sprintf@prec,f
  1372  07B3  0A60               	incf	sprintf@prec,w
  1373  07B4  1903               	btfsc	3,2
  1374  07B5  2F24               	goto	l1455
  1375                           
  1376                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  1377  07B6  300A               	movlw	10
  1378  07B7  00F8               	movwf	___lwmod@divisor
  1379  07B8  3000               	movlw	0
  1380  07B9  00F9               	movwf	___lwmod@divisor+1
  1381  07BA  0860               	movf	sprintf@prec,w
  1382  07BB  00DB               	movwf	??_sprintf
  1383  07BC  075B               	addwf	??_sprintf,w
  1384  07BD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1385  07BE  0084               	movwf	4
  1386  07BF  120A  118A  200D  120A  118A  	fcall	stringdir
  1387  07C4  00F0               	movwf	___lwdiv@divisor
  1388  07C5  120A  118A  200D  120A  118A  	fcall	stringdir
  1389  07CA  00F1               	movwf	___lwdiv@divisor+1
  1390  07CB  0862               	movf	sprintf@val+1,w
  1391  07CC  00F3               	movwf	___lwdiv@dividend+1
  1392  07CD  0861               	movf	sprintf@val,w
  1393  07CE  00F2               	movwf	___lwdiv@dividend
  1394  07CF  120A  118A  24B7  120A  118A  	fcall	___lwdiv
  1395  07D4  0871               	movf	?___lwdiv+1,w
  1396  07D5  00FB               	movwf	___lwmod@dividend+1
  1397  07D6  0870               	movf	?___lwdiv,w
  1398  07D7  00FA               	movwf	___lwmod@dividend
  1399  07D8  120A  118A  2485  120A  118A  	fcall	___lwmod
  1400  07DD  0878               	movf	?___lwmod,w
  1401  07DE  3E30               	addlw	48
  1402  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  1403  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  1404  07E1  00DC               	movwf	??_sprintf+1
  1405  07E2  085C               	movf	??_sprintf+1,w
  1406  07E3  00E4               	movwf	sprintf@c
  1407                           
  1408                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  1409  07E4  0864               	movf	sprintf@c,w
  1410  07E5  00DB               	movwf	??_sprintf
  1411  07E6  0863               	movf	sprintf@sp,w
  1412  07E7  0084               	movwf	4
  1413  07E8  085B               	movf	??_sprintf,w
  1414  07E9  1383               	bcf	3,7	;select IRP bank0
  1415  07EA  0080               	movwf	0
  1416  07EB  3001               	movlw	1
  1417  07EC  00DB               	movwf	??_sprintf
  1418  07ED  085B               	movf	??_sprintf,w
  1419  07EE  07E3               	addwf	sprintf@sp,f
  1420  07EF  2FAF               	goto	l1453
  1421  07F0                     l1457:	
  1422                           
  1423                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  1424  07F0  0863               	movf	sprintf@sp,w
  1425  07F1  0084               	movwf	4
  1426  07F2  1383               	bcf	3,7	;select IRP bank0
  1427  07F3  0180               	clrf	0
  1428  07F4  0008               	return
  1429  07F5                     __end_of_sprintf:	
  1430                           
  1431                           	psect	text3
  1432  0485                     __ptext3:	
  1433 ;; *************** function ___lwmod *****************
  1434 ;; Defined at:
  1435 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;  divisor         2    8[COMMON] unsigned int 
  1438 ;;  dividend        2   10[COMMON] unsigned int 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;  counter         1   13[COMMON] unsigned char 
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  2    8[COMMON] unsigned int 
  1443 ;; Registers used:
  1444 ;;		wreg, status,2, status,0
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1450 ;;      Params:         4       0       0       0       0
  1451 ;;      Locals:         1       0       0       0       0
  1452 ;;      Temps:          1       0       0       0       0
  1453 ;;      Totals:         6       0       0       0       0
  1454 ;;Total ram usage:        6 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_sprintf
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           
  1464                           ;psect for function ___lwmod
  1465  0485                     ___lwmod:	
  1466                           
  1467                           ;incstack = 0
  1468                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1469  0485  0878               	movf	___lwmod@divisor,w
  1470  0486  0479               	iorwf	___lwmod@divisor+1,w
  1471  0487  1903               	btfsc	3,2
  1472  0488  2CB2               	goto	l1327
  1473  0489  01FD               	clrf	___lwmod@counter
  1474  048A  0AFD               	incf	___lwmod@counter,f
  1475  048B                     l1317:	
  1476  048B  1BF9               	btfsc	___lwmod@divisor+1,7
  1477  048C  2C99               	goto	l1319
  1478  048D  3001               	movlw	1
  1479  048E                     u555:	
  1480  048E  1003               	clrc
  1481  048F  0DF8               	rlf	___lwmod@divisor,f
  1482  0490  0DF9               	rlf	___lwmod@divisor+1,f
  1483  0491  3EFF               	addlw	-1
  1484  0492  1D03               	skipz
  1485  0493  2C8E               	goto	u555
  1486  0494  3001               	movlw	1
  1487  0495  00FC               	movwf	??___lwmod
  1488  0496  087C               	movf	??___lwmod,w
  1489  0497  07FD               	addwf	___lwmod@counter,f
  1490  0498  2C8B               	goto	l1317
  1491  0499                     l1319:	
  1492  0499  0879               	movf	___lwmod@divisor+1,w
  1493  049A  027B               	subwf	___lwmod@dividend+1,w
  1494  049B  1D03               	skipz
  1495  049C  2C9F               	goto	u575
  1496  049D  0878               	movf	___lwmod@divisor,w
  1497  049E  027A               	subwf	___lwmod@dividend,w
  1498  049F                     u575:	
  1499  049F  1C03               	skipc
  1500  04A0  2CA7               	goto	l1323
  1501  04A1  0878               	movf	___lwmod@divisor,w
  1502  04A2  02FA               	subwf	___lwmod@dividend,f
  1503  04A3  0879               	movf	___lwmod@divisor+1,w
  1504  04A4  1C03               	skipc
  1505  04A5  03FB               	decf	___lwmod@dividend+1,f
  1506  04A6  02FB               	subwf	___lwmod@dividend+1,f
  1507  04A7                     l1323:	
  1508  04A7  3001               	movlw	1
  1509  04A8                     u585:	
  1510  04A8  1003               	clrc
  1511  04A9  0CF9               	rrf	___lwmod@divisor+1,f
  1512  04AA  0CF8               	rrf	___lwmod@divisor,f
  1513  04AB  3EFF               	addlw	-1
  1514  04AC  1D03               	skipz
  1515  04AD  2CA8               	goto	u585
  1516  04AE  3001               	movlw	1
  1517  04AF  02FD               	subwf	___lwmod@counter,f
  1518  04B0  1D03               	btfss	3,2
  1519  04B1  2C99               	goto	l1319
  1520  04B2                     l1327:	
  1521  04B2  087B               	movf	___lwmod@dividend+1,w
  1522  04B3  00F9               	movwf	?___lwmod+1
  1523  04B4  087A               	movf	___lwmod@dividend,w
  1524  04B5  00F8               	movwf	?___lwmod
  1525  04B6  0008               	return
  1526  04B7                     __end_of___lwmod:	
  1527                           
  1528                           	psect	text4
  1529  04B7                     __ptext4:	
  1530 ;; *************** function ___lwdiv *****************
  1531 ;; Defined at:
  1532 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;  divisor         2    0[COMMON] unsigned int 
  1535 ;;  dividend        2    2[COMMON] unsigned int 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  quotient        2    5[COMMON] unsigned int 
  1538 ;;  counter         1    7[COMMON] unsigned char 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  2    0[COMMON] unsigned int 
  1541 ;; Registers used:
  1542 ;;		wreg, status,2, status,0
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1548 ;;      Params:         4       0       0       0       0
  1549 ;;      Locals:         3       0       0       0       0
  1550 ;;      Temps:          1       0       0       0       0
  1551 ;;      Totals:         8       0       0       0       0
  1552 ;;Total ram usage:        8 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;;		_sprintf
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           
  1563                           ;psect for function ___lwdiv
  1564  04B7                     ___lwdiv:	
  1565                           
  1566                           ;incstack = 0
  1567                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1568  04B7  01F5               	clrf	___lwdiv@quotient
  1569  04B8  01F6               	clrf	___lwdiv@quotient+1
  1570  04B9  0870               	movf	___lwdiv@divisor,w
  1571  04BA  0471               	iorwf	___lwdiv@divisor+1,w
  1572  04BB  1903               	btfsc	3,2
  1573  04BC  2CEE               	goto	l1305
  1574  04BD  01F7               	clrf	___lwdiv@counter
  1575  04BE  0AF7               	incf	___lwdiv@counter,f
  1576  04BF                     l1293:	
  1577  04BF  1BF1               	btfsc	___lwdiv@divisor+1,7
  1578  04C0  2CCD               	goto	l1295
  1579  04C1  3001               	movlw	1
  1580  04C2                     u485:	
  1581  04C2  1003               	clrc
  1582  04C3  0DF0               	rlf	___lwdiv@divisor,f
  1583  04C4  0DF1               	rlf	___lwdiv@divisor+1,f
  1584  04C5  3EFF               	addlw	-1
  1585  04C6  1D03               	skipz
  1586  04C7  2CC2               	goto	u485
  1587  04C8  3001               	movlw	1
  1588  04C9  00F4               	movwf	??___lwdiv
  1589  04CA  0874               	movf	??___lwdiv,w
  1590  04CB  07F7               	addwf	___lwdiv@counter,f
  1591  04CC  2CBF               	goto	l1293
  1592  04CD                     l1295:	
  1593  04CD  3001               	movlw	1
  1594  04CE                     u505:	
  1595  04CE  1003               	clrc
  1596  04CF  0DF5               	rlf	___lwdiv@quotient,f
  1597  04D0  0DF6               	rlf	___lwdiv@quotient+1,f
  1598  04D1  3EFF               	addlw	-1
  1599  04D2  1D03               	skipz
  1600  04D3  2CCE               	goto	u505
  1601  04D4  0871               	movf	___lwdiv@divisor+1,w
  1602  04D5  0273               	subwf	___lwdiv@dividend+1,w
  1603  04D6  1D03               	skipz
  1604  04D7  2CDA               	goto	u515
  1605  04D8  0870               	movf	___lwdiv@divisor,w
  1606  04D9  0272               	subwf	___lwdiv@dividend,w
  1607  04DA                     u515:	
  1608  04DA  1C03               	skipc
  1609  04DB  2CE3               	goto	l1301
  1610  04DC  0870               	movf	___lwdiv@divisor,w
  1611  04DD  02F2               	subwf	___lwdiv@dividend,f
  1612  04DE  0871               	movf	___lwdiv@divisor+1,w
  1613  04DF  1C03               	skipc
  1614  04E0  03F3               	decf	___lwdiv@dividend+1,f
  1615  04E1  02F3               	subwf	___lwdiv@dividend+1,f
  1616  04E2  1475               	bsf	___lwdiv@quotient,0
  1617  04E3                     l1301:	
  1618  04E3  3001               	movlw	1
  1619  04E4                     u525:	
  1620  04E4  1003               	clrc
  1621  04E5  0CF1               	rrf	___lwdiv@divisor+1,f
  1622  04E6  0CF0               	rrf	___lwdiv@divisor,f
  1623  04E7  3EFF               	addlw	-1
  1624  04E8  1D03               	skipz
  1625  04E9  2CE4               	goto	u525
  1626  04EA  3001               	movlw	1
  1627  04EB  02F7               	subwf	___lwdiv@counter,f
  1628  04EC  1D03               	btfss	3,2
  1629  04ED  2CCD               	goto	l1295
  1630  04EE                     l1305:	
  1631  04EE  0876               	movf	___lwdiv@quotient+1,w
  1632  04EF  00F1               	movwf	?___lwdiv+1
  1633  04F0  0875               	movf	___lwdiv@quotient,w
  1634  04F1  00F0               	movwf	?___lwdiv
  1635  04F2  0008               	return
  1636  04F3                     __end_of___lwdiv:	
  1637                           
  1638                           	psect	text5
  1639  03FA                     __ptext5:	
  1640 ;; *************** function _oscilator_begin *****************
  1641 ;; Defined at:
  1642 ;;		line 9 in file "./Oscilator.h"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  freq            1    wreg     unsigned char 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  freq            1    1[COMMON] unsigned char 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1656 ;;      Params:         0       0       0       0       0
  1657 ;;      Locals:         1       0       0       0       0
  1658 ;;      Temps:          1       0       0       0       0
  1659 ;;      Totals:         2       0       0       0       0
  1660 ;;Total ram usage:        2 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; This function calls:
  1663 ;;		Nothing
  1664 ;; This function is called by:
  1665 ;;		_main
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           
  1670                           ;psect for function _oscilator_begin
  1671  03FA                     _oscilator_begin:	
  1672                           
  1673                           ;incstack = 0
  1674                           ; Regs used in _oscilator_begin: [wreg+status,2+status,0]
  1675                           ;oscilator_begin@freq stored from wreg
  1676  03FA  00F1               	movwf	oscilator_begin@freq
  1677                           
  1678                           ;./Oscilator.h: 10:     OSCCONbits.IRCF = freq;
  1679  03FB  0871               	movf	oscilator_begin@freq,w
  1680  03FC  00F0               	movwf	??_oscilator_begin
  1681  03FD  0EF0               	swapf	??_oscilator_begin,f
  1682  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  1683  03FF  1303               	bcf	3,6	;RP1=0, select bank1
  1684  0400  080F               	movf	15,w	;volatile
  1685  0401  0670               	xorwf	??_oscilator_begin,w
  1686  0402  398F               	andlw	-113
  1687  0403  0670               	xorwf	??_oscilator_begin,w
  1688  0404  008F               	movwf	15	;volatile
  1689                           
  1690                           ;./Oscilator.h: 11:     OSCCONbits.SCS = 1;
  1691  0405  140F               	bsf	15,0	;volatile
  1692                           
  1693                           ;./Oscilator.h: 12:     OSCCONbits.OSTS = 0;
  1694  0406  118F               	bcf	15,3	;volatile
  1695  0407  0008               	return
  1696  0408                     __end_of_oscilator_begin:	
  1697                           
  1698                           	psect	text6
  1699  045D                     __ptext6:	
  1700 ;; *************** function _LCD8_strWrite *****************
  1701 ;; Defined at:
  1702 ;;		line 55 in file "./LCD8bit.h"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  data            2    2[COMMON] PTR unsigned char 
  1705 ;;		 -> test(20), show(15), STR_1(7), 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  i               1    5[COMMON] unsigned char 
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      void 
  1710 ;; Registers used:
  1711 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1717 ;;      Params:         2       0       0       0       0
  1718 ;;      Locals:         1       0       0       0       0
  1719 ;;      Temps:          1       0       0       0       0
  1720 ;;      Totals:         4       0       0       0       0
  1721 ;;Total ram usage:        4 bytes
  1722 ;; Hardware stack levels used:    1
  1723 ;; Hardware stack levels required when called:    1
  1724 ;; This function calls:
  1725 ;;		_LCD8_write
  1726 ;; This function is called by:
  1727 ;;		_main
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           
  1732                           ;psect for function _LCD8_strWrite
  1733  045D                     _LCD8_strWrite:	
  1734                           
  1735                           ;./LCD8bit.h: 56:     char i;;./LCD8bit.h: 57:         for(i=0; data[i] !='\0';i++ )
  1736                           
  1737                           ;incstack = 0
  1738                           ; Regs used in _LCD8_strWrite: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1739  045D  01F5               	clrf	LCD8_strWrite@i
  1740  045E                     l1395:	
  1741  045E  0875               	movf	LCD8_strWrite@i,w
  1742  045F  0772               	addwf	LCD8_strWrite@data,w
  1743  0460  0084               	movwf	4
  1744  0461  0873               	movf	LCD8_strWrite@data+1,w
  1745  0462  1803               	skipnc
  1746  0463  0A73               	incf	LCD8_strWrite@data+1,w
  1747  0464  1283               	bcf	3,5	;RP0=0, select bank0
  1748  0465  1303               	bcf	3,6	;RP1=0, select bank0
  1749  0466  00FF               	movwf	127
  1750  0467  120A  118A  2003  120A  118A  	fcall	stringtab
  1751  046C  3A00               	xorlw	0
  1752  046D  1903               	btfsc	3,2
  1753  046E  0008               	return
  1754                           
  1755                           ;./LCD8bit.h: 58:             LCD8_write(data[i]);
  1756  046F  0875               	movf	LCD8_strWrite@i,w
  1757  0470  0772               	addwf	LCD8_strWrite@data,w
  1758  0471  0084               	movwf	4
  1759  0472  0873               	movf	LCD8_strWrite@data+1,w
  1760  0473  1803               	skipnc
  1761  0474  0A73               	incf	LCD8_strWrite@data+1,w
  1762  0475  00FF               	movwf	127
  1763  0476  120A  118A  2003  120A  118A  	fcall	stringtab
  1764  047B  120A  118A  2408  120A  118A  	fcall	_LCD8_write
  1765  0480  3001               	movlw	1
  1766  0481  00F4               	movwf	??_LCD8_strWrite
  1767  0482  0874               	movf	??_LCD8_strWrite,w
  1768  0483  07F5               	addwf	LCD8_strWrite@i,f
  1769  0484  2C5E               	goto	l1395
  1770  0485                     __end_of_LCD8_strWrite:	
  1771                           
  1772                           	psect	text7
  1773  0408                     __ptext7:	
  1774 ;; *************** function _LCD8_write *****************
  1775 ;; Defined at:
  1776 ;;		line 4 in file "./LCD8bit.h"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  data            1    wreg     unsigned char 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  data            1    1[COMMON] unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1790 ;;      Params:         0       0       0       0       0
  1791 ;;      Locals:         1       0       0       0       0
  1792 ;;      Temps:          1       0       0       0       0
  1793 ;;      Totals:         2       0       0       0       0
  1794 ;;Total ram usage:        2 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; This function calls:
  1797 ;;		Nothing
  1798 ;; This function is called by:
  1799 ;;		_LCD8_strWrite
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           
  1804                           ;psect for function _LCD8_write
  1805  0408                     _LCD8_write:	
  1806                           
  1807                           ;incstack = 0
  1808                           ; Regs used in _LCD8_write: [wreg]
  1809                           ;LCD8_write@data stored from wreg
  1810  0408  00F1               	movwf	LCD8_write@data
  1811                           
  1812                           ;./LCD8bit.h: 5:     RA2 = 1;
  1813  0409  1283               	bcf	3,5	;RP0=0, select bank0
  1814  040A  1303               	bcf	3,6	;RP1=0, select bank0
  1815  040B  1505               	bsf	5,2	;volatile
  1816                           
  1817                           ;./LCD8bit.h: 6:     PORTB = data;
  1818  040C  0871               	movf	LCD8_write@data,w
  1819  040D  0086               	movwf	6	;volatile
  1820                           
  1821                           ;./LCD8bit.h: 7:     RA1 = 1;
  1822  040E  1485               	bsf	5,1	;volatile
  1823                           
  1824                           ;./LCD8bit.h: 8:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  1825  040F  301A               	movlw	26
  1826  0410  00F0               	movwf	??_LCD8_write
  1827  0411                     u987:	
  1828  0411  0BF0               	decfsz	??_LCD8_write,f
  1829  0412  2C11               	goto	u987
  1830  0413  0000               	nop
  1831                           
  1832                           ;./LCD8bit.h: 9:     RA1 = 0;
  1833  0414  1283               	bcf	3,5	;RP0=0, select bank0
  1834  0415  1303               	bcf	3,6	;RP1=0, select bank0
  1835  0416  1085               	bcf	5,1	;volatile
  1836  0417  0008               	return
  1837  0418                     __end_of_LCD8_write:	
  1838                           
  1839                           	psect	text8
  1840  042C                     __ptext8:	
  1841 ;; *************** function _LCD8_set_cursor *****************
  1842 ;; Defined at:
  1843 ;;		line 21 in file "./LCD8bit.h"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  row             1    wreg     unsigned char 
  1846 ;;  column          1    3[COMMON] unsigned char 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  row             1    6[COMMON] unsigned char 
  1849 ;;  cursor          1    5[COMMON] unsigned char 
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  1    wreg      void 
  1852 ;; Registers used:
  1853 ;;		wreg, status,2, status,0, pclath, cstack
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1859 ;;      Params:         1       0       0       0       0
  1860 ;;      Locals:         2       0       0       0       0
  1861 ;;      Temps:          1       0       0       0       0
  1862 ;;      Totals:         4       0       0       0       0
  1863 ;;Total ram usage:        4 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    1
  1866 ;; This function calls:
  1867 ;;		_LCD8_cmd
  1868 ;; This function is called by:
  1869 ;;		_main
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           
  1874                           ;psect for function _LCD8_set_cursor
  1875  042C                     _LCD8_set_cursor:	
  1876                           
  1877                           ;incstack = 0
  1878                           ; Regs used in _LCD8_set_cursor: [wreg+status,2+status,0+pclath+cstack]
  1879                           ;LCD8_set_cursor@row stored from wreg
  1880  042C  00F6               	movwf	LCD8_set_cursor@row
  1881                           
  1882                           ;./LCD8bit.h: 22:     char cursor;;./LCD8bit.h: 24:         if(row==1)
  1883  042D  0376               	decf	LCD8_set_cursor@row,w
  1884  042E  1D03               	btfss	3,2
  1885  042F  2C35               	goto	l102
  1886                           
  1887                           ;./LCD8bit.h: 25:             cursor = 128 + column -1;
  1888  0430  0873               	movf	LCD8_set_cursor@column,w
  1889  0431  3E7F               	addlw	127
  1890  0432  00F4               	movwf	??_LCD8_set_cursor
  1891  0433  0874               	movf	??_LCD8_set_cursor,w
  1892  0434  00F5               	movwf	LCD8_set_cursor@cursor
  1893  0435                     l102:	
  1894                           
  1895                           ;./LCD8bit.h: 26:         if (row==2)
  1896  0435  3002               	movlw	2
  1897  0436  0676               	xorwf	LCD8_set_cursor@row,w
  1898  0437  1D03               	btfss	3,2
  1899  0438  2C3E               	goto	l1357
  1900                           
  1901                           ;./LCD8bit.h: 27:             cursor = 192 + column -1;
  1902  0439  0873               	movf	LCD8_set_cursor@column,w
  1903  043A  3EBF               	addlw	191
  1904  043B  00F4               	movwf	??_LCD8_set_cursor
  1905  043C  0874               	movf	??_LCD8_set_cursor,w
  1906  043D  00F5               	movwf	LCD8_set_cursor@cursor
  1907  043E                     l1357:	
  1908                           
  1909                           ;./LCD8bit.h: 29:         LCD8_cmd(cursor);
  1910  043E  0875               	movf	LCD8_set_cursor@cursor,w
  1911  043F  120A  118A  2418   	fcall	_LCD8_cmd
  1912  0442  0008               	return
  1913  0443                     __end_of_LCD8_set_cursor:	
  1914                           
  1915                           	psect	text9
  1916  03D4                     __ptext9:	
  1917 ;; *************** function _LCD8_clear *****************
  1918 ;; Defined at:
  1919 ;;		line 32 in file "./LCD8bit.h"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;		None
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;		None
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  1    wreg      void 
  1926 ;; Registers used:
  1927 ;;		wreg, status,2, status,0, pclath, cstack
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1933 ;;      Params:         0       0       0       0       0
  1934 ;;      Locals:         0       0       0       0       0
  1935 ;;      Temps:          0       0       0       0       0
  1936 ;;      Totals:         0       0       0       0       0
  1937 ;;Total ram usage:        0 bytes
  1938 ;; Hardware stack levels used:    1
  1939 ;; Hardware stack levels required when called:    1
  1940 ;; This function calls:
  1941 ;;		_LCD8_cmd
  1942 ;; This function is called by:
  1943 ;;		_main
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           
  1948                           ;psect for function _LCD8_clear
  1949  03D4                     _LCD8_clear:	
  1950                           
  1951                           ;./LCD8bit.h: 33:     LCD8_cmd(0);
  1952                           
  1953                           ;incstack = 0
  1954                           ; Regs used in _LCD8_clear: [wreg+status,2+status,0+pclath+cstack]
  1955  03D4  3000               	movlw	0
  1956  03D5  120A  118A  2418  120A  118A  	fcall	_LCD8_cmd
  1957                           
  1958                           ;./LCD8bit.h: 34:     LCD8_cmd(1);
  1959  03DA  3001               	movlw	1
  1960  03DB  120A  118A  2418   	fcall	_LCD8_cmd
  1961  03DE  0008               	return
  1962  03DF                     __end_of_LCD8_clear:	
  1963                           
  1964                           	psect	text10
  1965  04F3                     __ptext10:	
  1966 ;; *************** function _LCD8_begin *****************
  1967 ;; Defined at:
  1968 ;;		line 37 in file "./LCD8bit.h"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;		None
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;		None
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  1    wreg      void 
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0, pclath, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1982 ;;      Params:         0       0       0       0       0
  1983 ;;      Locals:         0       0       0       0       0
  1984 ;;      Temps:          2       0       0       0       0
  1985 ;;      Totals:         2       0       0       0       0
  1986 ;;Total ram usage:        2 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    1
  1989 ;; This function calls:
  1990 ;;		_LCD8_cmd
  1991 ;; This function is called by:
  1992 ;;		_main
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995                           
  1996                           
  1997                           ;psect for function _LCD8_begin
  1998  04F3                     _LCD8_begin:	
  1999                           
  2000                           ;./LCD8bit.h: 38:     PORTB = 0;
  2001                           
  2002                           ;incstack = 0
  2003                           ; Regs used in _LCD8_begin: [wreg+status,2+status,0+pclath+cstack]
  2004  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  2005  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  2006  04F5  0186               	clrf	6	;volatile
  2007                           
  2008                           ;./LCD8bit.h: 39:     _delay((unsigned long)((20)*(8000000/4000.0)));
  2009  04F6  3034               	movlw	52
  2010  04F7  00F4               	movwf	??_LCD8_begin+1
  2011  04F8  30F1               	movlw	241
  2012  04F9  00F3               	movwf	??_LCD8_begin
  2013  04FA                     u997:	
  2014  04FA  0BF3               	decfsz	??_LCD8_begin,f
  2015  04FB  2CFA               	goto	u997
  2016  04FC  0BF4               	decfsz	??_LCD8_begin+1,f
  2017  04FD  2CFA               	goto	u997
  2018  04FE  2CFF               	nop2
  2019                           
  2020                           ;./LCD8bit.h: 40:     LCD8_cmd(48);
  2021  04FF  3030               	movlw	48
  2022  0500  120A  118A  2418  120A  118A  	fcall	_LCD8_cmd
  2023                           
  2024                           ;./LCD8bit.h: 41:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2025  0505  300D               	movlw	13
  2026  0506  00F4               	movwf	??_LCD8_begin+1
  2027  0507  30FB               	movlw	251
  2028  0508  00F3               	movwf	??_LCD8_begin
  2029  0509                     u1007:	
  2030  0509  0BF3               	decfsz	??_LCD8_begin,f
  2031  050A  2D09               	goto	u1007
  2032  050B  0BF4               	decfsz	??_LCD8_begin+1,f
  2033  050C  2D09               	goto	u1007
  2034  050D  2D0E               	nop2
  2035                           
  2036                           ;./LCD8bit.h: 42:     LCD8_cmd(48);
  2037  050E  3030               	movlw	48
  2038  050F  120A  118A  2418  120A  118A  	fcall	_LCD8_cmd
  2039                           
  2040                           ;./LCD8bit.h: 43:     _delay((unsigned long)((165)*(8000000/4000000.0)));
  2041  0514  306D               	movlw	109
  2042  0515  00F3               	movwf	??_LCD8_begin
  2043  0516                     u1017:	
  2044  0516  0BF3               	decfsz	??_LCD8_begin,f
  2045  0517  2D16               	goto	u1017
  2046  0518  2D19               	nop2
  2047                           
  2048                           ;./LCD8bit.h: 44:     LCD8_cmd(48);
  2049  0519  3030               	movlw	48
  2050  051A  120A  118A  2418  120A  118A  	fcall	_LCD8_cmd
  2051                           
  2052                           ;./LCD8bit.h: 45:     _delay((unsigned long)((165)*(8000000/4000000.0)));
  2053  051F  306D               	movlw	109
  2054  0520  00F3               	movwf	??_LCD8_begin
  2055  0521                     u1027:	
  2056  0521  0BF3               	decfsz	??_LCD8_begin,f
  2057  0522  2D21               	goto	u1027
  2058  0523  2D24               	nop2
  2059                           
  2060                           ;./LCD8bit.h: 47:     LCD8_cmd(0b111000);
  2061  0524  3038               	movlw	56
  2062  0525  120A  118A  2418  120A  118A  	fcall	_LCD8_cmd
  2063                           
  2064                           ;./LCD8bit.h: 48:     LCD8_cmd(0b10100);
  2065  052A  3014               	movlw	20
  2066  052B  120A  118A  2418  120A  118A  	fcall	_LCD8_cmd
  2067                           
  2068                           ;./LCD8bit.h: 49:     LCD8_cmd(1);
  2069  0530  3001               	movlw	1
  2070  0531  120A  118A  2418  120A  118A  	fcall	_LCD8_cmd
  2071                           
  2072                           ;./LCD8bit.h: 50:     LCD8_cmd(0b110);
  2073  0536  3006               	movlw	6
  2074  0537  120A  118A  2418  120A  118A  	fcall	_LCD8_cmd
  2075                           
  2076                           ;./LCD8bit.h: 51:     LCD8_cmd(0b1100);
  2077  053C  300C               	movlw	12
  2078  053D  120A  118A  2418  120A  118A  	fcall	_LCD8_cmd
  2079                           
  2080                           ;./LCD8bit.h: 52:     LCD8_cmd(0b10);
  2081  0542  3002               	movlw	2
  2082  0543  120A  118A  2418   	fcall	_LCD8_cmd
  2083  0546  0008               	return
  2084  0547                     __end_of_LCD8_begin:	
  2085                           
  2086                           	psect	text11
  2087  0418                     __ptext11:	
  2088 ;; *************** function _LCD8_cmd *****************
  2089 ;; Defined at:
  2090 ;;		line 12 in file "./LCD8bit.h"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;  data            1    wreg     unsigned char 
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;  data            1    2[COMMON] unsigned char 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  1    wreg      void 
  2097 ;; Registers used:
  2098 ;;		wreg
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2104 ;;      Params:         0       0       0       0       0
  2105 ;;      Locals:         1       0       0       0       0
  2106 ;;      Temps:          2       0       0       0       0
  2107 ;;      Totals:         3       0       0       0       0
  2108 ;;Total ram usage:        3 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; This function calls:
  2111 ;;		Nothing
  2112 ;; This function is called by:
  2113 ;;		_LCD8_set_cursor
  2114 ;;		_LCD8_clear
  2115 ;;		_LCD8_begin
  2116 ;;		_LCD8_shiftR
  2117 ;;		_LCD8_shiftL
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           
  2122                           ;psect for function _LCD8_cmd
  2123  0418                     _LCD8_cmd:	
  2124                           
  2125                           ;incstack = 0
  2126                           ; Regs used in _LCD8_cmd: [wreg]
  2127                           ;LCD8_cmd@data stored from wreg
  2128  0418  00F2               	movwf	LCD8_cmd@data
  2129                           
  2130                           ;./LCD8bit.h: 13:     RA2 = 0;
  2131  0419  1283               	bcf	3,5	;RP0=0, select bank0
  2132  041A  1303               	bcf	3,6	;RP1=0, select bank0
  2133  041B  1105               	bcf	5,2	;volatile
  2134                           
  2135                           ;./LCD8bit.h: 14:     PORTB = data;
  2136  041C  0872               	movf	LCD8_cmd@data,w
  2137  041D  0086               	movwf	6	;volatile
  2138                           
  2139                           ;./LCD8bit.h: 16:     RA1 = 1;
  2140  041E  1485               	bsf	5,1	;volatile
  2141                           
  2142                           ;./LCD8bit.h: 17:     _delay((unsigned long)((4)*(8000000/4000.0)));
  2143  041F  300B               	movlw	11
  2144  0420  00F1               	movwf	??_LCD8_cmd+1
  2145  0421  3062               	movlw	98
  2146  0422  00F0               	movwf	??_LCD8_cmd
  2147  0423                     u1037:	
  2148  0423  0BF0               	decfsz	??_LCD8_cmd,f
  2149  0424  2C23               	goto	u1037
  2150  0425  0BF1               	decfsz	??_LCD8_cmd+1,f
  2151  0426  2C23               	goto	u1037
  2152  0427  0000               	nop
  2153                           
  2154                           ;./LCD8bit.h: 18:     RA1 = 0;
  2155  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2156  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2157  042A  1085               	bcf	5,1	;volatile
  2158  042B  0008               	return
  2159  042C                     __end_of_LCD8_cmd:	
  2160                           
  2161                           	psect	text12
  2162  03C5                     __ptext12:	
  2163 ;; *************** function _ADC_conversion *****************
  2164 ;; Defined at:
  2165 ;;		line 117 in file "./ADC.h"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;		None
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;		None
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      unsigned char 
  2172 ;; Registers used:
  2173 ;;		wreg
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2179 ;;      Params:         0       0       0       0       0
  2180 ;;      Locals:         0       0       0       0       0
  2181 ;;      Temps:          0       0       0       0       0
  2182 ;;      Totals:         0       0       0       0       0
  2183 ;;Total ram usage:        0 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; This function calls:
  2186 ;;		Nothing
  2187 ;; This function is called by:
  2188 ;;		_main
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           
  2193                           ;psect for function _ADC_conversion
  2194  03C5                     _ADC_conversion:	
  2195                           
  2196                           ;./ADC.h: 118:     ADCON0bits.GO_nDONE = 1;
  2197                           
  2198                           ;incstack = 0
  2199                           ; Regs used in _ADC_conversion: [wreg]
  2200  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  2201  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  2202  03C7  149F               	bsf	31,1	;volatile
  2203  03C8                     l87:	
  2204                           ;./ADC.h: 119:     while(ADCON0bits.GO_nDONE);
  2205                           
  2206  03C8  189F               	btfsc	31,1	;volatile
  2207  03C9  2BC8               	goto	l87
  2208                           
  2209                           ;./ADC.h: 120:     return ADRESH;
  2210  03CA  081E               	movf	30,w	;volatile
  2211  03CB  0008               	return
  2212  03CC                     __end_of_ADC_conversion:	
  2213                           
  2214                           	psect	text13
  2215  0443                     __ptext13:	
  2216 ;; *************** function _ADC_begin *****************
  2217 ;; Defined at:
  2218 ;;		line 84 in file "./ADC.h"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;  option          1    wreg     unsigned char 
  2221 ;;  freq            1    3[COMMON] unsigned char 
  2222 ;; Auto vars:     Size  Location     Type
  2223 ;;  option          1    4[COMMON] unsigned char 
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  1    wreg      void 
  2226 ;; Registers used:
  2227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2233 ;;      Params:         1       0       0       0       0
  2234 ;;      Locals:         1       0       0       0       0
  2235 ;;      Temps:          0       0       0       0       0
  2236 ;;      Totals:         2       0       0       0       0
  2237 ;;Total ram usage:        2 bytes
  2238 ;; Hardware stack levels used:    1
  2239 ;; Hardware stack levels required when called:    1
  2240 ;; This function calls:
  2241 ;;		_ADC_channel
  2242 ;;		_ADC_freq
  2243 ;;		_ADC_option
  2244 ;; This function is called by:
  2245 ;;		_main
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           
  2250                           ;psect for function _ADC_begin
  2251  0443                     _ADC_begin:	
  2252                           
  2253                           ;incstack = 0
  2254                           ; Regs used in _ADC_begin: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2255                           ;ADC_begin@option stored from wreg
  2256  0443  00F4               	movwf	ADC_begin@option
  2257                           
  2258                           ;./ADC.h: 88:     ADC_option(option);
  2259  0444  0874               	movf	ADC_begin@option,w
  2260  0445  120A  118A  25A6  120A  118A  	fcall	_ADC_option
  2261                           
  2262                           ;./ADC.h: 89:     ADCON1bits.VCFG1 = 0;
  2263  044A  1683               	bsf	3,5	;RP0=1, select bank1
  2264  044B  1303               	bcf	3,6	;RP1=0, select bank1
  2265  044C  129F               	bcf	31,5	;volatile
  2266                           
  2267                           ;./ADC.h: 90:     ADCON1bits.VCFG0 = 0;
  2268  044D  121F               	bcf	31,4	;volatile
  2269                           
  2270                           ;./ADC.h: 91:     ADCON1bits.ADFM = 0;
  2271  044E  139F               	bcf	31,7	;volatile
  2272                           
  2273                           ;./ADC.h: 92:     ADCON0bits.ADON = 1;
  2274  044F  1283               	bcf	3,5	;RP0=0, select bank0
  2275  0450  1303               	bcf	3,6	;RP1=0, select bank0
  2276  0451  141F               	bsf	31,0	;volatile
  2277                           
  2278                           ;./ADC.h: 96:     ADC_freq(freq);
  2279  0452  0873               	movf	ADC_begin@freq,w
  2280  0453  120A  118A  23EC  120A  118A  	fcall	_ADC_freq
  2281                           
  2282                           ;./ADC.h: 98:     ADC_channel(option);
  2283  0458  0874               	movf	ADC_begin@option,w
  2284  0459  120A  118A  23DF   	fcall	_ADC_channel
  2285  045C  0008               	return
  2286  045D                     __end_of_ADC_begin:	
  2287                           
  2288                           	psect	text14
  2289  05A6                     __ptext14:	
  2290 ;; *************** function _ADC_option *****************
  2291 ;; Defined at:
  2292 ;;		line 2 in file "./ADC.h"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;  option          1    wreg     unsigned char 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  option          1    2[COMMON] unsigned char 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2306 ;;      Params:         0       0       0       0       0
  2307 ;;      Locals:         1       0       0       0       0
  2308 ;;      Temps:          2       0       0       0       0
  2309 ;;      Totals:         3       0       0       0       0
  2310 ;;Total ram usage:        3 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_ADC_begin
  2316 ;;		_ADC_int_begin
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           
  2321                           ;psect for function _ADC_option
  2322  05A6                     _ADC_option:	
  2323                           
  2324                           ;incstack = 0
  2325                           ; Regs used in _ADC_option: [wreg-fsr0h+status,2+status,0]
  2326                           ;ADC_option@option stored from wreg
  2327  05A6  00F2               	movwf	ADC_option@option
  2328                           
  2329                           ;./ADC.h: 3:     switch (option) {
  2330  05A7  2E11               	goto	l1257
  2331  05A8                     l56:	
  2332                           ;./ADC.h: 4:         case 0:
  2333                           
  2334                           
  2335                           ;./ADC.h: 5:             ANSELbits.ANS0 = 1;
  2336  05A8  1683               	bsf	3,5	;RP0=1, select bank3
  2337  05A9  1703               	bsf	3,6	;RP1=1, select bank3
  2338  05AA  1408               	bsf	8,0	;volatile
  2339                           
  2340                           ;./ADC.h: 6:             TRISAbits.TRISA0 = 1;
  2341  05AB  1683               	bsf	3,5	;RP0=1, select bank1
  2342  05AC  1303               	bcf	3,6	;RP1=0, select bank1
  2343  05AD  1405               	bsf	5,0	;volatile
  2344                           
  2345                           ;./ADC.h: 7:             break;
  2346  05AE  0008               	return
  2347  05AF                     l58:	
  2348                           ;./ADC.h: 8:         case 1:
  2349                           
  2350                           
  2351                           ;./ADC.h: 9:             ANSELbits.ANS1 = 1;
  2352  05AF  1683               	bsf	3,5	;RP0=1, select bank3
  2353  05B0  1703               	bsf	3,6	;RP1=1, select bank3
  2354  05B1  1488               	bsf	8,1	;volatile
  2355                           
  2356                           ;./ADC.h: 10:             TRISAbits.TRISA1 = 1;
  2357  05B2  1683               	bsf	3,5	;RP0=1, select bank1
  2358  05B3  1303               	bcf	3,6	;RP1=0, select bank1
  2359  05B4  1485               	bsf	5,1	;volatile
  2360                           
  2361                           ;./ADC.h: 11:             break;
  2362  05B5  0008               	return
  2363  05B6                     l59:	
  2364                           ;./ADC.h: 12:         case 2:
  2365                           
  2366                           
  2367                           ;./ADC.h: 13:             ANSELbits.ANS2 = 1;
  2368  05B6  1683               	bsf	3,5	;RP0=1, select bank3
  2369  05B7  1703               	bsf	3,6	;RP1=1, select bank3
  2370  05B8  1508               	bsf	8,2	;volatile
  2371                           
  2372                           ;./ADC.h: 14:             TRISAbits.TRISA2 = 1;
  2373  05B9  1683               	bsf	3,5	;RP0=1, select bank1
  2374  05BA  1303               	bcf	3,6	;RP1=0, select bank1
  2375  05BB  1505               	bsf	5,2	;volatile
  2376                           
  2377                           ;./ADC.h: 15:             break;
  2378  05BC  0008               	return
  2379  05BD                     l60:	
  2380                           ;./ADC.h: 16:         case 3:
  2381                           
  2382                           
  2383                           ;./ADC.h: 17:             ANSELbits.ANS3 = 1;
  2384  05BD  1683               	bsf	3,5	;RP0=1, select bank3
  2385  05BE  1703               	bsf	3,6	;RP1=1, select bank3
  2386  05BF  1588               	bsf	8,3	;volatile
  2387                           
  2388                           ;./ADC.h: 18:             TRISAbits.TRISA3 = 1;
  2389  05C0  1683               	bsf	3,5	;RP0=1, select bank1
  2390  05C1  1303               	bcf	3,6	;RP1=0, select bank1
  2391  05C2  1585               	bsf	5,3	;volatile
  2392                           
  2393                           ;./ADC.h: 19:             break;
  2394  05C3  0008               	return
  2395  05C4                     l61:	
  2396                           ;./ADC.h: 20:         case 4:
  2397                           
  2398                           
  2399                           ;./ADC.h: 21:             ANSELbits.ANS4 = 1;
  2400  05C4  1683               	bsf	3,5	;RP0=1, select bank3
  2401  05C5  1703               	bsf	3,6	;RP1=1, select bank3
  2402  05C6  1608               	bsf	8,4	;volatile
  2403                           
  2404                           ;./ADC.h: 22:             TRISAbits.TRISA5 = 1;
  2405  05C7  1683               	bsf	3,5	;RP0=1, select bank1
  2406  05C8  1303               	bcf	3,6	;RP1=0, select bank1
  2407  05C9  1685               	bsf	5,5	;volatile
  2408                           
  2409                           ;./ADC.h: 23:             break;
  2410  05CA  0008               	return
  2411  05CB                     l62:	
  2412                           ;./ADC.h: 24:         case 5:
  2413                           
  2414                           
  2415                           ;./ADC.h: 25:             ANSELbits.ANS5 = 1;
  2416  05CB  1683               	bsf	3,5	;RP0=1, select bank3
  2417  05CC  1703               	bsf	3,6	;RP1=1, select bank3
  2418  05CD  1688               	bsf	8,5	;volatile
  2419                           
  2420                           ;./ADC.h: 26:             TRISEbits.TRISE0 = 1;
  2421  05CE  1683               	bsf	3,5	;RP0=1, select bank1
  2422  05CF  1303               	bcf	3,6	;RP1=0, select bank1
  2423  05D0  1409               	bsf	9,0	;volatile
  2424                           
  2425                           ;./ADC.h: 27:             break;
  2426  05D1  0008               	return
  2427  05D2                     l63:	
  2428                           ;./ADC.h: 28:         case 6:
  2429                           
  2430                           
  2431                           ;./ADC.h: 29:             ANSELbits.ANS6 = 1;
  2432  05D2  1683               	bsf	3,5	;RP0=1, select bank3
  2433  05D3  1703               	bsf	3,6	;RP1=1, select bank3
  2434  05D4  1708               	bsf	8,6	;volatile
  2435                           
  2436                           ;./ADC.h: 30:             TRISEbits.TRISE1 = 1;
  2437  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  2438  05D6  1303               	bcf	3,6	;RP1=0, select bank1
  2439  05D7  1489               	bsf	9,1	;volatile
  2440                           
  2441                           ;./ADC.h: 31:             break;
  2442  05D8  0008               	return
  2443  05D9                     l64:	
  2444                           ;./ADC.h: 32:         case 7:
  2445                           
  2446                           
  2447                           ;./ADC.h: 33:             ANSELbits.ANS7 = 1;
  2448  05D9  1683               	bsf	3,5	;RP0=1, select bank3
  2449  05DA  1703               	bsf	3,6	;RP1=1, select bank3
  2450  05DB  1788               	bsf	8,7	;volatile
  2451                           
  2452                           ;./ADC.h: 34:             TRISEbits.TRISE2 = 1;
  2453  05DC  1683               	bsf	3,5	;RP0=1, select bank1
  2454  05DD  1303               	bcf	3,6	;RP1=0, select bank1
  2455  05DE  1509               	bsf	9,2	;volatile
  2456                           
  2457                           ;./ADC.h: 35:             break;
  2458  05DF  0008               	return
  2459  05E0                     l65:	
  2460                           ;./ADC.h: 36:         case 8:
  2461                           
  2462                           
  2463                           ;./ADC.h: 37:             ANSELHbits.ANS8 = 1;
  2464  05E0  1683               	bsf	3,5	;RP0=1, select bank3
  2465  05E1  1703               	bsf	3,6	;RP1=1, select bank3
  2466  05E2  1409               	bsf	9,0	;volatile
  2467                           
  2468                           ;./ADC.h: 38:             TRISBbits.TRISB2 = 1;
  2469  05E3  1683               	bsf	3,5	;RP0=1, select bank1
  2470  05E4  1303               	bcf	3,6	;RP1=0, select bank1
  2471  05E5  1506               	bsf	6,2	;volatile
  2472                           
  2473                           ;./ADC.h: 39:             break;
  2474  05E6  0008               	return
  2475  05E7                     l66:	
  2476                           ;./ADC.h: 40:         case 9:
  2477                           
  2478                           
  2479                           ;./ADC.h: 41:             ANSELHbits.ANS9 = 1;
  2480  05E7  1683               	bsf	3,5	;RP0=1, select bank3
  2481  05E8  1703               	bsf	3,6	;RP1=1, select bank3
  2482  05E9  1489               	bsf	9,1	;volatile
  2483                           
  2484                           ;./ADC.h: 42:             TRISBbits.TRISB3 = 1;
  2485  05EA  1683               	bsf	3,5	;RP0=1, select bank1
  2486  05EB  1303               	bcf	3,6	;RP1=0, select bank1
  2487  05EC  1586               	bsf	6,3	;volatile
  2488                           
  2489                           ;./ADC.h: 43:             break;
  2490  05ED  0008               	return
  2491  05EE                     l67:	
  2492                           ;./ADC.h: 44:         case 10:
  2493                           
  2494                           
  2495                           ;./ADC.h: 45:             ANSELHbits.ANS10 = 1;
  2496  05EE  1683               	bsf	3,5	;RP0=1, select bank3
  2497  05EF  1703               	bsf	3,6	;RP1=1, select bank3
  2498  05F0  1509               	bsf	9,2	;volatile
  2499                           
  2500                           ;./ADC.h: 46:             TRISBbits.TRISB1 = 1;
  2501  05F1  1683               	bsf	3,5	;RP0=1, select bank1
  2502  05F2  1303               	bcf	3,6	;RP1=0, select bank1
  2503  05F3  1486               	bsf	6,1	;volatile
  2504                           
  2505                           ;./ADC.h: 47:             break;
  2506  05F4  0008               	return
  2507  05F5                     l68:	
  2508                           ;./ADC.h: 48:         case 11:
  2509                           
  2510                           
  2511                           ;./ADC.h: 49:             ANSELHbits.ANS11 = 1;
  2512  05F5  1683               	bsf	3,5	;RP0=1, select bank3
  2513  05F6  1703               	bsf	3,6	;RP1=1, select bank3
  2514  05F7  1589               	bsf	9,3	;volatile
  2515                           
  2516                           ;./ADC.h: 50:             TRISBbits.TRISB4 = 1;
  2517  05F8  1683               	bsf	3,5	;RP0=1, select bank1
  2518  05F9  1303               	bcf	3,6	;RP1=0, select bank1
  2519  05FA  1606               	bsf	6,4	;volatile
  2520                           
  2521                           ;./ADC.h: 51:             break;
  2522  05FB  0008               	return
  2523  05FC                     l69:	
  2524                           ;./ADC.h: 52:         case 12:
  2525                           
  2526                           
  2527                           ;./ADC.h: 53:             ANSELHbits.ANS12 = 1;
  2528  05FC  1683               	bsf	3,5	;RP0=1, select bank3
  2529  05FD  1703               	bsf	3,6	;RP1=1, select bank3
  2530  05FE  1609               	bsf	9,4	;volatile
  2531                           
  2532                           ;./ADC.h: 54:             TRISBbits.TRISB0 = 1;
  2533  05FF  1683               	bsf	3,5	;RP0=1, select bank1
  2534  0600  1303               	bcf	3,6	;RP1=0, select bank1
  2535  0601  1406               	bsf	6,0	;volatile
  2536                           
  2537                           ;./ADC.h: 55:             break;
  2538  0602  0008               	return
  2539  0603                     l70:	
  2540                           ;./ADC.h: 56:         case 13:
  2541                           
  2542                           
  2543                           ;./ADC.h: 57:             ANSELHbits.ANS13 = 1;
  2544  0603  1683               	bsf	3,5	;RP0=1, select bank3
  2545  0604  1703               	bsf	3,6	;RP1=1, select bank3
  2546  0605  1689               	bsf	9,5	;volatile
  2547                           
  2548                           ;./ADC.h: 58:             TRISBbits.TRISB5 = 1;
  2549  0606  1683               	bsf	3,5	;RP0=1, select bank1
  2550  0607  1303               	bcf	3,6	;RP1=0, select bank1
  2551  0608  1686               	bsf	6,5	;volatile
  2552                           
  2553                           ;./ADC.h: 59:             break;
  2554  0609  0008               	return
  2555  060A                     l71:	
  2556                           ;./ADC.h: 60:         default:
  2557                           
  2558                           
  2559                           ;./ADC.h: 61:             ANSELbits.ANS0 = 1;
  2560  060A  1683               	bsf	3,5	;RP0=1, select bank3
  2561  060B  1703               	bsf	3,6	;RP1=1, select bank3
  2562  060C  1408               	bsf	8,0	;volatile
  2563                           
  2564                           ;./ADC.h: 62:             TRISAbits.TRISA0 = 1;
  2565  060D  1683               	bsf	3,5	;RP0=1, select bank1
  2566  060E  1303               	bcf	3,6	;RP1=0, select bank1
  2567  060F  1405               	bsf	5,0	;volatile
  2568                           
  2569                           ;./ADC.h: 63:             break;
  2570  0610  0008               	return
  2571  0611                     l1257:	
  2572  0611  0872               	movf	ADC_option@option,w
  2573  0612  00F0               	movwf	??_ADC_option
  2574  0613  01F1               	clrf	??_ADC_option+1
  2575                           
  2576                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2577                           ; Switch size 1, requested type "simple"
  2578                           ; Number of cases is 1, Range of values is 0 to 0
  2579                           ; switch strategies available:
  2580                           ; Name         Instructions Cycles
  2581                           ; simple_byte            4     3 (average)
  2582                           ; direct_byte           11     8 (fixed)
  2583                           ; jumptable            260     6 (fixed)
  2584                           ;	Chosen strategy is simple_byte
  2585  0614  0871               	movf	??_ADC_option+1,w
  2586  0615  3A00               	xorlw	0	; case 0
  2587  0616  1903               	skipnz
  2588  0617  2E19               	goto	l1673
  2589  0618  2E0A               	goto	l71
  2590  0619                     l1673:	
  2591                           
  2592                           ; Switch size 1, requested type "simple"
  2593                           ; Number of cases is 14, Range of values is 0 to 13
  2594                           ; switch strategies available:
  2595                           ; Name         Instructions Cycles
  2596                           ; simple_byte           43    22 (average)
  2597                           ; direct_byte           50     8 (fixed)
  2598                           ; jumptable            260     6 (fixed)
  2599                           ;	Chosen strategy is simple_byte
  2600  0619  0870               	movf	??_ADC_option,w
  2601  061A  3A00               	xorlw	0	; case 0
  2602  061B  1903               	skipnz
  2603  061C  2DA8               	goto	l56
  2604  061D  3A01               	xorlw	1	; case 1
  2605  061E  1903               	skipnz
  2606  061F  2DAF               	goto	l58
  2607  0620  3A03               	xorlw	3	; case 2
  2608  0621  1903               	skipnz
  2609  0622  2DB6               	goto	l59
  2610  0623  3A01               	xorlw	1	; case 3
  2611  0624  1903               	skipnz
  2612  0625  2DBD               	goto	l60
  2613  0626  3A07               	xorlw	7	; case 4
  2614  0627  1903               	skipnz
  2615  0628  2DC4               	goto	l61
  2616  0629  3A01               	xorlw	1	; case 5
  2617  062A  1903               	skipnz
  2618  062B  2DCB               	goto	l62
  2619  062C  3A03               	xorlw	3	; case 6
  2620  062D  1903               	skipnz
  2621  062E  2DD2               	goto	l63
  2622  062F  3A01               	xorlw	1	; case 7
  2623  0630  1903               	skipnz
  2624  0631  2DD9               	goto	l64
  2625  0632  3A0F               	xorlw	15	; case 8
  2626  0633  1903               	skipnz
  2627  0634  2DE0               	goto	l65
  2628  0635  3A01               	xorlw	1	; case 9
  2629  0636  1903               	skipnz
  2630  0637  2DE7               	goto	l66
  2631  0638  3A03               	xorlw	3	; case 10
  2632  0639  1903               	skipnz
  2633  063A  2DEE               	goto	l67
  2634  063B  3A01               	xorlw	1	; case 11
  2635  063C  1903               	skipnz
  2636  063D  2DF5               	goto	l68
  2637  063E  3A07               	xorlw	7	; case 12
  2638  063F  1903               	skipnz
  2639  0640  2DFC               	goto	l69
  2640  0641  3A01               	xorlw	1	; case 13
  2641  0642  1903               	skipnz
  2642  0643  2E03               	goto	l70
  2643  0644  2E0A               	goto	l71
  2644  0645  0008               	return
  2645  0646                     __end_of_ADC_option:	
  2646                           
  2647                           	psect	text15
  2648  03EC                     __ptext15:	
  2649 ;; *************** function _ADC_freq *****************
  2650 ;; Defined at:
  2651 ;;		line 67 in file "./ADC.h"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;  freq            1    wreg     unsigned char 
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;  freq            1    1[COMMON] unsigned char 
  2656 ;; Return value:  Size  Location     Type
  2657 ;;                  1    wreg      void 
  2658 ;; Registers used:
  2659 ;;		wreg, status,2, status,0
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2665 ;;      Params:         0       0       0       0       0
  2666 ;;      Locals:         1       0       0       0       0
  2667 ;;      Temps:          1       0       0       0       0
  2668 ;;      Totals:         2       0       0       0       0
  2669 ;;Total ram usage:        2 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_ADC_begin
  2675 ;;		_ADC_int_begin
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           
  2680                           ;psect for function _ADC_freq
  2681  03EC                     _ADC_freq:	
  2682                           
  2683                           ;incstack = 0
  2684                           ; Regs used in _ADC_freq: [wreg+status,2+status,0]
  2685                           ;ADC_freq@freq stored from wreg
  2686  03EC  00F1               	movwf	ADC_freq@freq
  2687                           
  2688                           ;./ADC.h: 74:     ADCON0bits.ADCS = freq;
  2689  03ED  0871               	movf	ADC_freq@freq,w
  2690  03EE  00F0               	movwf	??_ADC_freq
  2691  03EF  0EF0               	swapf	??_ADC_freq,f
  2692  03F0  0DF0               	rlf	??_ADC_freq,f
  2693  03F1  0DF0               	rlf	??_ADC_freq,f
  2694  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2695  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  2696  03F4  081F               	movf	31,w	;volatile
  2697  03F5  0670               	xorwf	??_ADC_freq,w
  2698  03F6  393F               	andlw	-193
  2699  03F7  0670               	xorwf	??_ADC_freq,w
  2700  03F8  009F               	movwf	31	;volatile
  2701  03F9  0008               	return
  2702  03FA                     __end_of_ADC_freq:	
  2703                           
  2704                           	psect	text16
  2705  03DF                     __ptext16:	
  2706 ;; *************** function _ADC_channel *****************
  2707 ;; Defined at:
  2708 ;;		line 77 in file "./ADC.h"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  channel         1    wreg     unsigned char 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  channel         1    1[COMMON] unsigned char 
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  1    wreg      void 
  2715 ;; Registers used:
  2716 ;;		wreg, status,2, status,0
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2722 ;;      Params:         0       0       0       0       0
  2723 ;;      Locals:         1       0       0       0       0
  2724 ;;      Temps:          1       0       0       0       0
  2725 ;;      Totals:         2       0       0       0       0
  2726 ;;Total ram usage:        2 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_ADC_begin
  2732 ;;		_ADC_int_begin
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           
  2737                           ;psect for function _ADC_channel
  2738  03DF                     _ADC_channel:	
  2739                           
  2740                           ;incstack = 0
  2741                           ; Regs used in _ADC_channel: [wreg+status,2+status,0]
  2742                           ;ADC_channel@channel stored from wreg
  2743  03DF  00F1               	movwf	ADC_channel@channel
  2744                           
  2745                           ;./ADC.h: 81:     ADCON0bits.CHS = channel;
  2746  03E0  0871               	movf	ADC_channel@channel,w
  2747  03E1  00F0               	movwf	??_ADC_channel
  2748  03E2  0DF0               	rlf	??_ADC_channel,f
  2749  03E3  0DF0               	rlf	??_ADC_channel,f
  2750  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  2751  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  2752  03E6  081F               	movf	31,w	;volatile
  2753  03E7  0670               	xorwf	??_ADC_channel,w
  2754  03E8  39C3               	andlw	-61
  2755  03E9  0670               	xorwf	??_ADC_channel,w
  2756  03EA  009F               	movwf	31	;volatile
  2757  03EB  0008               	return
  2758  03EC                     __end_of_ADC_channel:	
  2759  007E                     btemp	set	126	;btemp
  2760  007E                     wtemp0	set	126


Data Sizes:
    Strings     31
    Constant    10
    Data        0
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     16      72
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 13
		 -> STR_3(CODE[13]), STR_2(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> test(BANK0[20]), show(BANK0[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD8_strWrite@data	PTR unsigned char  size(2) Largest target is 20
		 -> test(BANK0[20]), show(BANK0[15]), STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD8_strWrite->_LCD8_write
    _LCD8_set_cursor->_LCD8_cmd
    _LCD8_clear->_LCD8_cmd
    _LCD8_begin->_LCD8_cmd
    _ADC_begin->_ADC_option

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3012
                                             13 BANK0      3     3      0
                          _ADC_begin
                     _ADC_conversion
                         _LCD8_begin
                         _LCD8_clear
                    _LCD8_set_cursor
                      _LCD8_strWrite
                            ___lwdiv
                    _oscilator_begin
                            _sprintf
                          _wave_step
 ---------------------------------------------------------------------------------
 (1) _wave_step                                            4     2      2      98
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1472
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     466
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _oscilator_begin                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD8_strWrite                                        4     2      2     340
                                              2 COMMON     4     2      2
                         _LCD8_write
 ---------------------------------------------------------------------------------
 (2) _LCD8_write                                           2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD8_set_cursor                                      4     3      1     362
                                              3 COMMON     4     3      1
                           _LCD8_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD8_clear                                           0     0      0      22
                           _LCD8_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD8_begin                                           2     2      0      22
                                              3 COMMON     2     2      0
                           _LCD8_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD8_cmd                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADC_conversion                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_begin                                            2     1      1     208
                                              3 COMMON     2     1      1
                        _ADC_channel
                           _ADC_freq
                         _ADC_option
 ---------------------------------------------------------------------------------
 (2) _ADC_option                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADC_freq                                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADC_channel                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_begin
     _ADC_channel
     _ADC_freq
     _ADC_option
   _ADC_conversion
   _LCD8_begin
     _LCD8_cmd
   _LCD8_clear
     _LCD8_cmd
   _LCD8_set_cursor
     _LCD8_cmd
   _LCD8_strWrite
     _LCD8_write
   ___lwdiv
   _oscilator_begin
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _wave_step

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      56       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      48       5       90.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      56      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Feb 26 10:54:17 2019

      LCD8_set_cursor@row 0076                         _i 0033                         pc 0002  
             __CFG_CP$OFF 0000     LCD8_set_cursor@column 0073                        l60 05BD  
                      l61 05C4                        l70 0603                        l62 05CB  
                      l71 060A                        l63 05D2                        l64 05D9  
                      l56 05A8                        l65 05E0                        l66 05E7  
                      l58 05AF                        l67 05EE                        l59 05B6  
                      l68 05F5                        l69 05FC                        l87 03C8  
   LCD8_set_cursor@cursor 0075                        fsr 0004        __size_of_ADC_begin 001A  
                     l102 0435                       l148 070E                       l181 059D  
                     l176 054B                       _RA1 0029                       _RA2 002A  
                     _RE3 004B                       u505 04CE              __CFG_CPD$OFF 0000  
                     u515 04DA                       u525 04E4                       u555 048E  
                     u485 04C2                       u575 049F                       u585 04A8  
                     u665 0792                       u755 0551                       u937 0692  
                     u947 0563                       u957 0575                       u967 0587  
                     u977 0598                       u987 0411                       u997 04FA  
                     fsr0 0004                       indf 0000              __CFG_LVP$OFF 0000  
                    l1301 04E3                      l1305 04EE                      l1323 04A7  
                    l1411 0744                      l1317 048B                      l1319 0499  
                    l1327 04B2                      l1257 0611                      l1433 077B  
                    l1417 0762                      l1427 0779                      l1357 043E  
                    l1293 04BF                      l1453 07AF                      l1445 07AB  
                    l1295 04CD                      l1439 079C                      l1455 0724  
                    l1543 0698                      l1457 07F0                      l1481 058C  
                    l1473 0568                      l1395 045E                      l1477 057A  
                    l1671 0757                      l1673 0619       __size_of_ADC_option 00A0  
                    STR_1 0035                      STR_2 002A                      STR_3 001D  
                    u1007 0509                      u1017 0516                      u1027 0521  
                    u1037 0423              __CFG_WRT$OFF 0000                      _main 0646  
                    _show 0049                      _test 0035                      _step 0030  
                    btemp 007E             __CFG_BOREN$ON 0000                      start 0000  
        __end_of_ADC_freq 03FA             __CFG_IESO$OFF 0000      __size_of_ADC_channel 000D  
 __end_of_oscilator_begin 0408          __end_of_LCD8_cmd 042C       __size_of_LCD8_begin 0054  
     __size_of_LCD8_clear 000B           _LCD8_set_cursor 042C                     ?_main 0070  
     __size_of_LCD8_write 0010             __CFG_WDTE$OFF 0000           __end_of___lwdiv 04F3  
         __end_of___lwmod 04B7                     _PORTA 0005                     _PORTB 0006  
                   _PORTD 0008                     _TRISB 0086                     _TRISD 0088  
                   _TRISE 0089            __CFG_FCMEN$OFF 0000                     _delta 002A  
         __end_of_dpowers 001D                     _theta 002E                     pclath 000A  
       __end_of_ADC_begin 045D                     status 0003                     wtemp0 007E  
         __end_of_sprintf 07F5            __CFG_MCLRE$OFF 0000           __initialization 07F5  
            __end_of_main 071D                    ??_main 0065          ??_ADC_conversion 0070  
                  _ADRESH 001E                    _TRISA1 0429                    _TRISA2 042A  
          __CFG_PWRTE$OFF 0000   __end_of_LCD8_set_cursor 0443              ??_ADC_option 0070  
        ?_oscilator_begin 0070                 ??___lwdiv 0074                 ??___lwmod 007C  
               ?_ADC_freq 0070              ??_LCD8_begin 0073                 ??_sprintf 005B  
            ??_LCD8_clear 0073                 ?_LCD8_cmd 0070        __end_of_ADC_option 0646  
            ??_LCD8_write 0070   __end_of__initialization 07FC            __pcstackCOMMON 0070  
          wave_step@steps 0070        __end_of_LCD8_begin 0547        __end_of_LCD8_clear 03DF  
      __end_of_LCD8_write 0418                ??_ADC_freq 0070                ??_LCD8_cmd 0070  
              __pbssBANK0 0020          ADC_option@option 0072     __end_of_LCD8_strWrite 0485  
              __pmaintext 0646          ?_LCD8_set_cursor 0073        __size_of_wave_step 005F  
              __stringtab 0003             ??_ADC_channel 0070                 _ADC_begin 0443  
                 ___lwdiv 04B7                   ___lwmod 0485                 _ANSELbits 0188  
                 __ptext1 0547                   __ptext2 071D                   __ptext3 0485  
                 __ptext4 04B7                   __ptext5 03FA                   __ptext6 045D  
                 __ptext7 0408                   __ptext8 042C                   __ptext9 03D4  
                 _dpowers 0013         LCD8_strWrite@data 0072                   _sprintf 071D  
                 clrloop0 03CD      end_of_initialization 07FC                ?_ADC_begin 0073  
       __end_of_wave_step 05A6       __end_of_ADC_channel 03EC                 _TRISAbits 0085  
               _TRISBbits 0086                 _TRISEbits 0089         __size_of_ADC_freq 000E  
       __size_of_LCD8_cmd 0014              ADC_freq@freq 0071  __size_of_oscilator_begin 000E  
     start_initialization 07F5               _ADC_channel 03DF  __CFG_FOSC$INTRC_NOCLKOUT 0000  
 __size_of_ADC_conversion 0007               ??_ADC_begin 0074                full_step@i 0028  
               ___latbits 0002             __pcstackBANK0 0058               sprintf@flag 005F  
             sprintf@prec 0060          ___lwdiv@dividend 0072                  ?___lwdiv 0070  
                ?___lwmod 0078            LCD8_strWrite@i 0075                 __pstrings 0003  
  __size_of_LCD8_strWrite 0028  __size_of_LCD8_set_cursor 0017            LCD8_write@data 0071  
                _ADC_freq 03EC          ___lwdiv@quotient 0075                  ?_sprintf 0058  
       ??_oscilator_begin 0070                  _LCD8_cmd 0418                 clear_ram0 03CC  
                _PIE1bits 008C                  _PIR1bits 000C                 _wave_step 0547  
              _ADCON0bits 001F               __stringbase 0012                _ADCON1bits 009F  
               _step_last 002C                wave_step@a 0024                wave_step@i 0026  
      ADC_channel@channel 0071             _LCD8_strWrite 045D       oscilator_begin@freq 0071  
          _ADC_conversion 03C5                _ADC_option 05A6                 full_rev@i 0032  
              ?_wave_step 0070          __size_of___lwdiv 003C          __size_of___lwmod 0032  
      __end_of__stringtab 0013                  _adc_read 0034                _ANSELHbits 0189  
              sprintf@val 0061           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 04F3                  __ptext11 0418                  __ptext12 03C5  
                __ptext13 0443                  __ptext14 05A6                  __ptext15 03EC  
                __ptext16 03DF         __CFG_BOR4V$BOR40V 0000         ??_LCD8_set_cursor 0074  
              _LCD8_begin 04F3                _LCD8_clear 03D4          __size_of_sprintf 00D8  
          ?_LCD8_strWrite 0072                _LCD8_write 0408    __end_of_ADC_conversion 03CC  
           __size_of_main 00D7              ?_ADC_channel 0070              LCD8_cmd@data 0072  
               wave_rev@a 0020                 wave_rev@i 0022           ADC_begin@option 0074  
              _INTCONbits 000B                 sprintf@ap 005E                 sprintf@sp 0063  
         ?_ADC_conversion 0070          ___lwmod@dividend 007A                 stringcode 000D  
              _OSCCONbits 008F               ?_ADC_option 0070               ??_wave_step 0072  
         _oscilator_begin 03FA                  sprintf@c 0064                  sprintf@f 0058  
         ___lwmod@divisor 0078           ___lwmod@counter 007D                  stringdir 000D  
                stringtab 0003             ADC_begin@freq 0073           ??_LCD8_strWrite 0074  
             ?_LCD8_begin 0070               ?_LCD8_clear 0070               ?_LCD8_write 0070  
